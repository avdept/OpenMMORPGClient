// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameRoomModels.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameRoomModels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameRoomModels_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "DisableWarnings.pb.h"
#include "MainMenuModels.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameRoomModels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameRoomModels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameRoomModels_2eproto;
class CreateRoom;
class CreateRoomDefaultTypeInternal;
extern CreateRoomDefaultTypeInternal _CreateRoom_default_instance_;
class Room;
class RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class RoomDescribe;
class RoomDescribeDefaultTypeInternal;
extern RoomDescribeDefaultTypeInternal _RoomDescribe_default_instance_;
class RoomUpdate;
class RoomUpdateDefaultTypeInternal;
extern RoomUpdateDefaultTypeInternal _RoomUpdate_default_instance_;
class RoomsListUpdate;
class RoomsListUpdateDefaultTypeInternal;
extern RoomsListUpdateDefaultTypeInternal _RoomsListUpdate_default_instance_;
class SubscribeRoom;
class SubscribeRoomDefaultTypeInternal;
extern SubscribeRoomDefaultTypeInternal _SubscribeRoom_default_instance_;
class TeamPlayer;
class TeamPlayerDefaultTypeInternal;
extern TeamPlayerDefaultTypeInternal _TeamPlayer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CreateRoom* Arena::CreateMaybeMessage<::CreateRoom>(Arena*);
template<> ::Room* Arena::CreateMaybeMessage<::Room>(Arena*);
template<> ::RoomDescribe* Arena::CreateMaybeMessage<::RoomDescribe>(Arena*);
template<> ::RoomUpdate* Arena::CreateMaybeMessage<::RoomUpdate>(Arena*);
template<> ::RoomsListUpdate* Arena::CreateMaybeMessage<::RoomsListUpdate>(Arena*);
template<> ::SubscribeRoom* Arena::CreateMaybeMessage<::SubscribeRoom>(Arena*);
template<> ::TeamPlayer* Arena::CreateMaybeMessage<::TeamPlayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Room PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Room) */ {
 public:
  inline Room() : Room(nullptr) {};
  virtual ~Room();

  Room(const Room& from);
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }
  inline void Swap(Room* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Room* New() const final {
    return CreateMaybeMessage<Room>(nullptr);
  }

  Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Room& from);
  void MergeFrom(const Room& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Room";
  }
  protected:
  explicit Room(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameRoomModels_2eproto);
    return ::descriptor_table_GameRoomModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 6,
    kCreateRoomFieldNumber = 1,
    kRoomsListUpdateFieldNumber = 2,
    kSubscribeRoomFieldNumber = 3,
    kRoomUpdateFieldNumber = 4,
    kStartGameFieldNumber = 5,
  };
  // string roomName = 6;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomname(
      std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // .CreateRoom createRoom = 1;
  bool has_createroom() const;
  private:
  bool _internal_has_createroom() const;
  public:
  void clear_createroom();
  const ::CreateRoom& createroom() const;
  ::CreateRoom* release_createroom();
  ::CreateRoom* mutable_createroom();
  void set_allocated_createroom(::CreateRoom* createroom);
  private:
  const ::CreateRoom& _internal_createroom() const;
  ::CreateRoom* _internal_mutable_createroom();
  public:
  void unsafe_arena_set_allocated_createroom(
      ::CreateRoom* createroom);
  ::CreateRoom* unsafe_arena_release_createroom();

  // .RoomsListUpdate roomsListUpdate = 2;
  bool has_roomslistupdate() const;
  private:
  bool _internal_has_roomslistupdate() const;
  public:
  void clear_roomslistupdate();
  const ::RoomsListUpdate& roomslistupdate() const;
  ::RoomsListUpdate* release_roomslistupdate();
  ::RoomsListUpdate* mutable_roomslistupdate();
  void set_allocated_roomslistupdate(::RoomsListUpdate* roomslistupdate);
  private:
  const ::RoomsListUpdate& _internal_roomslistupdate() const;
  ::RoomsListUpdate* _internal_mutable_roomslistupdate();
  public:
  void unsafe_arena_set_allocated_roomslistupdate(
      ::RoomsListUpdate* roomslistupdate);
  ::RoomsListUpdate* unsafe_arena_release_roomslistupdate();

  // .SubscribeRoom subscribeRoom = 3;
  bool has_subscriberoom() const;
  private:
  bool _internal_has_subscriberoom() const;
  public:
  void clear_subscriberoom();
  const ::SubscribeRoom& subscriberoom() const;
  ::SubscribeRoom* release_subscriberoom();
  ::SubscribeRoom* mutable_subscriberoom();
  void set_allocated_subscriberoom(::SubscribeRoom* subscriberoom);
  private:
  const ::SubscribeRoom& _internal_subscriberoom() const;
  ::SubscribeRoom* _internal_mutable_subscriberoom();
  public:
  void unsafe_arena_set_allocated_subscriberoom(
      ::SubscribeRoom* subscriberoom);
  ::SubscribeRoom* unsafe_arena_release_subscriberoom();

  // .RoomUpdate roomUpdate = 4;
  bool has_roomupdate() const;
  private:
  bool _internal_has_roomupdate() const;
  public:
  void clear_roomupdate();
  const ::RoomUpdate& roomupdate() const;
  ::RoomUpdate* release_roomupdate();
  ::RoomUpdate* mutable_roomupdate();
  void set_allocated_roomupdate(::RoomUpdate* roomupdate);
  private:
  const ::RoomUpdate& _internal_roomupdate() const;
  ::RoomUpdate* _internal_mutable_roomupdate();
  public:
  void unsafe_arena_set_allocated_roomupdate(
      ::RoomUpdate* roomupdate);
  ::RoomUpdate* unsafe_arena_release_roomupdate();

  // bool startGame = 5;
  void clear_startgame();
  bool startgame() const;
  void set_startgame(bool value);
  private:
  bool _internal_startgame() const;
  void _internal_set_startgame(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::CreateRoom* createroom_;
  ::RoomsListUpdate* roomslistupdate_;
  ::SubscribeRoom* subscriberoom_;
  ::RoomUpdate* roomupdate_;
  bool startgame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameRoomModels_2eproto;
};
// -------------------------------------------------------------------

class CreateRoom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateRoom) */ {
 public:
  inline CreateRoom() : CreateRoom(nullptr) {};
  virtual ~CreateRoom();

  CreateRoom(const CreateRoom& from);
  CreateRoom(CreateRoom&& from) noexcept
    : CreateRoom() {
    *this = ::std::move(from);
  }

  inline CreateRoom& operator=(const CreateRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoom& operator=(CreateRoom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoom* internal_default_instance() {
    return reinterpret_cast<const CreateRoom*>(
               &_CreateRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateRoom& a, CreateRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoom* New() const final {
    return CreateMaybeMessage<CreateRoom>(nullptr);
  }

  CreateRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoom& from);
  void MergeFrom(const CreateRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateRoom";
  }
  protected:
  explicit CreateRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameRoomModels_2eproto);
    return ::descriptor_table_GameRoomModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kMapNameFieldNumber = 2,
    kGameTimeFieldNumber = 3,
    kMaxPlayersFieldNumber = 4,
    kCreatorFieldNumber = 5,
  };
  // string roomName = 1;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomname(
      std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // string mapName = 2;
  void clear_mapname();
  const std::string& mapname() const;
  void set_mapname(const std::string& value);
  void set_mapname(std::string&& value);
  void set_mapname(const char* value);
  void set_mapname(const char* value, size_t size);
  std::string* mutable_mapname();
  std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mapname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mapname(
      std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // string gameTime = 3;
  void clear_gametime();
  const std::string& gametime() const;
  void set_gametime(const std::string& value);
  void set_gametime(std::string&& value);
  void set_gametime(const char* value);
  void set_gametime(const char* value, size_t size);
  std::string* mutable_gametime();
  std::string* release_gametime();
  void set_allocated_gametime(std::string* gametime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gametime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gametime(
      std::string* gametime);
  private:
  const std::string& _internal_gametime() const;
  void _internal_set_gametime(const std::string& value);
  std::string* _internal_mutable_gametime();
  public:

  // string maxPlayers = 4;
  void clear_maxplayers();
  const std::string& maxplayers() const;
  void set_maxplayers(const std::string& value);
  void set_maxplayers(std::string&& value);
  void set_maxplayers(const char* value);
  void set_maxplayers(const char* value, size_t size);
  std::string* mutable_maxplayers();
  std::string* release_maxplayers();
  void set_allocated_maxplayers(std::string* maxplayers);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_maxplayers();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_maxplayers(
      std::string* maxplayers);
  private:
  const std::string& _internal_maxplayers() const;
  void _internal_set_maxplayers(const std::string& value);
  std::string* _internal_mutable_maxplayers();
  public:

  // string creator = 5;
  void clear_creator();
  const std::string& creator() const;
  void set_creator(const std::string& value);
  void set_creator(std::string&& value);
  void set_creator(const char* value);
  void set_creator(const char* value, size_t size);
  std::string* mutable_creator();
  std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_creator();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_creator(
      std::string* creator);
  private:
  const std::string& _internal_creator() const;
  void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // @@protoc_insertion_point(class_scope:CreateRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gametime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxplayers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameRoomModels_2eproto;
};
// -------------------------------------------------------------------

class RoomsListUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomsListUpdate) */ {
 public:
  inline RoomsListUpdate() : RoomsListUpdate(nullptr) {};
  virtual ~RoomsListUpdate();

  RoomsListUpdate(const RoomsListUpdate& from);
  RoomsListUpdate(RoomsListUpdate&& from) noexcept
    : RoomsListUpdate() {
    *this = ::std::move(from);
  }

  inline RoomsListUpdate& operator=(const RoomsListUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomsListUpdate& operator=(RoomsListUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomsListUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomsListUpdate* internal_default_instance() {
    return reinterpret_cast<const RoomsListUpdate*>(
               &_RoomsListUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoomsListUpdate& a, RoomsListUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomsListUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomsListUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomsListUpdate* New() const final {
    return CreateMaybeMessage<RoomsListUpdate>(nullptr);
  }

  RoomsListUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomsListUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomsListUpdate& from);
  void MergeFrom(const RoomsListUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomsListUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomsListUpdate";
  }
  protected:
  explicit RoomsListUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameRoomModels_2eproto);
    return ::descriptor_table_GameRoomModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 3,
    kRoomOwnerFieldNumber = 4,
    kDeleteRoomFieldNumber = 1,
    kAddRoomFieldNumber = 2,
  };
  // string roomName = 3;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomname(
      std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // string roomOwner = 4;
  void clear_roomowner();
  const std::string& roomowner() const;
  void set_roomowner(const std::string& value);
  void set_roomowner(std::string&& value);
  void set_roomowner(const char* value);
  void set_roomowner(const char* value, size_t size);
  std::string* mutable_roomowner();
  std::string* release_roomowner();
  void set_allocated_roomowner(std::string* roomowner);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomowner();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomowner(
      std::string* roomowner);
  private:
  const std::string& _internal_roomowner() const;
  void _internal_set_roomowner(const std::string& value);
  std::string* _internal_mutable_roomowner();
  public:

  // bool deleteRoom = 1;
  void clear_deleteroom();
  bool deleteroom() const;
  void set_deleteroom(bool value);
  private:
  bool _internal_deleteroom() const;
  void _internal_set_deleteroom(bool value);
  public:

  // bool addRoom = 2;
  void clear_addroom();
  bool addroom() const;
  void set_addroom(bool value);
  private:
  bool _internal_addroom() const;
  void _internal_set_addroom(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RoomsListUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomowner_;
  bool deleteroom_;
  bool addroom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameRoomModels_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRoom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubscribeRoom) */ {
 public:
  inline SubscribeRoom() : SubscribeRoom(nullptr) {};
  virtual ~SubscribeRoom();

  SubscribeRoom(const SubscribeRoom& from);
  SubscribeRoom(SubscribeRoom&& from) noexcept
    : SubscribeRoom() {
    *this = ::std::move(from);
  }

  inline SubscribeRoom& operator=(const SubscribeRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRoom& operator=(SubscribeRoom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeRoom& default_instance();

  enum V1Case {
    kSubscribe = 1,
    V1_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRoom* internal_default_instance() {
    return reinterpret_cast<const SubscribeRoom*>(
               &_SubscribeRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubscribeRoom& a, SubscribeRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRoom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRoom* New() const final {
    return CreateMaybeMessage<SubscribeRoom>(nullptr);
  }

  SubscribeRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeRoom& from);
  void MergeFrom(const SubscribeRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubscribeRoom";
  }
  protected:
  explicit SubscribeRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameRoomModels_2eproto);
    return ::descriptor_table_GameRoomModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 2,
    kPlayerFieldNumber = 5,
    kTeamFieldNumber = 6,
    kRoomDescribeFieldNumber = 4,
    kStateCodeFieldNumber = 3,
    kSubscribeFieldNumber = 1,
  };
  // string roomName = 2;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomname(
      std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // string player = 5;
  void clear_player();
  const std::string& player() const;
  void set_player(const std::string& value);
  void set_player(std::string&& value);
  void set_player(const char* value);
  void set_player(const char* value, size_t size);
  std::string* mutable_player();
  std::string* release_player();
  void set_allocated_player(std::string* player);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_player();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_player(
      std::string* player);
  private:
  const std::string& _internal_player() const;
  void _internal_set_player(const std::string& value);
  std::string* _internal_mutable_player();
  public:

  // string team = 6;
  void clear_team();
  const std::string& team() const;
  void set_team(const std::string& value);
  void set_team(std::string&& value);
  void set_team(const char* value);
  void set_team(const char* value, size_t size);
  std::string* mutable_team();
  std::string* release_team();
  void set_allocated_team(std::string* team);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_team();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_team(
      std::string* team);
  private:
  const std::string& _internal_team() const;
  void _internal_set_team(const std::string& value);
  std::string* _internal_mutable_team();
  public:

  // .RoomDescribe roomDescribe = 4;
  bool has_roomdescribe() const;
  private:
  bool _internal_has_roomdescribe() const;
  public:
  void clear_roomdescribe();
  const ::RoomDescribe& roomdescribe() const;
  ::RoomDescribe* release_roomdescribe();
  ::RoomDescribe* mutable_roomdescribe();
  void set_allocated_roomdescribe(::RoomDescribe* roomdescribe);
  private:
  const ::RoomDescribe& _internal_roomdescribe() const;
  ::RoomDescribe* _internal_mutable_roomdescribe();
  public:
  void unsafe_arena_set_allocated_roomdescribe(
      ::RoomDescribe* roomdescribe);
  ::RoomDescribe* unsafe_arena_release_roomdescribe();

  // int32 stateCode = 3;
  void clear_statecode();
  ::PROTOBUF_NAMESPACE_ID::int32 statecode() const;
  void set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_statecode() const;
  void _internal_set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool subscribe = 1;
  private:
  bool _internal_has_subscribe() const;
  public:
  void clear_subscribe();
  bool subscribe() const;
  void set_subscribe(bool value);
  private:
  bool _internal_subscribe() const;
  void _internal_set_subscribe(bool value);
  public:

  void clear_v1();
  V1Case v1_case() const;
  // @@protoc_insertion_point(class_scope:SubscribeRoom)
 private:
  class _Internal;
  void set_has_subscribe();

  inline bool has_v1() const;
  inline void clear_has_v1();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_;
  ::RoomDescribe* roomdescribe_;
  ::PROTOBUF_NAMESPACE_ID::int32 statecode_;
  union V1Union {
    V1Union() {}
    bool subscribe_;
  } v1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_GameRoomModels_2eproto;
};
// -------------------------------------------------------------------

class RoomDescribe PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomDescribe) */ {
 public:
  inline RoomDescribe() : RoomDescribe(nullptr) {};
  virtual ~RoomDescribe();

  RoomDescribe(const RoomDescribe& from);
  RoomDescribe(RoomDescribe&& from) noexcept
    : RoomDescribe() {
    *this = ::std::move(from);
  }

  inline RoomDescribe& operator=(const RoomDescribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomDescribe& operator=(RoomDescribe&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomDescribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomDescribe* internal_default_instance() {
    return reinterpret_cast<const RoomDescribe*>(
               &_RoomDescribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoomDescribe& a, RoomDescribe& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomDescribe* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomDescribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomDescribe* New() const final {
    return CreateMaybeMessage<RoomDescribe>(nullptr);
  }

  RoomDescribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomDescribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomDescribe& from);
  void MergeFrom(const RoomDescribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomDescribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomDescribe";
  }
  protected:
  explicit RoomDescribe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameRoomModels_2eproto);
    return ::descriptor_table_GameRoomModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeam1FieldNumber = 1,
    kTeam2FieldNumber = 2,
    kUndistributedFieldNumber = 3,
    kRoomNameFieldNumber = 4,
    kMapNameFieldNumber = 5,
    kGameTimeFieldNumber = 6,
    kMaxPlayersFieldNumber = 7,
    kCreatorFieldNumber = 8,
    kChatFieldNumber = 9,
  };
  // repeated .TeamPlayer team1 = 1;
  int team1_size() const;
  private:
  int _internal_team1_size() const;
  public:
  void clear_team1();
  ::TeamPlayer* mutable_team1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >*
      mutable_team1();
  private:
  const ::TeamPlayer& _internal_team1(int index) const;
  ::TeamPlayer* _internal_add_team1();
  public:
  const ::TeamPlayer& team1(int index) const;
  ::TeamPlayer* add_team1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >&
      team1() const;

  // repeated .TeamPlayer team2 = 2;
  int team2_size() const;
  private:
  int _internal_team2_size() const;
  public:
  void clear_team2();
  ::TeamPlayer* mutable_team2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >*
      mutable_team2();
  private:
  const ::TeamPlayer& _internal_team2(int index) const;
  ::TeamPlayer* _internal_add_team2();
  public:
  const ::TeamPlayer& team2(int index) const;
  ::TeamPlayer* add_team2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >&
      team2() const;

  // repeated .TeamPlayer undistributed = 3;
  int undistributed_size() const;
  private:
  int _internal_undistributed_size() const;
  public:
  void clear_undistributed();
  ::TeamPlayer* mutable_undistributed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >*
      mutable_undistributed();
  private:
  const ::TeamPlayer& _internal_undistributed(int index) const;
  ::TeamPlayer* _internal_add_undistributed();
  public:
  const ::TeamPlayer& undistributed(int index) const;
  ::TeamPlayer* add_undistributed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >&
      undistributed() const;

  // string roomName = 4;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomname(
      std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // string mapName = 5;
  void clear_mapname();
  const std::string& mapname() const;
  void set_mapname(const std::string& value);
  void set_mapname(std::string&& value);
  void set_mapname(const char* value);
  void set_mapname(const char* value, size_t size);
  std::string* mutable_mapname();
  std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mapname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mapname(
      std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // string gameTime = 6;
  void clear_gametime();
  const std::string& gametime() const;
  void set_gametime(const std::string& value);
  void set_gametime(std::string&& value);
  void set_gametime(const char* value);
  void set_gametime(const char* value, size_t size);
  std::string* mutable_gametime();
  std::string* release_gametime();
  void set_allocated_gametime(std::string* gametime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gametime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gametime(
      std::string* gametime);
  private:
  const std::string& _internal_gametime() const;
  void _internal_set_gametime(const std::string& value);
  std::string* _internal_mutable_gametime();
  public:

  // string maxPlayers = 7;
  void clear_maxplayers();
  const std::string& maxplayers() const;
  void set_maxplayers(const std::string& value);
  void set_maxplayers(std::string&& value);
  void set_maxplayers(const char* value);
  void set_maxplayers(const char* value, size_t size);
  std::string* mutable_maxplayers();
  std::string* release_maxplayers();
  void set_allocated_maxplayers(std::string* maxplayers);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_maxplayers();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_maxplayers(
      std::string* maxplayers);
  private:
  const std::string& _internal_maxplayers() const;
  void _internal_set_maxplayers(const std::string& value);
  std::string* _internal_mutable_maxplayers();
  public:

  // string creator = 8;
  void clear_creator();
  const std::string& creator() const;
  void set_creator(const std::string& value);
  void set_creator(std::string&& value);
  void set_creator(const char* value);
  void set_creator(const char* value, size_t size);
  std::string* mutable_creator();
  std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_creator();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_creator(
      std::string* creator);
  private:
  const std::string& _internal_creator() const;
  void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // .Chat chat = 9;
  bool has_chat() const;
  private:
  bool _internal_has_chat() const;
  public:
  void clear_chat();
  const ::Chat& chat() const;
  ::Chat* release_chat();
  ::Chat* mutable_chat();
  void set_allocated_chat(::Chat* chat);
  private:
  const ::Chat& _internal_chat() const;
  ::Chat* _internal_mutable_chat();
  public:
  void unsafe_arena_set_allocated_chat(
      ::Chat* chat);
  ::Chat* unsafe_arena_release_chat();

  // @@protoc_insertion_point(class_scope:RoomDescribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer > team1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer > team2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer > undistributed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gametime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxplayers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
  ::Chat* chat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameRoomModels_2eproto;
};
// -------------------------------------------------------------------

class TeamPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeamPlayer) */ {
 public:
  inline TeamPlayer() : TeamPlayer(nullptr) {};
  virtual ~TeamPlayer();

  TeamPlayer(const TeamPlayer& from);
  TeamPlayer(TeamPlayer&& from) noexcept
    : TeamPlayer() {
    *this = ::std::move(from);
  }

  inline TeamPlayer& operator=(const TeamPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamPlayer& operator=(TeamPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamPlayer* internal_default_instance() {
    return reinterpret_cast<const TeamPlayer*>(
               &_TeamPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TeamPlayer& a, TeamPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamPlayer* New() const final {
    return CreateMaybeMessage<TeamPlayer>(nullptr);
  }

  TeamPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamPlayer& from);
  void MergeFrom(const TeamPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeamPlayer";
  }
  protected:
  explicit TeamPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameRoomModels_2eproto);
    return ::descriptor_table_GameRoomModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
  };
  // string player_name = 1;
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_player_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_player_name(
      std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // @@protoc_insertion_point(class_scope:TeamPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameRoomModels_2eproto;
};
// -------------------------------------------------------------------

class RoomUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomUpdate) */ {
 public:
  inline RoomUpdate() : RoomUpdate(nullptr) {};
  virtual ~RoomUpdate();

  RoomUpdate(const RoomUpdate& from);
  RoomUpdate(RoomUpdate&& from) noexcept
    : RoomUpdate() {
    *this = ::std::move(from);
  }

  inline RoomUpdate& operator=(const RoomUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomUpdate& operator=(RoomUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomUpdate* internal_default_instance() {
    return reinterpret_cast<const RoomUpdate*>(
               &_RoomUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoomUpdate& a, RoomUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomUpdate* New() const final {
    return CreateMaybeMessage<RoomUpdate>(nullptr);
  }

  RoomUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomUpdate& from);
  void MergeFrom(const RoomUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomUpdate";
  }
  protected:
  explicit RoomUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameRoomModels_2eproto);
    return ::descriptor_table_GameRoomModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetTeamFieldNumber = 2,
    kRoomNameFieldNumber = 3,
    kRoomDescribeFieldNumber = 1,
  };
  // string targetTeam = 2;
  void clear_targetteam();
  const std::string& targetteam() const;
  void set_targetteam(const std::string& value);
  void set_targetteam(std::string&& value);
  void set_targetteam(const char* value);
  void set_targetteam(const char* value, size_t size);
  std::string* mutable_targetteam();
  std::string* release_targetteam();
  void set_allocated_targetteam(std::string* targetteam);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_targetteam();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_targetteam(
      std::string* targetteam);
  private:
  const std::string& _internal_targetteam() const;
  void _internal_set_targetteam(const std::string& value);
  std::string* _internal_mutable_targetteam();
  public:

  // string roomName = 3;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomname(
      std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // .RoomDescribe roomDescribe = 1;
  bool has_roomdescribe() const;
  private:
  bool _internal_has_roomdescribe() const;
  public:
  void clear_roomdescribe();
  const ::RoomDescribe& roomdescribe() const;
  ::RoomDescribe* release_roomdescribe();
  ::RoomDescribe* mutable_roomdescribe();
  void set_allocated_roomdescribe(::RoomDescribe* roomdescribe);
  private:
  const ::RoomDescribe& _internal_roomdescribe() const;
  ::RoomDescribe* _internal_mutable_roomdescribe();
  public:
  void unsafe_arena_set_allocated_roomdescribe(
      ::RoomDescribe* roomdescribe);
  ::RoomDescribe* unsafe_arena_release_roomdescribe();

  // @@protoc_insertion_point(class_scope:RoomUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetteam_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::RoomDescribe* roomdescribe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameRoomModels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Room

// .CreateRoom createRoom = 1;
inline bool Room::_internal_has_createroom() const {
  return this != internal_default_instance() && createroom_ != nullptr;
}
inline bool Room::has_createroom() const {
  return _internal_has_createroom();
}
inline void Room::clear_createroom() {
  if (GetArena() == nullptr && createroom_ != nullptr) {
    delete createroom_;
  }
  createroom_ = nullptr;
}
inline const ::CreateRoom& Room::_internal_createroom() const {
  const ::CreateRoom* p = createroom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CreateRoom*>(
      &::_CreateRoom_default_instance_);
}
inline const ::CreateRoom& Room::createroom() const {
  // @@protoc_insertion_point(field_get:Room.createRoom)
  return _internal_createroom();
}
inline void Room::unsafe_arena_set_allocated_createroom(
    ::CreateRoom* createroom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createroom_);
  }
  createroom_ = createroom;
  if (createroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Room.createRoom)
}
inline ::CreateRoom* Room::release_createroom() {
  auto temp = unsafe_arena_release_createroom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CreateRoom* Room::unsafe_arena_release_createroom() {
  // @@protoc_insertion_point(field_release:Room.createRoom)
  
  ::CreateRoom* temp = createroom_;
  createroom_ = nullptr;
  return temp;
}
inline ::CreateRoom* Room::_internal_mutable_createroom() {
  
  if (createroom_ == nullptr) {
    auto* p = CreateMaybeMessage<::CreateRoom>(GetArena());
    createroom_ = p;
  }
  return createroom_;
}
inline ::CreateRoom* Room::mutable_createroom() {
  // @@protoc_insertion_point(field_mutable:Room.createRoom)
  return _internal_mutable_createroom();
}
inline void Room::set_allocated_createroom(::CreateRoom* createroom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete createroom_;
  }
  if (createroom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(createroom);
    if (message_arena != submessage_arena) {
      createroom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createroom, submessage_arena);
    }
    
  } else {
    
  }
  createroom_ = createroom;
  // @@protoc_insertion_point(field_set_allocated:Room.createRoom)
}

// .RoomsListUpdate roomsListUpdate = 2;
inline bool Room::_internal_has_roomslistupdate() const {
  return this != internal_default_instance() && roomslistupdate_ != nullptr;
}
inline bool Room::has_roomslistupdate() const {
  return _internal_has_roomslistupdate();
}
inline void Room::clear_roomslistupdate() {
  if (GetArena() == nullptr && roomslistupdate_ != nullptr) {
    delete roomslistupdate_;
  }
  roomslistupdate_ = nullptr;
}
inline const ::RoomsListUpdate& Room::_internal_roomslistupdate() const {
  const ::RoomsListUpdate* p = roomslistupdate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoomsListUpdate*>(
      &::_RoomsListUpdate_default_instance_);
}
inline const ::RoomsListUpdate& Room::roomslistupdate() const {
  // @@protoc_insertion_point(field_get:Room.roomsListUpdate)
  return _internal_roomslistupdate();
}
inline void Room::unsafe_arena_set_allocated_roomslistupdate(
    ::RoomsListUpdate* roomslistupdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roomslistupdate_);
  }
  roomslistupdate_ = roomslistupdate;
  if (roomslistupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Room.roomsListUpdate)
}
inline ::RoomsListUpdate* Room::release_roomslistupdate() {
  auto temp = unsafe_arena_release_roomslistupdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoomsListUpdate* Room::unsafe_arena_release_roomslistupdate() {
  // @@protoc_insertion_point(field_release:Room.roomsListUpdate)
  
  ::RoomsListUpdate* temp = roomslistupdate_;
  roomslistupdate_ = nullptr;
  return temp;
}
inline ::RoomsListUpdate* Room::_internal_mutable_roomslistupdate() {
  
  if (roomslistupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoomsListUpdate>(GetArena());
    roomslistupdate_ = p;
  }
  return roomslistupdate_;
}
inline ::RoomsListUpdate* Room::mutable_roomslistupdate() {
  // @@protoc_insertion_point(field_mutable:Room.roomsListUpdate)
  return _internal_mutable_roomslistupdate();
}
inline void Room::set_allocated_roomslistupdate(::RoomsListUpdate* roomslistupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roomslistupdate_;
  }
  if (roomslistupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roomslistupdate);
    if (message_arena != submessage_arena) {
      roomslistupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomslistupdate, submessage_arena);
    }
    
  } else {
    
  }
  roomslistupdate_ = roomslistupdate;
  // @@protoc_insertion_point(field_set_allocated:Room.roomsListUpdate)
}

// .SubscribeRoom subscribeRoom = 3;
inline bool Room::_internal_has_subscriberoom() const {
  return this != internal_default_instance() && subscriberoom_ != nullptr;
}
inline bool Room::has_subscriberoom() const {
  return _internal_has_subscriberoom();
}
inline void Room::clear_subscriberoom() {
  if (GetArena() == nullptr && subscriberoom_ != nullptr) {
    delete subscriberoom_;
  }
  subscriberoom_ = nullptr;
}
inline const ::SubscribeRoom& Room::_internal_subscriberoom() const {
  const ::SubscribeRoom* p = subscriberoom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SubscribeRoom*>(
      &::_SubscribeRoom_default_instance_);
}
inline const ::SubscribeRoom& Room::subscriberoom() const {
  // @@protoc_insertion_point(field_get:Room.subscribeRoom)
  return _internal_subscriberoom();
}
inline void Room::unsafe_arena_set_allocated_subscriberoom(
    ::SubscribeRoom* subscriberoom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscriberoom_);
  }
  subscriberoom_ = subscriberoom;
  if (subscriberoom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Room.subscribeRoom)
}
inline ::SubscribeRoom* Room::release_subscriberoom() {
  auto temp = unsafe_arena_release_subscriberoom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SubscribeRoom* Room::unsafe_arena_release_subscriberoom() {
  // @@protoc_insertion_point(field_release:Room.subscribeRoom)
  
  ::SubscribeRoom* temp = subscriberoom_;
  subscriberoom_ = nullptr;
  return temp;
}
inline ::SubscribeRoom* Room::_internal_mutable_subscriberoom() {
  
  if (subscriberoom_ == nullptr) {
    auto* p = CreateMaybeMessage<::SubscribeRoom>(GetArena());
    subscriberoom_ = p;
  }
  return subscriberoom_;
}
inline ::SubscribeRoom* Room::mutable_subscriberoom() {
  // @@protoc_insertion_point(field_mutable:Room.subscribeRoom)
  return _internal_mutable_subscriberoom();
}
inline void Room::set_allocated_subscriberoom(::SubscribeRoom* subscriberoom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete subscriberoom_;
  }
  if (subscriberoom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subscriberoom);
    if (message_arena != submessage_arena) {
      subscriberoom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscriberoom, submessage_arena);
    }
    
  } else {
    
  }
  subscriberoom_ = subscriberoom;
  // @@protoc_insertion_point(field_set_allocated:Room.subscribeRoom)
}

// .RoomUpdate roomUpdate = 4;
inline bool Room::_internal_has_roomupdate() const {
  return this != internal_default_instance() && roomupdate_ != nullptr;
}
inline bool Room::has_roomupdate() const {
  return _internal_has_roomupdate();
}
inline void Room::clear_roomupdate() {
  if (GetArena() == nullptr && roomupdate_ != nullptr) {
    delete roomupdate_;
  }
  roomupdate_ = nullptr;
}
inline const ::RoomUpdate& Room::_internal_roomupdate() const {
  const ::RoomUpdate* p = roomupdate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoomUpdate*>(
      &::_RoomUpdate_default_instance_);
}
inline const ::RoomUpdate& Room::roomupdate() const {
  // @@protoc_insertion_point(field_get:Room.roomUpdate)
  return _internal_roomupdate();
}
inline void Room::unsafe_arena_set_allocated_roomupdate(
    ::RoomUpdate* roomupdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roomupdate_);
  }
  roomupdate_ = roomupdate;
  if (roomupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Room.roomUpdate)
}
inline ::RoomUpdate* Room::release_roomupdate() {
  auto temp = unsafe_arena_release_roomupdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoomUpdate* Room::unsafe_arena_release_roomupdate() {
  // @@protoc_insertion_point(field_release:Room.roomUpdate)
  
  ::RoomUpdate* temp = roomupdate_;
  roomupdate_ = nullptr;
  return temp;
}
inline ::RoomUpdate* Room::_internal_mutable_roomupdate() {
  
  if (roomupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoomUpdate>(GetArena());
    roomupdate_ = p;
  }
  return roomupdate_;
}
inline ::RoomUpdate* Room::mutable_roomupdate() {
  // @@protoc_insertion_point(field_mutable:Room.roomUpdate)
  return _internal_mutable_roomupdate();
}
inline void Room::set_allocated_roomupdate(::RoomUpdate* roomupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roomupdate_;
  }
  if (roomupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roomupdate);
    if (message_arena != submessage_arena) {
      roomupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomupdate, submessage_arena);
    }
    
  } else {
    
  }
  roomupdate_ = roomupdate;
  // @@protoc_insertion_point(field_set_allocated:Room.roomUpdate)
}

// bool startGame = 5;
inline void Room::clear_startgame() {
  startgame_ = false;
}
inline bool Room::_internal_startgame() const {
  return startgame_;
}
inline bool Room::startgame() const {
  // @@protoc_insertion_point(field_get:Room.startGame)
  return _internal_startgame();
}
inline void Room::_internal_set_startgame(bool value) {
  
  startgame_ = value;
}
inline void Room::set_startgame(bool value) {
  _internal_set_startgame(value);
  // @@protoc_insertion_point(field_set:Room.startGame)
}

// string roomName = 6;
inline void Room::clear_roomname() {
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Room::roomname() const {
  // @@protoc_insertion_point(field_get:Room.roomName)
  return _internal_roomname();
}
inline void Room::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:Room.roomName)
}
inline std::string* Room::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:Room.roomName)
  return _internal_mutable_roomname();
}
inline const std::string& Room::_internal_roomname() const {
  return roomname_.Get();
}
inline void Room::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Room::set_roomname(std::string&& value) {
  
  roomname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Room.roomName)
}
inline void Room::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Room.roomName)
}
inline void Room::set_roomname(const char* value,
    size_t size) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Room.roomName)
}
inline std::string* Room::_internal_mutable_roomname() {
  
  return roomname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Room::release_roomname() {
  // @@protoc_insertion_point(field_release:Room.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Room::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Room.roomName)
}
inline std::string* Room::unsafe_arena_release_roomname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Room.roomName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Room::unsafe_arena_set_allocated_roomname(
    std::string* roomname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Room.roomName)
}

// -------------------------------------------------------------------

// CreateRoom

// string roomName = 1;
inline void CreateRoom::clear_roomname() {
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRoom::roomname() const {
  // @@protoc_insertion_point(field_get:CreateRoom.roomName)
  return _internal_roomname();
}
inline void CreateRoom::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:CreateRoom.roomName)
}
inline std::string* CreateRoom::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:CreateRoom.roomName)
  return _internal_mutable_roomname();
}
inline const std::string& CreateRoom::_internal_roomname() const {
  return roomname_.Get();
}
inline void CreateRoom::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRoom::set_roomname(std::string&& value) {
  
  roomname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CreateRoom.roomName)
}
inline void CreateRoom::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CreateRoom.roomName)
}
inline void CreateRoom::set_roomname(const char* value,
    size_t size) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CreateRoom.roomName)
}
inline std::string* CreateRoom::_internal_mutable_roomname() {
  
  return roomname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRoom::release_roomname() {
  // @@protoc_insertion_point(field_release:CreateRoom.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRoom::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CreateRoom.roomName)
}
inline std::string* CreateRoom::unsafe_arena_release_roomname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CreateRoom.roomName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRoom::unsafe_arena_set_allocated_roomname(
    std::string* roomname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CreateRoom.roomName)
}

// string mapName = 2;
inline void CreateRoom::clear_mapname() {
  mapname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRoom::mapname() const {
  // @@protoc_insertion_point(field_get:CreateRoom.mapName)
  return _internal_mapname();
}
inline void CreateRoom::set_mapname(const std::string& value) {
  _internal_set_mapname(value);
  // @@protoc_insertion_point(field_set:CreateRoom.mapName)
}
inline std::string* CreateRoom::mutable_mapname() {
  // @@protoc_insertion_point(field_mutable:CreateRoom.mapName)
  return _internal_mutable_mapname();
}
inline const std::string& CreateRoom::_internal_mapname() const {
  return mapname_.Get();
}
inline void CreateRoom::_internal_set_mapname(const std::string& value) {
  
  mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRoom::set_mapname(std::string&& value) {
  
  mapname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CreateRoom.mapName)
}
inline void CreateRoom::set_mapname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CreateRoom.mapName)
}
inline void CreateRoom::set_mapname(const char* value,
    size_t size) {
  
  mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CreateRoom.mapName)
}
inline std::string* CreateRoom::_internal_mutable_mapname() {
  
  return mapname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRoom::release_mapname() {
  // @@protoc_insertion_point(field_release:CreateRoom.mapName)
  return mapname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRoom::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  mapname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CreateRoom.mapName)
}
inline std::string* CreateRoom::unsafe_arena_release_mapname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CreateRoom.mapName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mapname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRoom::unsafe_arena_set_allocated_mapname(
    std::string* mapname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mapname != nullptr) {
    
  } else {
    
  }
  mapname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mapname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CreateRoom.mapName)
}

// string gameTime = 3;
inline void CreateRoom::clear_gametime() {
  gametime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRoom::gametime() const {
  // @@protoc_insertion_point(field_get:CreateRoom.gameTime)
  return _internal_gametime();
}
inline void CreateRoom::set_gametime(const std::string& value) {
  _internal_set_gametime(value);
  // @@protoc_insertion_point(field_set:CreateRoom.gameTime)
}
inline std::string* CreateRoom::mutable_gametime() {
  // @@protoc_insertion_point(field_mutable:CreateRoom.gameTime)
  return _internal_mutable_gametime();
}
inline const std::string& CreateRoom::_internal_gametime() const {
  return gametime_.Get();
}
inline void CreateRoom::_internal_set_gametime(const std::string& value) {
  
  gametime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRoom::set_gametime(std::string&& value) {
  
  gametime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CreateRoom.gameTime)
}
inline void CreateRoom::set_gametime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gametime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CreateRoom.gameTime)
}
inline void CreateRoom::set_gametime(const char* value,
    size_t size) {
  
  gametime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CreateRoom.gameTime)
}
inline std::string* CreateRoom::_internal_mutable_gametime() {
  
  return gametime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRoom::release_gametime() {
  // @@protoc_insertion_point(field_release:CreateRoom.gameTime)
  return gametime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRoom::set_allocated_gametime(std::string* gametime) {
  if (gametime != nullptr) {
    
  } else {
    
  }
  gametime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gametime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CreateRoom.gameTime)
}
inline std::string* CreateRoom::unsafe_arena_release_gametime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CreateRoom.gameTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gametime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRoom::unsafe_arena_set_allocated_gametime(
    std::string* gametime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gametime != nullptr) {
    
  } else {
    
  }
  gametime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gametime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CreateRoom.gameTime)
}

// string maxPlayers = 4;
inline void CreateRoom::clear_maxplayers() {
  maxplayers_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRoom::maxplayers() const {
  // @@protoc_insertion_point(field_get:CreateRoom.maxPlayers)
  return _internal_maxplayers();
}
inline void CreateRoom::set_maxplayers(const std::string& value) {
  _internal_set_maxplayers(value);
  // @@protoc_insertion_point(field_set:CreateRoom.maxPlayers)
}
inline std::string* CreateRoom::mutable_maxplayers() {
  // @@protoc_insertion_point(field_mutable:CreateRoom.maxPlayers)
  return _internal_mutable_maxplayers();
}
inline const std::string& CreateRoom::_internal_maxplayers() const {
  return maxplayers_.Get();
}
inline void CreateRoom::_internal_set_maxplayers(const std::string& value) {
  
  maxplayers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRoom::set_maxplayers(std::string&& value) {
  
  maxplayers_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CreateRoom.maxPlayers)
}
inline void CreateRoom::set_maxplayers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maxplayers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CreateRoom.maxPlayers)
}
inline void CreateRoom::set_maxplayers(const char* value,
    size_t size) {
  
  maxplayers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CreateRoom.maxPlayers)
}
inline std::string* CreateRoom::_internal_mutable_maxplayers() {
  
  return maxplayers_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRoom::release_maxplayers() {
  // @@protoc_insertion_point(field_release:CreateRoom.maxPlayers)
  return maxplayers_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRoom::set_allocated_maxplayers(std::string* maxplayers) {
  if (maxplayers != nullptr) {
    
  } else {
    
  }
  maxplayers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maxplayers,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CreateRoom.maxPlayers)
}
inline std::string* CreateRoom::unsafe_arena_release_maxplayers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CreateRoom.maxPlayers)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return maxplayers_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRoom::unsafe_arena_set_allocated_maxplayers(
    std::string* maxplayers) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (maxplayers != nullptr) {
    
  } else {
    
  }
  maxplayers_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      maxplayers, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CreateRoom.maxPlayers)
}

// string creator = 5;
inline void CreateRoom::clear_creator() {
  creator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRoom::creator() const {
  // @@protoc_insertion_point(field_get:CreateRoom.creator)
  return _internal_creator();
}
inline void CreateRoom::set_creator(const std::string& value) {
  _internal_set_creator(value);
  // @@protoc_insertion_point(field_set:CreateRoom.creator)
}
inline std::string* CreateRoom::mutable_creator() {
  // @@protoc_insertion_point(field_mutable:CreateRoom.creator)
  return _internal_mutable_creator();
}
inline const std::string& CreateRoom::_internal_creator() const {
  return creator_.Get();
}
inline void CreateRoom::_internal_set_creator(const std::string& value) {
  
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRoom::set_creator(std::string&& value) {
  
  creator_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CreateRoom.creator)
}
inline void CreateRoom::set_creator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CreateRoom.creator)
}
inline void CreateRoom::set_creator(const char* value,
    size_t size) {
  
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CreateRoom.creator)
}
inline std::string* CreateRoom::_internal_mutable_creator() {
  
  return creator_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRoom::release_creator() {
  // @@protoc_insertion_point(field_release:CreateRoom.creator)
  return creator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRoom::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  creator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CreateRoom.creator)
}
inline std::string* CreateRoom::unsafe_arena_release_creator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CreateRoom.creator)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return creator_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRoom::unsafe_arena_set_allocated_creator(
    std::string* creator) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (creator != nullptr) {
    
  } else {
    
  }
  creator_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      creator, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CreateRoom.creator)
}

// -------------------------------------------------------------------

// RoomsListUpdate

// bool deleteRoom = 1;
inline void RoomsListUpdate::clear_deleteroom() {
  deleteroom_ = false;
}
inline bool RoomsListUpdate::_internal_deleteroom() const {
  return deleteroom_;
}
inline bool RoomsListUpdate::deleteroom() const {
  // @@protoc_insertion_point(field_get:RoomsListUpdate.deleteRoom)
  return _internal_deleteroom();
}
inline void RoomsListUpdate::_internal_set_deleteroom(bool value) {
  
  deleteroom_ = value;
}
inline void RoomsListUpdate::set_deleteroom(bool value) {
  _internal_set_deleteroom(value);
  // @@protoc_insertion_point(field_set:RoomsListUpdate.deleteRoom)
}

// bool addRoom = 2;
inline void RoomsListUpdate::clear_addroom() {
  addroom_ = false;
}
inline bool RoomsListUpdate::_internal_addroom() const {
  return addroom_;
}
inline bool RoomsListUpdate::addroom() const {
  // @@protoc_insertion_point(field_get:RoomsListUpdate.addRoom)
  return _internal_addroom();
}
inline void RoomsListUpdate::_internal_set_addroom(bool value) {
  
  addroom_ = value;
}
inline void RoomsListUpdate::set_addroom(bool value) {
  _internal_set_addroom(value);
  // @@protoc_insertion_point(field_set:RoomsListUpdate.addRoom)
}

// string roomName = 3;
inline void RoomsListUpdate::clear_roomname() {
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomsListUpdate::roomname() const {
  // @@protoc_insertion_point(field_get:RoomsListUpdate.roomName)
  return _internal_roomname();
}
inline void RoomsListUpdate::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:RoomsListUpdate.roomName)
}
inline std::string* RoomsListUpdate::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:RoomsListUpdate.roomName)
  return _internal_mutable_roomname();
}
inline const std::string& RoomsListUpdate::_internal_roomname() const {
  return roomname_.Get();
}
inline void RoomsListUpdate::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomsListUpdate::set_roomname(std::string&& value) {
  
  roomname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomsListUpdate.roomName)
}
inline void RoomsListUpdate::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoomsListUpdate.roomName)
}
inline void RoomsListUpdate::set_roomname(const char* value,
    size_t size) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomsListUpdate.roomName)
}
inline std::string* RoomsListUpdate::_internal_mutable_roomname() {
  
  return roomname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomsListUpdate::release_roomname() {
  // @@protoc_insertion_point(field_release:RoomsListUpdate.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomsListUpdate::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomsListUpdate.roomName)
}
inline std::string* RoomsListUpdate::unsafe_arena_release_roomname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoomsListUpdate.roomName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomsListUpdate::unsafe_arena_set_allocated_roomname(
    std::string* roomname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomsListUpdate.roomName)
}

// string roomOwner = 4;
inline void RoomsListUpdate::clear_roomowner() {
  roomowner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomsListUpdate::roomowner() const {
  // @@protoc_insertion_point(field_get:RoomsListUpdate.roomOwner)
  return _internal_roomowner();
}
inline void RoomsListUpdate::set_roomowner(const std::string& value) {
  _internal_set_roomowner(value);
  // @@protoc_insertion_point(field_set:RoomsListUpdate.roomOwner)
}
inline std::string* RoomsListUpdate::mutable_roomowner() {
  // @@protoc_insertion_point(field_mutable:RoomsListUpdate.roomOwner)
  return _internal_mutable_roomowner();
}
inline const std::string& RoomsListUpdate::_internal_roomowner() const {
  return roomowner_.Get();
}
inline void RoomsListUpdate::_internal_set_roomowner(const std::string& value) {
  
  roomowner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomsListUpdate::set_roomowner(std::string&& value) {
  
  roomowner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomsListUpdate.roomOwner)
}
inline void RoomsListUpdate::set_roomowner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomowner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoomsListUpdate.roomOwner)
}
inline void RoomsListUpdate::set_roomowner(const char* value,
    size_t size) {
  
  roomowner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomsListUpdate.roomOwner)
}
inline std::string* RoomsListUpdate::_internal_mutable_roomowner() {
  
  return roomowner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomsListUpdate::release_roomowner() {
  // @@protoc_insertion_point(field_release:RoomsListUpdate.roomOwner)
  return roomowner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomsListUpdate::set_allocated_roomowner(std::string* roomowner) {
  if (roomowner != nullptr) {
    
  } else {
    
  }
  roomowner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomowner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomsListUpdate.roomOwner)
}
inline std::string* RoomsListUpdate::unsafe_arena_release_roomowner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoomsListUpdate.roomOwner)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomowner_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomsListUpdate::unsafe_arena_set_allocated_roomowner(
    std::string* roomowner) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomowner != nullptr) {
    
  } else {
    
  }
  roomowner_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomowner, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomsListUpdate.roomOwner)
}

// -------------------------------------------------------------------

// SubscribeRoom

// bool subscribe = 1;
inline bool SubscribeRoom::_internal_has_subscribe() const {
  return v1_case() == kSubscribe;
}
inline void SubscribeRoom::set_has_subscribe() {
  _oneof_case_[0] = kSubscribe;
}
inline void SubscribeRoom::clear_subscribe() {
  if (_internal_has_subscribe()) {
    v1_.subscribe_ = false;
    clear_has_v1();
  }
}
inline bool SubscribeRoom::_internal_subscribe() const {
  if (_internal_has_subscribe()) {
    return v1_.subscribe_;
  }
  return false;
}
inline void SubscribeRoom::_internal_set_subscribe(bool value) {
  if (!_internal_has_subscribe()) {
    clear_v1();
    set_has_subscribe();
  }
  v1_.subscribe_ = value;
}
inline bool SubscribeRoom::subscribe() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.subscribe)
  return _internal_subscribe();
}
inline void SubscribeRoom::set_subscribe(bool value) {
  _internal_set_subscribe(value);
  // @@protoc_insertion_point(field_set:SubscribeRoom.subscribe)
}

// string roomName = 2;
inline void SubscribeRoom::clear_roomname() {
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeRoom::roomname() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.roomName)
  return _internal_roomname();
}
inline void SubscribeRoom::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:SubscribeRoom.roomName)
}
inline std::string* SubscribeRoom::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:SubscribeRoom.roomName)
  return _internal_mutable_roomname();
}
inline const std::string& SubscribeRoom::_internal_roomname() const {
  return roomname_.Get();
}
inline void SubscribeRoom::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeRoom::set_roomname(std::string&& value) {
  
  roomname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubscribeRoom.roomName)
}
inline void SubscribeRoom::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubscribeRoom.roomName)
}
inline void SubscribeRoom::set_roomname(const char* value,
    size_t size) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubscribeRoom.roomName)
}
inline std::string* SubscribeRoom::_internal_mutable_roomname() {
  
  return roomname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeRoom::release_roomname() {
  // @@protoc_insertion_point(field_release:SubscribeRoom.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeRoom::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubscribeRoom.roomName)
}
inline std::string* SubscribeRoom::unsafe_arena_release_roomname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SubscribeRoom.roomName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeRoom::unsafe_arena_set_allocated_roomname(
    std::string* roomname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubscribeRoom.roomName)
}

// int32 stateCode = 3;
inline void SubscribeRoom::clear_statecode() {
  statecode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscribeRoom::_internal_statecode() const {
  return statecode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscribeRoom::statecode() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.stateCode)
  return _internal_statecode();
}
inline void SubscribeRoom::_internal_set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  statecode_ = value;
}
inline void SubscribeRoom::set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_statecode(value);
  // @@protoc_insertion_point(field_set:SubscribeRoom.stateCode)
}

// .RoomDescribe roomDescribe = 4;
inline bool SubscribeRoom::_internal_has_roomdescribe() const {
  return this != internal_default_instance() && roomdescribe_ != nullptr;
}
inline bool SubscribeRoom::has_roomdescribe() const {
  return _internal_has_roomdescribe();
}
inline void SubscribeRoom::clear_roomdescribe() {
  if (GetArena() == nullptr && roomdescribe_ != nullptr) {
    delete roomdescribe_;
  }
  roomdescribe_ = nullptr;
}
inline const ::RoomDescribe& SubscribeRoom::_internal_roomdescribe() const {
  const ::RoomDescribe* p = roomdescribe_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoomDescribe*>(
      &::_RoomDescribe_default_instance_);
}
inline const ::RoomDescribe& SubscribeRoom::roomdescribe() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.roomDescribe)
  return _internal_roomdescribe();
}
inline void SubscribeRoom::unsafe_arena_set_allocated_roomdescribe(
    ::RoomDescribe* roomdescribe) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roomdescribe_);
  }
  roomdescribe_ = roomdescribe;
  if (roomdescribe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubscribeRoom.roomDescribe)
}
inline ::RoomDescribe* SubscribeRoom::release_roomdescribe() {
  auto temp = unsafe_arena_release_roomdescribe();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoomDescribe* SubscribeRoom::unsafe_arena_release_roomdescribe() {
  // @@protoc_insertion_point(field_release:SubscribeRoom.roomDescribe)
  
  ::RoomDescribe* temp = roomdescribe_;
  roomdescribe_ = nullptr;
  return temp;
}
inline ::RoomDescribe* SubscribeRoom::_internal_mutable_roomdescribe() {
  
  if (roomdescribe_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoomDescribe>(GetArena());
    roomdescribe_ = p;
  }
  return roomdescribe_;
}
inline ::RoomDescribe* SubscribeRoom::mutable_roomdescribe() {
  // @@protoc_insertion_point(field_mutable:SubscribeRoom.roomDescribe)
  return _internal_mutable_roomdescribe();
}
inline void SubscribeRoom::set_allocated_roomdescribe(::RoomDescribe* roomdescribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roomdescribe_;
  }
  if (roomdescribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roomdescribe);
    if (message_arena != submessage_arena) {
      roomdescribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomdescribe, submessage_arena);
    }
    
  } else {
    
  }
  roomdescribe_ = roomdescribe;
  // @@protoc_insertion_point(field_set_allocated:SubscribeRoom.roomDescribe)
}

// string player = 5;
inline void SubscribeRoom::clear_player() {
  player_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeRoom::player() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.player)
  return _internal_player();
}
inline void SubscribeRoom::set_player(const std::string& value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:SubscribeRoom.player)
}
inline std::string* SubscribeRoom::mutable_player() {
  // @@protoc_insertion_point(field_mutable:SubscribeRoom.player)
  return _internal_mutable_player();
}
inline const std::string& SubscribeRoom::_internal_player() const {
  return player_.Get();
}
inline void SubscribeRoom::_internal_set_player(const std::string& value) {
  
  player_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeRoom::set_player(std::string&& value) {
  
  player_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubscribeRoom.player)
}
inline void SubscribeRoom::set_player(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubscribeRoom.player)
}
inline void SubscribeRoom::set_player(const char* value,
    size_t size) {
  
  player_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubscribeRoom.player)
}
inline std::string* SubscribeRoom::_internal_mutable_player() {
  
  return player_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeRoom::release_player() {
  // @@protoc_insertion_point(field_release:SubscribeRoom.player)
  return player_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeRoom::set_allocated_player(std::string* player) {
  if (player != nullptr) {
    
  } else {
    
  }
  player_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubscribeRoom.player)
}
inline std::string* SubscribeRoom::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SubscribeRoom.player)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return player_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeRoom::unsafe_arena_set_allocated_player(
    std::string* player) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (player != nullptr) {
    
  } else {
    
  }
  player_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      player, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubscribeRoom.player)
}

// string team = 6;
inline void SubscribeRoom::clear_team() {
  team_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeRoom::team() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.team)
  return _internal_team();
}
inline void SubscribeRoom::set_team(const std::string& value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:SubscribeRoom.team)
}
inline std::string* SubscribeRoom::mutable_team() {
  // @@protoc_insertion_point(field_mutable:SubscribeRoom.team)
  return _internal_mutable_team();
}
inline const std::string& SubscribeRoom::_internal_team() const {
  return team_.Get();
}
inline void SubscribeRoom::_internal_set_team(const std::string& value) {
  
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeRoom::set_team(std::string&& value) {
  
  team_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubscribeRoom.team)
}
inline void SubscribeRoom::set_team(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubscribeRoom.team)
}
inline void SubscribeRoom::set_team(const char* value,
    size_t size) {
  
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubscribeRoom.team)
}
inline std::string* SubscribeRoom::_internal_mutable_team() {
  
  return team_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeRoom::release_team() {
  // @@protoc_insertion_point(field_release:SubscribeRoom.team)
  return team_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeRoom::set_allocated_team(std::string* team) {
  if (team != nullptr) {
    
  } else {
    
  }
  team_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubscribeRoom.team)
}
inline std::string* SubscribeRoom::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SubscribeRoom.team)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return team_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeRoom::unsafe_arena_set_allocated_team(
    std::string* team) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (team != nullptr) {
    
  } else {
    
  }
  team_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      team, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubscribeRoom.team)
}

inline bool SubscribeRoom::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
inline void SubscribeRoom::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
inline SubscribeRoom::V1Case SubscribeRoom::v1_case() const {
  return SubscribeRoom::V1Case(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoomDescribe

// repeated .TeamPlayer team1 = 1;
inline int RoomDescribe::_internal_team1_size() const {
  return team1_.size();
}
inline int RoomDescribe::team1_size() const {
  return _internal_team1_size();
}
inline void RoomDescribe::clear_team1() {
  team1_.Clear();
}
inline ::TeamPlayer* RoomDescribe::mutable_team1(int index) {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.team1)
  return team1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >*
RoomDescribe::mutable_team1() {
  // @@protoc_insertion_point(field_mutable_list:RoomDescribe.team1)
  return &team1_;
}
inline const ::TeamPlayer& RoomDescribe::_internal_team1(int index) const {
  return team1_.Get(index);
}
inline const ::TeamPlayer& RoomDescribe::team1(int index) const {
  // @@protoc_insertion_point(field_get:RoomDescribe.team1)
  return _internal_team1(index);
}
inline ::TeamPlayer* RoomDescribe::_internal_add_team1() {
  return team1_.Add();
}
inline ::TeamPlayer* RoomDescribe::add_team1() {
  // @@protoc_insertion_point(field_add:RoomDescribe.team1)
  return _internal_add_team1();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >&
RoomDescribe::team1() const {
  // @@protoc_insertion_point(field_list:RoomDescribe.team1)
  return team1_;
}

// repeated .TeamPlayer team2 = 2;
inline int RoomDescribe::_internal_team2_size() const {
  return team2_.size();
}
inline int RoomDescribe::team2_size() const {
  return _internal_team2_size();
}
inline void RoomDescribe::clear_team2() {
  team2_.Clear();
}
inline ::TeamPlayer* RoomDescribe::mutable_team2(int index) {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.team2)
  return team2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >*
RoomDescribe::mutable_team2() {
  // @@protoc_insertion_point(field_mutable_list:RoomDescribe.team2)
  return &team2_;
}
inline const ::TeamPlayer& RoomDescribe::_internal_team2(int index) const {
  return team2_.Get(index);
}
inline const ::TeamPlayer& RoomDescribe::team2(int index) const {
  // @@protoc_insertion_point(field_get:RoomDescribe.team2)
  return _internal_team2(index);
}
inline ::TeamPlayer* RoomDescribe::_internal_add_team2() {
  return team2_.Add();
}
inline ::TeamPlayer* RoomDescribe::add_team2() {
  // @@protoc_insertion_point(field_add:RoomDescribe.team2)
  return _internal_add_team2();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >&
RoomDescribe::team2() const {
  // @@protoc_insertion_point(field_list:RoomDescribe.team2)
  return team2_;
}

// repeated .TeamPlayer undistributed = 3;
inline int RoomDescribe::_internal_undistributed_size() const {
  return undistributed_.size();
}
inline int RoomDescribe::undistributed_size() const {
  return _internal_undistributed_size();
}
inline void RoomDescribe::clear_undistributed() {
  undistributed_.Clear();
}
inline ::TeamPlayer* RoomDescribe::mutable_undistributed(int index) {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.undistributed)
  return undistributed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >*
RoomDescribe::mutable_undistributed() {
  // @@protoc_insertion_point(field_mutable_list:RoomDescribe.undistributed)
  return &undistributed_;
}
inline const ::TeamPlayer& RoomDescribe::_internal_undistributed(int index) const {
  return undistributed_.Get(index);
}
inline const ::TeamPlayer& RoomDescribe::undistributed(int index) const {
  // @@protoc_insertion_point(field_get:RoomDescribe.undistributed)
  return _internal_undistributed(index);
}
inline ::TeamPlayer* RoomDescribe::_internal_add_undistributed() {
  return undistributed_.Add();
}
inline ::TeamPlayer* RoomDescribe::add_undistributed() {
  // @@protoc_insertion_point(field_add:RoomDescribe.undistributed)
  return _internal_add_undistributed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeamPlayer >&
RoomDescribe::undistributed() const {
  // @@protoc_insertion_point(field_list:RoomDescribe.undistributed)
  return undistributed_;
}

// string roomName = 4;
inline void RoomDescribe::clear_roomname() {
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomDescribe::roomname() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.roomName)
  return _internal_roomname();
}
inline void RoomDescribe::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:RoomDescribe.roomName)
}
inline std::string* RoomDescribe::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.roomName)
  return _internal_mutable_roomname();
}
inline const std::string& RoomDescribe::_internal_roomname() const {
  return roomname_.Get();
}
inline void RoomDescribe::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomDescribe::set_roomname(std::string&& value) {
  
  roomname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomDescribe.roomName)
}
inline void RoomDescribe::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoomDescribe.roomName)
}
inline void RoomDescribe::set_roomname(const char* value,
    size_t size) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomDescribe.roomName)
}
inline std::string* RoomDescribe::_internal_mutable_roomname() {
  
  return roomname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomDescribe::release_roomname() {
  // @@protoc_insertion_point(field_release:RoomDescribe.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomDescribe::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.roomName)
}
inline std::string* RoomDescribe::unsafe_arena_release_roomname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoomDescribe.roomName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomDescribe::unsafe_arena_set_allocated_roomname(
    std::string* roomname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomDescribe.roomName)
}

// string mapName = 5;
inline void RoomDescribe::clear_mapname() {
  mapname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomDescribe::mapname() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.mapName)
  return _internal_mapname();
}
inline void RoomDescribe::set_mapname(const std::string& value) {
  _internal_set_mapname(value);
  // @@protoc_insertion_point(field_set:RoomDescribe.mapName)
}
inline std::string* RoomDescribe::mutable_mapname() {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.mapName)
  return _internal_mutable_mapname();
}
inline const std::string& RoomDescribe::_internal_mapname() const {
  return mapname_.Get();
}
inline void RoomDescribe::_internal_set_mapname(const std::string& value) {
  
  mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomDescribe::set_mapname(std::string&& value) {
  
  mapname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomDescribe.mapName)
}
inline void RoomDescribe::set_mapname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoomDescribe.mapName)
}
inline void RoomDescribe::set_mapname(const char* value,
    size_t size) {
  
  mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomDescribe.mapName)
}
inline std::string* RoomDescribe::_internal_mutable_mapname() {
  
  return mapname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomDescribe::release_mapname() {
  // @@protoc_insertion_point(field_release:RoomDescribe.mapName)
  return mapname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomDescribe::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  mapname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.mapName)
}
inline std::string* RoomDescribe::unsafe_arena_release_mapname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoomDescribe.mapName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mapname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomDescribe::unsafe_arena_set_allocated_mapname(
    std::string* mapname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mapname != nullptr) {
    
  } else {
    
  }
  mapname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mapname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomDescribe.mapName)
}

// string gameTime = 6;
inline void RoomDescribe::clear_gametime() {
  gametime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomDescribe::gametime() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.gameTime)
  return _internal_gametime();
}
inline void RoomDescribe::set_gametime(const std::string& value) {
  _internal_set_gametime(value);
  // @@protoc_insertion_point(field_set:RoomDescribe.gameTime)
}
inline std::string* RoomDescribe::mutable_gametime() {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.gameTime)
  return _internal_mutable_gametime();
}
inline const std::string& RoomDescribe::_internal_gametime() const {
  return gametime_.Get();
}
inline void RoomDescribe::_internal_set_gametime(const std::string& value) {
  
  gametime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomDescribe::set_gametime(std::string&& value) {
  
  gametime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomDescribe.gameTime)
}
inline void RoomDescribe::set_gametime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gametime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoomDescribe.gameTime)
}
inline void RoomDescribe::set_gametime(const char* value,
    size_t size) {
  
  gametime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomDescribe.gameTime)
}
inline std::string* RoomDescribe::_internal_mutable_gametime() {
  
  return gametime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomDescribe::release_gametime() {
  // @@protoc_insertion_point(field_release:RoomDescribe.gameTime)
  return gametime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomDescribe::set_allocated_gametime(std::string* gametime) {
  if (gametime != nullptr) {
    
  } else {
    
  }
  gametime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gametime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.gameTime)
}
inline std::string* RoomDescribe::unsafe_arena_release_gametime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoomDescribe.gameTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gametime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomDescribe::unsafe_arena_set_allocated_gametime(
    std::string* gametime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gametime != nullptr) {
    
  } else {
    
  }
  gametime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gametime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomDescribe.gameTime)
}

// string maxPlayers = 7;
inline void RoomDescribe::clear_maxplayers() {
  maxplayers_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomDescribe::maxplayers() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.maxPlayers)
  return _internal_maxplayers();
}
inline void RoomDescribe::set_maxplayers(const std::string& value) {
  _internal_set_maxplayers(value);
  // @@protoc_insertion_point(field_set:RoomDescribe.maxPlayers)
}
inline std::string* RoomDescribe::mutable_maxplayers() {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.maxPlayers)
  return _internal_mutable_maxplayers();
}
inline const std::string& RoomDescribe::_internal_maxplayers() const {
  return maxplayers_.Get();
}
inline void RoomDescribe::_internal_set_maxplayers(const std::string& value) {
  
  maxplayers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomDescribe::set_maxplayers(std::string&& value) {
  
  maxplayers_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomDescribe.maxPlayers)
}
inline void RoomDescribe::set_maxplayers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maxplayers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoomDescribe.maxPlayers)
}
inline void RoomDescribe::set_maxplayers(const char* value,
    size_t size) {
  
  maxplayers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomDescribe.maxPlayers)
}
inline std::string* RoomDescribe::_internal_mutable_maxplayers() {
  
  return maxplayers_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomDescribe::release_maxplayers() {
  // @@protoc_insertion_point(field_release:RoomDescribe.maxPlayers)
  return maxplayers_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomDescribe::set_allocated_maxplayers(std::string* maxplayers) {
  if (maxplayers != nullptr) {
    
  } else {
    
  }
  maxplayers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maxplayers,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.maxPlayers)
}
inline std::string* RoomDescribe::unsafe_arena_release_maxplayers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoomDescribe.maxPlayers)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return maxplayers_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomDescribe::unsafe_arena_set_allocated_maxplayers(
    std::string* maxplayers) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (maxplayers != nullptr) {
    
  } else {
    
  }
  maxplayers_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      maxplayers, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomDescribe.maxPlayers)
}

// string creator = 8;
inline void RoomDescribe::clear_creator() {
  creator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomDescribe::creator() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.creator)
  return _internal_creator();
}
inline void RoomDescribe::set_creator(const std::string& value) {
  _internal_set_creator(value);
  // @@protoc_insertion_point(field_set:RoomDescribe.creator)
}
inline std::string* RoomDescribe::mutable_creator() {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.creator)
  return _internal_mutable_creator();
}
inline const std::string& RoomDescribe::_internal_creator() const {
  return creator_.Get();
}
inline void RoomDescribe::_internal_set_creator(const std::string& value) {
  
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomDescribe::set_creator(std::string&& value) {
  
  creator_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomDescribe.creator)
}
inline void RoomDescribe::set_creator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoomDescribe.creator)
}
inline void RoomDescribe::set_creator(const char* value,
    size_t size) {
  
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomDescribe.creator)
}
inline std::string* RoomDescribe::_internal_mutable_creator() {
  
  return creator_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomDescribe::release_creator() {
  // @@protoc_insertion_point(field_release:RoomDescribe.creator)
  return creator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomDescribe::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  creator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.creator)
}
inline std::string* RoomDescribe::unsafe_arena_release_creator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoomDescribe.creator)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return creator_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomDescribe::unsafe_arena_set_allocated_creator(
    std::string* creator) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (creator != nullptr) {
    
  } else {
    
  }
  creator_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      creator, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomDescribe.creator)
}

// .Chat chat = 9;
inline bool RoomDescribe::_internal_has_chat() const {
  return this != internal_default_instance() && chat_ != nullptr;
}
inline bool RoomDescribe::has_chat() const {
  return _internal_has_chat();
}
inline const ::Chat& RoomDescribe::_internal_chat() const {
  const ::Chat* p = chat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Chat*>(
      &::_Chat_default_instance_);
}
inline const ::Chat& RoomDescribe::chat() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.chat)
  return _internal_chat();
}
inline void RoomDescribe::unsafe_arena_set_allocated_chat(
    ::Chat* chat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_);
  }
  chat_ = chat;
  if (chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomDescribe.chat)
}
inline ::Chat* RoomDescribe::release_chat() {
  auto temp = unsafe_arena_release_chat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Chat* RoomDescribe::unsafe_arena_release_chat() {
  // @@protoc_insertion_point(field_release:RoomDescribe.chat)
  
  ::Chat* temp = chat_;
  chat_ = nullptr;
  return temp;
}
inline ::Chat* RoomDescribe::_internal_mutable_chat() {
  
  if (chat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Chat>(GetArena());
    chat_ = p;
  }
  return chat_;
}
inline ::Chat* RoomDescribe::mutable_chat() {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.chat)
  return _internal_mutable_chat();
}
inline void RoomDescribe::set_allocated_chat(::Chat* chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_);
  }
  if (chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat)->GetArena();
    if (message_arena != submessage_arena) {
      chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat, submessage_arena);
    }
    
  } else {
    
  }
  chat_ = chat;
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.chat)
}

// -------------------------------------------------------------------

// TeamPlayer

// string player_name = 1;
inline void TeamPlayer::clear_player_name() {
  player_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TeamPlayer::player_name() const {
  // @@protoc_insertion_point(field_get:TeamPlayer.player_name)
  return _internal_player_name();
}
inline void TeamPlayer::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:TeamPlayer.player_name)
}
inline std::string* TeamPlayer::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:TeamPlayer.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& TeamPlayer::_internal_player_name() const {
  return player_name_.Get();
}
inline void TeamPlayer::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeamPlayer::set_player_name(std::string&& value) {
  
  player_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TeamPlayer.player_name)
}
inline void TeamPlayer::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TeamPlayer.player_name)
}
inline void TeamPlayer::set_player_name(const char* value,
    size_t size) {
  
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TeamPlayer.player_name)
}
inline std::string* TeamPlayer::_internal_mutable_player_name() {
  
  return player_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeamPlayer::release_player_name() {
  // @@protoc_insertion_point(field_release:TeamPlayer.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamPlayer::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TeamPlayer.player_name)
}
inline std::string* TeamPlayer::unsafe_arena_release_player_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TeamPlayer.player_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return player_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TeamPlayer::unsafe_arena_set_allocated_player_name(
    std::string* player_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      player_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TeamPlayer.player_name)
}

// -------------------------------------------------------------------

// RoomUpdate

// .RoomDescribe roomDescribe = 1;
inline bool RoomUpdate::_internal_has_roomdescribe() const {
  return this != internal_default_instance() && roomdescribe_ != nullptr;
}
inline bool RoomUpdate::has_roomdescribe() const {
  return _internal_has_roomdescribe();
}
inline void RoomUpdate::clear_roomdescribe() {
  if (GetArena() == nullptr && roomdescribe_ != nullptr) {
    delete roomdescribe_;
  }
  roomdescribe_ = nullptr;
}
inline const ::RoomDescribe& RoomUpdate::_internal_roomdescribe() const {
  const ::RoomDescribe* p = roomdescribe_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoomDescribe*>(
      &::_RoomDescribe_default_instance_);
}
inline const ::RoomDescribe& RoomUpdate::roomdescribe() const {
  // @@protoc_insertion_point(field_get:RoomUpdate.roomDescribe)
  return _internal_roomdescribe();
}
inline void RoomUpdate::unsafe_arena_set_allocated_roomdescribe(
    ::RoomDescribe* roomdescribe) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roomdescribe_);
  }
  roomdescribe_ = roomdescribe;
  if (roomdescribe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomUpdate.roomDescribe)
}
inline ::RoomDescribe* RoomUpdate::release_roomdescribe() {
  auto temp = unsafe_arena_release_roomdescribe();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoomDescribe* RoomUpdate::unsafe_arena_release_roomdescribe() {
  // @@protoc_insertion_point(field_release:RoomUpdate.roomDescribe)
  
  ::RoomDescribe* temp = roomdescribe_;
  roomdescribe_ = nullptr;
  return temp;
}
inline ::RoomDescribe* RoomUpdate::_internal_mutable_roomdescribe() {
  
  if (roomdescribe_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoomDescribe>(GetArena());
    roomdescribe_ = p;
  }
  return roomdescribe_;
}
inline ::RoomDescribe* RoomUpdate::mutable_roomdescribe() {
  // @@protoc_insertion_point(field_mutable:RoomUpdate.roomDescribe)
  return _internal_mutable_roomdescribe();
}
inline void RoomUpdate::set_allocated_roomdescribe(::RoomDescribe* roomdescribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roomdescribe_;
  }
  if (roomdescribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roomdescribe);
    if (message_arena != submessage_arena) {
      roomdescribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomdescribe, submessage_arena);
    }
    
  } else {
    
  }
  roomdescribe_ = roomdescribe;
  // @@protoc_insertion_point(field_set_allocated:RoomUpdate.roomDescribe)
}

// string targetTeam = 2;
inline void RoomUpdate::clear_targetteam() {
  targetteam_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomUpdate::targetteam() const {
  // @@protoc_insertion_point(field_get:RoomUpdate.targetTeam)
  return _internal_targetteam();
}
inline void RoomUpdate::set_targetteam(const std::string& value) {
  _internal_set_targetteam(value);
  // @@protoc_insertion_point(field_set:RoomUpdate.targetTeam)
}
inline std::string* RoomUpdate::mutable_targetteam() {
  // @@protoc_insertion_point(field_mutable:RoomUpdate.targetTeam)
  return _internal_mutable_targetteam();
}
inline const std::string& RoomUpdate::_internal_targetteam() const {
  return targetteam_.Get();
}
inline void RoomUpdate::_internal_set_targetteam(const std::string& value) {
  
  targetteam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomUpdate::set_targetteam(std::string&& value) {
  
  targetteam_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomUpdate.targetTeam)
}
inline void RoomUpdate::set_targetteam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetteam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoomUpdate.targetTeam)
}
inline void RoomUpdate::set_targetteam(const char* value,
    size_t size) {
  
  targetteam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomUpdate.targetTeam)
}
inline std::string* RoomUpdate::_internal_mutable_targetteam() {
  
  return targetteam_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomUpdate::release_targetteam() {
  // @@protoc_insertion_point(field_release:RoomUpdate.targetTeam)
  return targetteam_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomUpdate::set_allocated_targetteam(std::string* targetteam) {
  if (targetteam != nullptr) {
    
  } else {
    
  }
  targetteam_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetteam,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomUpdate.targetTeam)
}
inline std::string* RoomUpdate::unsafe_arena_release_targetteam() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoomUpdate.targetTeam)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return targetteam_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomUpdate::unsafe_arena_set_allocated_targetteam(
    std::string* targetteam) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (targetteam != nullptr) {
    
  } else {
    
  }
  targetteam_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      targetteam, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomUpdate.targetTeam)
}

// string roomName = 3;
inline void RoomUpdate::clear_roomname() {
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomUpdate::roomname() const {
  // @@protoc_insertion_point(field_get:RoomUpdate.roomName)
  return _internal_roomname();
}
inline void RoomUpdate::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:RoomUpdate.roomName)
}
inline std::string* RoomUpdate::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:RoomUpdate.roomName)
  return _internal_mutable_roomname();
}
inline const std::string& RoomUpdate::_internal_roomname() const {
  return roomname_.Get();
}
inline void RoomUpdate::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomUpdate::set_roomname(std::string&& value) {
  
  roomname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomUpdate.roomName)
}
inline void RoomUpdate::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoomUpdate.roomName)
}
inline void RoomUpdate::set_roomname(const char* value,
    size_t size) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomUpdate.roomName)
}
inline std::string* RoomUpdate::_internal_mutable_roomname() {
  
  return roomname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomUpdate::release_roomname() {
  // @@protoc_insertion_point(field_release:RoomUpdate.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomUpdate::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomUpdate.roomName)
}
inline std::string* RoomUpdate::unsafe_arena_release_roomname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoomUpdate.roomName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomUpdate::unsafe_arena_set_allocated_roomname(
    std::string* roomname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomUpdate.roomName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameRoomModels_2eproto
