// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Player.proto

#include "Player.pb.h"
#include "Player.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto_messages {

static const char* PlayerService_method_names[] = {
  "/proto_messages.PlayerService/GetPlayerInfo",
};

std::unique_ptr< PlayerService::Stub> PlayerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PlayerService::Stub> stub(new PlayerService::Stub(channel));
  return stub;
}

PlayerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetPlayerInfo_(PlayerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PlayerService::Stub::GetPlayerInfo(::grpc::ClientContext* context, const ::proto_messages::PlayerParams& request, ::proto_messages::Player* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPlayerInfo_, context, request, response);
}

void PlayerService::Stub::experimental_async::GetPlayerInfo(::grpc::ClientContext* context, const ::proto_messages::PlayerParams* request, ::proto_messages::Player* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayerInfo_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::GetPlayerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto_messages::Player* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayerInfo_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::GetPlayerInfo(::grpc::ClientContext* context, const ::proto_messages::PlayerParams* request, ::proto_messages::Player* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayerInfo_, context, request, response, reactor);
}

void PlayerService::Stub::experimental_async::GetPlayerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto_messages::Player* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto_messages::Player>* PlayerService::Stub::AsyncGetPlayerInfoRaw(::grpc::ClientContext* context, const ::proto_messages::PlayerParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto_messages::Player>::Create(channel_.get(), cq, rpcmethod_GetPlayerInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto_messages::Player>* PlayerService::Stub::PrepareAsyncGetPlayerInfoRaw(::grpc::ClientContext* context, const ::proto_messages::PlayerParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto_messages::Player>::Create(channel_.get(), cq, rpcmethod_GetPlayerInfo_, context, request, false);
}

PlayerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::proto_messages::PlayerParams, ::proto_messages::Player>(
          [](PlayerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::proto_messages::PlayerParams* req,
             ::proto_messages::Player* resp) {
               return service->GetPlayerInfo(ctx, req, resp);
             }, this)));
}

PlayerService::Service::~Service() {
}

::grpc::Status PlayerService::Service::GetPlayerInfo(::grpc::ServerContext* context, const ::proto_messages::PlayerParams* request, ::proto_messages::Player* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto_messages

