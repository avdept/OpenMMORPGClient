// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageModels.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageModels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageModels_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "DisableWarnings.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageModels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageModels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageModels_2eproto;
class Utility;
class UtilityDefaultTypeInternal;
extern UtilityDefaultTypeInternal _Utility_default_instance_;
class Wrapper;
class WrapperDefaultTypeInternal;
extern WrapperDefaultTypeInternal _Wrapper_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Utility* Arena::CreateMaybeMessage<::Utility>(Arena*);
template<> ::Wrapper* Arena::CreateMaybeMessage<::Wrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Wrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Wrapper) */ {
 public:
  inline Wrapper() : Wrapper(nullptr) {};
  virtual ~Wrapper();

  Wrapper(const Wrapper& from);
  Wrapper(Wrapper&& from) noexcept
    : Wrapper() {
    *this = ::std::move(from);
  }

  inline Wrapper& operator=(const Wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wrapper& operator=(Wrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wrapper* internal_default_instance() {
    return reinterpret_cast<const Wrapper*>(
               &_Wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Wrapper& a, Wrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(Wrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wrapper* New() const final {
    return CreateMaybeMessage<Wrapper>(nullptr);
  }

  Wrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wrapper& from);
  void MergeFrom(const Wrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Wrapper";
  }
  protected:
  explicit Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageModels_2eproto);
    return ::descriptor_table_MessageModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtilityFieldNumber = 1,
  };
  // .Utility utility = 1;
  bool has_utility() const;
  private:
  bool _internal_has_utility() const;
  public:
  void clear_utility();
  const ::Utility& utility() const;
  ::Utility* release_utility();
  ::Utility* mutable_utility();
  void set_allocated_utility(::Utility* utility);
  private:
  const ::Utility& _internal_utility() const;
  ::Utility* _internal_mutable_utility();
  public:
  void unsafe_arena_set_allocated_utility(
      ::Utility* utility);
  ::Utility* unsafe_arena_release_utility();

  // @@protoc_insertion_point(class_scope:Wrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Utility* utility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageModels_2eproto;
};
// -------------------------------------------------------------------

class Utility PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Utility) */ {
 public:
  inline Utility() : Utility(nullptr) {};
  virtual ~Utility();

  Utility(const Utility& from);
  Utility(Utility&& from) noexcept
    : Utility() {
    *this = ::std::move(from);
  }

  inline Utility& operator=(const Utility& from) {
    CopyFrom(from);
    return *this;
  }
  inline Utility& operator=(Utility&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Utility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Utility* internal_default_instance() {
    return reinterpret_cast<const Utility*>(
               &_Utility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Utility& a, Utility& b) {
    a.Swap(&b);
  }
  inline void Swap(Utility* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Utility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Utility* New() const final {
    return CreateMaybeMessage<Utility>(nullptr);
  }

  Utility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Utility>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Utility& from);
  void MergeFrom(const Utility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Utility* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Utility";
  }
  protected:
  explicit Utility(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageModels_2eproto);
    return ::descriptor_table_MessageModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAliveFieldNumber = 1,
  };
  // bool alive = 1;
  void clear_alive();
  bool alive() const;
  void set_alive(bool value);
  private:
  bool _internal_alive() const;
  void _internal_set_alive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Utility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool alive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageModels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Wrapper

// .Utility utility = 1;
inline bool Wrapper::_internal_has_utility() const {
  return this != internal_default_instance() && utility_ != nullptr;
}
inline bool Wrapper::has_utility() const {
  return _internal_has_utility();
}
inline void Wrapper::clear_utility() {
  if (GetArena() == nullptr && utility_ != nullptr) {
    delete utility_;
  }
  utility_ = nullptr;
}
inline const ::Utility& Wrapper::_internal_utility() const {
  const ::Utility* p = utility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Utility*>(
      &::_Utility_default_instance_);
}
inline const ::Utility& Wrapper::utility() const {
  // @@protoc_insertion_point(field_get:Wrapper.utility)
  return _internal_utility();
}
inline void Wrapper::unsafe_arena_set_allocated_utility(
    ::Utility* utility) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utility_);
  }
  utility_ = utility;
  if (utility) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.utility)
}
inline ::Utility* Wrapper::release_utility() {
  auto temp = unsafe_arena_release_utility();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Utility* Wrapper::unsafe_arena_release_utility() {
  // @@protoc_insertion_point(field_release:Wrapper.utility)
  
  ::Utility* temp = utility_;
  utility_ = nullptr;
  return temp;
}
inline ::Utility* Wrapper::_internal_mutable_utility() {
  
  if (utility_ == nullptr) {
    auto* p = CreateMaybeMessage<::Utility>(GetArena());
    utility_ = p;
  }
  return utility_;
}
inline ::Utility* Wrapper::mutable_utility() {
  // @@protoc_insertion_point(field_mutable:Wrapper.utility)
  return _internal_mutable_utility();
}
inline void Wrapper::set_allocated_utility(::Utility* utility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete utility_;
  }
  if (utility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(utility);
    if (message_arena != submessage_arena) {
      utility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utility, submessage_arena);
    }
    
  } else {
    
  }
  utility_ = utility;
  // @@protoc_insertion_point(field_set_allocated:Wrapper.utility)
}

// -------------------------------------------------------------------

// Utility

// bool alive = 1;
inline void Utility::clear_alive() {
  alive_ = false;
}
inline bool Utility::_internal_alive() const {
  return alive_;
}
inline bool Utility::alive() const {
  // @@protoc_insertion_point(field_get:Utility.alive)
  return _internal_alive();
}
inline void Utility::_internal_set_alive(bool value) {
  
  alive_ = value;
}
inline void Utility::set_alive(bool value) {
  _internal_set_alive(value);
  // @@protoc_insertion_point(field_set:Utility.alive)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageModels_2eproto
