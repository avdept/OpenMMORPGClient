// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageModels.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageModels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageModels_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "UtilityModels.pb.h"
#include "RegLogModels.pb.h"
#include "DisableWarnings.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageModels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageModels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageModels_2eproto;
class CryptogramWrapper;
class CryptogramWrapperDefaultTypeInternal;
extern CryptogramWrapperDefaultTypeInternal _CryptogramWrapper_default_instance_;
class Wrapper;
class WrapperDefaultTypeInternal;
extern WrapperDefaultTypeInternal _Wrapper_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CryptogramWrapper* Arena::CreateMaybeMessage<::CryptogramWrapper>(Arena*);
template<> ::Wrapper* Arena::CreateMaybeMessage<::Wrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CryptogramWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CryptogramWrapper) */ {
 public:
  inline CryptogramWrapper() : CryptogramWrapper(nullptr) {};
  virtual ~CryptogramWrapper();

  CryptogramWrapper(const CryptogramWrapper& from);
  CryptogramWrapper(CryptogramWrapper&& from) noexcept
    : CryptogramWrapper() {
    *this = ::std::move(from);
  }

  inline CryptogramWrapper& operator=(const CryptogramWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptogramWrapper& operator=(CryptogramWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CryptogramWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CryptogramWrapper* internal_default_instance() {
    return reinterpret_cast<const CryptogramWrapper*>(
               &_CryptogramWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptogramWrapper& a, CryptogramWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptogramWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptogramWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CryptogramWrapper* New() const final {
    return CreateMaybeMessage<CryptogramWrapper>(nullptr);
  }

  CryptogramWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CryptogramWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CryptogramWrapper& from);
  void MergeFrom(const CryptogramWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptogramWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CryptogramWrapper";
  }
  protected:
  explicit CryptogramWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageModels_2eproto);
    return ::descriptor_table_MessageModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegistrationFieldNumber = 1,
    kLoginFieldNumber = 2,
    kInitialStateFieldNumber = 3,
    kRoomFieldNumber = 4,
    kMainMenuFieldNumber = 5,
    kGameModelsFieldNumber = 6,
  };
  // bytes registration = 1;
  void clear_registration();
  const std::string& registration() const;
  void set_registration(const std::string& value);
  void set_registration(std::string&& value);
  void set_registration(const char* value);
  void set_registration(const void* value, size_t size);
  std::string* mutable_registration();
  std::string* release_registration();
  void set_allocated_registration(std::string* registration);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_registration();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_registration(
      std::string* registration);
  private:
  const std::string& _internal_registration() const;
  void _internal_set_registration(const std::string& value);
  std::string* _internal_mutable_registration();
  public:

  // bytes login = 2;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const void* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login(
      std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // bytes initialState = 3;
  void clear_initialstate();
  const std::string& initialstate() const;
  void set_initialstate(const std::string& value);
  void set_initialstate(std::string&& value);
  void set_initialstate(const char* value);
  void set_initialstate(const void* value, size_t size);
  std::string* mutable_initialstate();
  std::string* release_initialstate();
  void set_allocated_initialstate(std::string* initialstate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_initialstate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_initialstate(
      std::string* initialstate);
  private:
  const std::string& _internal_initialstate() const;
  void _internal_set_initialstate(const std::string& value);
  std::string* _internal_mutable_initialstate();
  public:

  // bytes room = 4;
  void clear_room();
  const std::string& room() const;
  void set_room(const std::string& value);
  void set_room(std::string&& value);
  void set_room(const char* value);
  void set_room(const void* value, size_t size);
  std::string* mutable_room();
  std::string* release_room();
  void set_allocated_room(std::string* room);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_room();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_room(
      std::string* room);
  private:
  const std::string& _internal_room() const;
  void _internal_set_room(const std::string& value);
  std::string* _internal_mutable_room();
  public:

  // bytes mainMenu = 5;
  void clear_mainmenu();
  const std::string& mainmenu() const;
  void set_mainmenu(const std::string& value);
  void set_mainmenu(std::string&& value);
  void set_mainmenu(const char* value);
  void set_mainmenu(const void* value, size_t size);
  std::string* mutable_mainmenu();
  std::string* release_mainmenu();
  void set_allocated_mainmenu(std::string* mainmenu);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainmenu();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainmenu(
      std::string* mainmenu);
  private:
  const std::string& _internal_mainmenu() const;
  void _internal_set_mainmenu(const std::string& value);
  std::string* _internal_mutable_mainmenu();
  public:

  // bytes gameModels = 6;
  void clear_gamemodels();
  const std::string& gamemodels() const;
  void set_gamemodels(const std::string& value);
  void set_gamemodels(std::string&& value);
  void set_gamemodels(const char* value);
  void set_gamemodels(const void* value, size_t size);
  std::string* mutable_gamemodels();
  std::string* release_gamemodels();
  void set_allocated_gamemodels(std::string* gamemodels);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gamemodels();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gamemodels(
      std::string* gamemodels);
  private:
  const std::string& _internal_gamemodels() const;
  void _internal_set_gamemodels(const std::string& value);
  std::string* _internal_mutable_gamemodels();
  public:

  // @@protoc_insertion_point(class_scope:CryptogramWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initialstate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainmenu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamemodels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageModels_2eproto;
};
// -------------------------------------------------------------------

class Wrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Wrapper) */ {
 public:
  inline Wrapper() : Wrapper(nullptr) {};
  virtual ~Wrapper();

  Wrapper(const Wrapper& from);
  Wrapper(Wrapper&& from) noexcept
    : Wrapper() {
    *this = ::std::move(from);
  }

  inline Wrapper& operator=(const Wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wrapper& operator=(Wrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wrapper* internal_default_instance() {
    return reinterpret_cast<const Wrapper*>(
               &_Wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Wrapper& a, Wrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(Wrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wrapper* New() const final {
    return CreateMaybeMessage<Wrapper>(nullptr);
  }

  Wrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wrapper& from);
  void MergeFrom(const Wrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Wrapper";
  }
  protected:
  explicit Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageModels_2eproto);
    return ::descriptor_table_MessageModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtilityFieldNumber = 1,
    kInputCheckingFieldNumber = 2,
    kRegistrationFieldNumber = 3,
    kLoginFieldNumber = 4,
    kCryptogramWrapperFieldNumber = 5,
  };
  // .Utility utility = 1;
  bool has_utility() const;
  private:
  bool _internal_has_utility() const;
  public:
  void clear_utility();
  const ::Utility& utility() const;
  ::Utility* release_utility();
  ::Utility* mutable_utility();
  void set_allocated_utility(::Utility* utility);
  private:
  const ::Utility& _internal_utility() const;
  ::Utility* _internal_mutable_utility();
  public:
  void unsafe_arena_set_allocated_utility(
      ::Utility* utility);
  ::Utility* unsafe_arena_release_utility();

  // .InputChecking inputChecking = 2;
  bool has_inputchecking() const;
  private:
  bool _internal_has_inputchecking() const;
  public:
  void clear_inputchecking();
  const ::InputChecking& inputchecking() const;
  ::InputChecking* release_inputchecking();
  ::InputChecking* mutable_inputchecking();
  void set_allocated_inputchecking(::InputChecking* inputchecking);
  private:
  const ::InputChecking& _internal_inputchecking() const;
  ::InputChecking* _internal_mutable_inputchecking();
  public:
  void unsafe_arena_set_allocated_inputchecking(
      ::InputChecking* inputchecking);
  ::InputChecking* unsafe_arena_release_inputchecking();

  // .Registration registration = 3;
  bool has_registration() const;
  private:
  bool _internal_has_registration() const;
  public:
  void clear_registration();
  const ::Registration& registration() const;
  ::Registration* release_registration();
  ::Registration* mutable_registration();
  void set_allocated_registration(::Registration* registration);
  private:
  const ::Registration& _internal_registration() const;
  ::Registration* _internal_mutable_registration();
  public:
  void unsafe_arena_set_allocated_registration(
      ::Registration* registration);
  ::Registration* unsafe_arena_release_registration();

  // .Login login = 4;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::Login& login() const;
  ::Login* release_login();
  ::Login* mutable_login();
  void set_allocated_login(::Login* login);
  private:
  const ::Login& _internal_login() const;
  ::Login* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::Login* login);
  ::Login* unsafe_arena_release_login();

  // .CryptogramWrapper cryptogramWrapper = 5;
  bool has_cryptogramwrapper() const;
  private:
  bool _internal_has_cryptogramwrapper() const;
  public:
  void clear_cryptogramwrapper();
  const ::CryptogramWrapper& cryptogramwrapper() const;
  ::CryptogramWrapper* release_cryptogramwrapper();
  ::CryptogramWrapper* mutable_cryptogramwrapper();
  void set_allocated_cryptogramwrapper(::CryptogramWrapper* cryptogramwrapper);
  private:
  const ::CryptogramWrapper& _internal_cryptogramwrapper() const;
  ::CryptogramWrapper* _internal_mutable_cryptogramwrapper();
  public:
  void unsafe_arena_set_allocated_cryptogramwrapper(
      ::CryptogramWrapper* cryptogramwrapper);
  ::CryptogramWrapper* unsafe_arena_release_cryptogramwrapper();

  // @@protoc_insertion_point(class_scope:Wrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Utility* utility_;
  ::InputChecking* inputchecking_;
  ::Registration* registration_;
  ::Login* login_;
  ::CryptogramWrapper* cryptogramwrapper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageModels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptogramWrapper

// bytes registration = 1;
inline void CryptogramWrapper::clear_registration() {
  registration_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CryptogramWrapper::registration() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.registration)
  return _internal_registration();
}
inline void CryptogramWrapper::set_registration(const std::string& value) {
  _internal_set_registration(value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.registration)
}
inline std::string* CryptogramWrapper::mutable_registration() {
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.registration)
  return _internal_mutable_registration();
}
inline const std::string& CryptogramWrapper::_internal_registration() const {
  return registration_.Get();
}
inline void CryptogramWrapper::_internal_set_registration(const std::string& value) {
  
  registration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CryptogramWrapper::set_registration(std::string&& value) {
  
  registration_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CryptogramWrapper.registration)
}
inline void CryptogramWrapper::set_registration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  registration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.registration)
}
inline void CryptogramWrapper::set_registration(const void* value,
    size_t size) {
  
  registration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.registration)
}
inline std::string* CryptogramWrapper::_internal_mutable_registration() {
  
  return registration_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CryptogramWrapper::release_registration() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.registration)
  return registration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CryptogramWrapper::set_allocated_registration(std::string* registration) {
  if (registration != nullptr) {
    
  } else {
    
  }
  registration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registration,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.registration)
}
inline std::string* CryptogramWrapper::unsafe_arena_release_registration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CryptogramWrapper.registration)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return registration_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CryptogramWrapper::unsafe_arena_set_allocated_registration(
    std::string* registration) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (registration != nullptr) {
    
  } else {
    
  }
  registration_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      registration, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CryptogramWrapper.registration)
}

// bytes login = 2;
inline void CryptogramWrapper::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CryptogramWrapper::login() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.login)
  return _internal_login();
}
inline void CryptogramWrapper::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.login)
}
inline std::string* CryptogramWrapper::mutable_login() {
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.login)
  return _internal_mutable_login();
}
inline const std::string& CryptogramWrapper::_internal_login() const {
  return login_.Get();
}
inline void CryptogramWrapper::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CryptogramWrapper::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CryptogramWrapper.login)
}
inline void CryptogramWrapper::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.login)
}
inline void CryptogramWrapper::set_login(const void* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.login)
}
inline std::string* CryptogramWrapper::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CryptogramWrapper::release_login() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CryptogramWrapper::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.login)
}
inline std::string* CryptogramWrapper::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CryptogramWrapper.login)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CryptogramWrapper::unsafe_arena_set_allocated_login(
    std::string* login) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login != nullptr) {
    
  } else {
    
  }
  login_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CryptogramWrapper.login)
}

// bytes initialState = 3;
inline void CryptogramWrapper::clear_initialstate() {
  initialstate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CryptogramWrapper::initialstate() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.initialState)
  return _internal_initialstate();
}
inline void CryptogramWrapper::set_initialstate(const std::string& value) {
  _internal_set_initialstate(value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.initialState)
}
inline std::string* CryptogramWrapper::mutable_initialstate() {
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.initialState)
  return _internal_mutable_initialstate();
}
inline const std::string& CryptogramWrapper::_internal_initialstate() const {
  return initialstate_.Get();
}
inline void CryptogramWrapper::_internal_set_initialstate(const std::string& value) {
  
  initialstate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CryptogramWrapper::set_initialstate(std::string&& value) {
  
  initialstate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CryptogramWrapper.initialState)
}
inline void CryptogramWrapper::set_initialstate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  initialstate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.initialState)
}
inline void CryptogramWrapper::set_initialstate(const void* value,
    size_t size) {
  
  initialstate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.initialState)
}
inline std::string* CryptogramWrapper::_internal_mutable_initialstate() {
  
  return initialstate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CryptogramWrapper::release_initialstate() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.initialState)
  return initialstate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CryptogramWrapper::set_allocated_initialstate(std::string* initialstate) {
  if (initialstate != nullptr) {
    
  } else {
    
  }
  initialstate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initialstate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.initialState)
}
inline std::string* CryptogramWrapper::unsafe_arena_release_initialstate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CryptogramWrapper.initialState)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return initialstate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CryptogramWrapper::unsafe_arena_set_allocated_initialstate(
    std::string* initialstate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (initialstate != nullptr) {
    
  } else {
    
  }
  initialstate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      initialstate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CryptogramWrapper.initialState)
}

// bytes room = 4;
inline void CryptogramWrapper::clear_room() {
  room_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CryptogramWrapper::room() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.room)
  return _internal_room();
}
inline void CryptogramWrapper::set_room(const std::string& value) {
  _internal_set_room(value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.room)
}
inline std::string* CryptogramWrapper::mutable_room() {
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.room)
  return _internal_mutable_room();
}
inline const std::string& CryptogramWrapper::_internal_room() const {
  return room_.Get();
}
inline void CryptogramWrapper::_internal_set_room(const std::string& value) {
  
  room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CryptogramWrapper::set_room(std::string&& value) {
  
  room_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CryptogramWrapper.room)
}
inline void CryptogramWrapper::set_room(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.room)
}
inline void CryptogramWrapper::set_room(const void* value,
    size_t size) {
  
  room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.room)
}
inline std::string* CryptogramWrapper::_internal_mutable_room() {
  
  return room_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CryptogramWrapper::release_room() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.room)
  return room_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CryptogramWrapper::set_allocated_room(std::string* room) {
  if (room != nullptr) {
    
  } else {
    
  }
  room_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.room)
}
inline std::string* CryptogramWrapper::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CryptogramWrapper.room)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return room_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CryptogramWrapper::unsafe_arena_set_allocated_room(
    std::string* room) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (room != nullptr) {
    
  } else {
    
  }
  room_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      room, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CryptogramWrapper.room)
}

// bytes mainMenu = 5;
inline void CryptogramWrapper::clear_mainmenu() {
  mainmenu_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CryptogramWrapper::mainmenu() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.mainMenu)
  return _internal_mainmenu();
}
inline void CryptogramWrapper::set_mainmenu(const std::string& value) {
  _internal_set_mainmenu(value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.mainMenu)
}
inline std::string* CryptogramWrapper::mutable_mainmenu() {
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.mainMenu)
  return _internal_mutable_mainmenu();
}
inline const std::string& CryptogramWrapper::_internal_mainmenu() const {
  return mainmenu_.Get();
}
inline void CryptogramWrapper::_internal_set_mainmenu(const std::string& value) {
  
  mainmenu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CryptogramWrapper::set_mainmenu(std::string&& value) {
  
  mainmenu_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CryptogramWrapper.mainMenu)
}
inline void CryptogramWrapper::set_mainmenu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainmenu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.mainMenu)
}
inline void CryptogramWrapper::set_mainmenu(const void* value,
    size_t size) {
  
  mainmenu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.mainMenu)
}
inline std::string* CryptogramWrapper::_internal_mutable_mainmenu() {
  
  return mainmenu_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CryptogramWrapper::release_mainmenu() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.mainMenu)
  return mainmenu_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CryptogramWrapper::set_allocated_mainmenu(std::string* mainmenu) {
  if (mainmenu != nullptr) {
    
  } else {
    
  }
  mainmenu_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainmenu,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.mainMenu)
}
inline std::string* CryptogramWrapper::unsafe_arena_release_mainmenu() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CryptogramWrapper.mainMenu)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainmenu_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CryptogramWrapper::unsafe_arena_set_allocated_mainmenu(
    std::string* mainmenu) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainmenu != nullptr) {
    
  } else {
    
  }
  mainmenu_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainmenu, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CryptogramWrapper.mainMenu)
}

// bytes gameModels = 6;
inline void CryptogramWrapper::clear_gamemodels() {
  gamemodels_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CryptogramWrapper::gamemodels() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.gameModels)
  return _internal_gamemodels();
}
inline void CryptogramWrapper::set_gamemodels(const std::string& value) {
  _internal_set_gamemodels(value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.gameModels)
}
inline std::string* CryptogramWrapper::mutable_gamemodels() {
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.gameModels)
  return _internal_mutable_gamemodels();
}
inline const std::string& CryptogramWrapper::_internal_gamemodels() const {
  return gamemodels_.Get();
}
inline void CryptogramWrapper::_internal_set_gamemodels(const std::string& value) {
  
  gamemodels_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CryptogramWrapper::set_gamemodels(std::string&& value) {
  
  gamemodels_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CryptogramWrapper.gameModels)
}
inline void CryptogramWrapper::set_gamemodels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gamemodels_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.gameModels)
}
inline void CryptogramWrapper::set_gamemodels(const void* value,
    size_t size) {
  
  gamemodels_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.gameModels)
}
inline std::string* CryptogramWrapper::_internal_mutable_gamemodels() {
  
  return gamemodels_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CryptogramWrapper::release_gamemodels() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.gameModels)
  return gamemodels_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CryptogramWrapper::set_allocated_gamemodels(std::string* gamemodels) {
  if (gamemodels != nullptr) {
    
  } else {
    
  }
  gamemodels_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamemodels,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.gameModels)
}
inline std::string* CryptogramWrapper::unsafe_arena_release_gamemodels() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CryptogramWrapper.gameModels)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gamemodels_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CryptogramWrapper::unsafe_arena_set_allocated_gamemodels(
    std::string* gamemodels) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gamemodels != nullptr) {
    
  } else {
    
  }
  gamemodels_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gamemodels, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CryptogramWrapper.gameModels)
}

// -------------------------------------------------------------------

// Wrapper

// .Utility utility = 1;
inline bool Wrapper::_internal_has_utility() const {
  return this != internal_default_instance() && utility_ != nullptr;
}
inline bool Wrapper::has_utility() const {
  return _internal_has_utility();
}
inline const ::Utility& Wrapper::_internal_utility() const {
  const ::Utility* p = utility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Utility*>(
      &::_Utility_default_instance_);
}
inline const ::Utility& Wrapper::utility() const {
  // @@protoc_insertion_point(field_get:Wrapper.utility)
  return _internal_utility();
}
inline void Wrapper::unsafe_arena_set_allocated_utility(
    ::Utility* utility) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utility_);
  }
  utility_ = utility;
  if (utility) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.utility)
}
inline ::Utility* Wrapper::release_utility() {
  auto temp = unsafe_arena_release_utility();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Utility* Wrapper::unsafe_arena_release_utility() {
  // @@protoc_insertion_point(field_release:Wrapper.utility)
  
  ::Utility* temp = utility_;
  utility_ = nullptr;
  return temp;
}
inline ::Utility* Wrapper::_internal_mutable_utility() {
  
  if (utility_ == nullptr) {
    auto* p = CreateMaybeMessage<::Utility>(GetArena());
    utility_ = p;
  }
  return utility_;
}
inline ::Utility* Wrapper::mutable_utility() {
  // @@protoc_insertion_point(field_mutable:Wrapper.utility)
  return _internal_mutable_utility();
}
inline void Wrapper::set_allocated_utility(::Utility* utility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utility_);
  }
  if (utility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utility)->GetArena();
    if (message_arena != submessage_arena) {
      utility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utility, submessage_arena);
    }
    
  } else {
    
  }
  utility_ = utility;
  // @@protoc_insertion_point(field_set_allocated:Wrapper.utility)
}

// .InputChecking inputChecking = 2;
inline bool Wrapper::_internal_has_inputchecking() const {
  return this != internal_default_instance() && inputchecking_ != nullptr;
}
inline bool Wrapper::has_inputchecking() const {
  return _internal_has_inputchecking();
}
inline const ::InputChecking& Wrapper::_internal_inputchecking() const {
  const ::InputChecking* p = inputchecking_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InputChecking*>(
      &::_InputChecking_default_instance_);
}
inline const ::InputChecking& Wrapper::inputchecking() const {
  // @@protoc_insertion_point(field_get:Wrapper.inputChecking)
  return _internal_inputchecking();
}
inline void Wrapper::unsafe_arena_set_allocated_inputchecking(
    ::InputChecking* inputchecking) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputchecking_);
  }
  inputchecking_ = inputchecking;
  if (inputchecking) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.inputChecking)
}
inline ::InputChecking* Wrapper::release_inputchecking() {
  auto temp = unsafe_arena_release_inputchecking();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InputChecking* Wrapper::unsafe_arena_release_inputchecking() {
  // @@protoc_insertion_point(field_release:Wrapper.inputChecking)
  
  ::InputChecking* temp = inputchecking_;
  inputchecking_ = nullptr;
  return temp;
}
inline ::InputChecking* Wrapper::_internal_mutable_inputchecking() {
  
  if (inputchecking_ == nullptr) {
    auto* p = CreateMaybeMessage<::InputChecking>(GetArena());
    inputchecking_ = p;
  }
  return inputchecking_;
}
inline ::InputChecking* Wrapper::mutable_inputchecking() {
  // @@protoc_insertion_point(field_mutable:Wrapper.inputChecking)
  return _internal_mutable_inputchecking();
}
inline void Wrapper::set_allocated_inputchecking(::InputChecking* inputchecking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputchecking_);
  }
  if (inputchecking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputchecking)->GetArena();
    if (message_arena != submessage_arena) {
      inputchecking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inputchecking, submessage_arena);
    }
    
  } else {
    
  }
  inputchecking_ = inputchecking;
  // @@protoc_insertion_point(field_set_allocated:Wrapper.inputChecking)
}

// .Registration registration = 3;
inline bool Wrapper::_internal_has_registration() const {
  return this != internal_default_instance() && registration_ != nullptr;
}
inline bool Wrapper::has_registration() const {
  return _internal_has_registration();
}
inline const ::Registration& Wrapper::_internal_registration() const {
  const ::Registration* p = registration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Registration*>(
      &::_Registration_default_instance_);
}
inline const ::Registration& Wrapper::registration() const {
  // @@protoc_insertion_point(field_get:Wrapper.registration)
  return _internal_registration();
}
inline void Wrapper::unsafe_arena_set_allocated_registration(
    ::Registration* registration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(registration_);
  }
  registration_ = registration;
  if (registration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.registration)
}
inline ::Registration* Wrapper::release_registration() {
  auto temp = unsafe_arena_release_registration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Registration* Wrapper::unsafe_arena_release_registration() {
  // @@protoc_insertion_point(field_release:Wrapper.registration)
  
  ::Registration* temp = registration_;
  registration_ = nullptr;
  return temp;
}
inline ::Registration* Wrapper::_internal_mutable_registration() {
  
  if (registration_ == nullptr) {
    auto* p = CreateMaybeMessage<::Registration>(GetArena());
    registration_ = p;
  }
  return registration_;
}
inline ::Registration* Wrapper::mutable_registration() {
  // @@protoc_insertion_point(field_mutable:Wrapper.registration)
  return _internal_mutable_registration();
}
inline void Wrapper::set_allocated_registration(::Registration* registration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(registration_);
  }
  if (registration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(registration)->GetArena();
    if (message_arena != submessage_arena) {
      registration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registration, submessage_arena);
    }
    
  } else {
    
  }
  registration_ = registration;
  // @@protoc_insertion_point(field_set_allocated:Wrapper.registration)
}

// .Login login = 4;
inline bool Wrapper::_internal_has_login() const {
  return this != internal_default_instance() && login_ != nullptr;
}
inline bool Wrapper::has_login() const {
  return _internal_has_login();
}
inline const ::Login& Wrapper::_internal_login() const {
  const ::Login* p = login_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Login*>(
      &::_Login_default_instance_);
}
inline const ::Login& Wrapper::login() const {
  // @@protoc_insertion_point(field_get:Wrapper.login)
  return _internal_login();
}
inline void Wrapper::unsafe_arena_set_allocated_login(
    ::Login* login) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_);
  }
  login_ = login;
  if (login) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.login)
}
inline ::Login* Wrapper::release_login() {
  auto temp = unsafe_arena_release_login();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Login* Wrapper::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_release:Wrapper.login)
  
  ::Login* temp = login_;
  login_ = nullptr;
  return temp;
}
inline ::Login* Wrapper::_internal_mutable_login() {
  
  if (login_ == nullptr) {
    auto* p = CreateMaybeMessage<::Login>(GetArena());
    login_ = p;
  }
  return login_;
}
inline ::Login* Wrapper::mutable_login() {
  // @@protoc_insertion_point(field_mutable:Wrapper.login)
  return _internal_mutable_login();
}
inline void Wrapper::set_allocated_login(::Login* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_);
  }
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login)->GetArena();
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    
  } else {
    
  }
  login_ = login;
  // @@protoc_insertion_point(field_set_allocated:Wrapper.login)
}

// .CryptogramWrapper cryptogramWrapper = 5;
inline bool Wrapper::_internal_has_cryptogramwrapper() const {
  return this != internal_default_instance() && cryptogramwrapper_ != nullptr;
}
inline bool Wrapper::has_cryptogramwrapper() const {
  return _internal_has_cryptogramwrapper();
}
inline void Wrapper::clear_cryptogramwrapper() {
  if (GetArena() == nullptr && cryptogramwrapper_ != nullptr) {
    delete cryptogramwrapper_;
  }
  cryptogramwrapper_ = nullptr;
}
inline const ::CryptogramWrapper& Wrapper::_internal_cryptogramwrapper() const {
  const ::CryptogramWrapper* p = cryptogramwrapper_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CryptogramWrapper*>(
      &::_CryptogramWrapper_default_instance_);
}
inline const ::CryptogramWrapper& Wrapper::cryptogramwrapper() const {
  // @@protoc_insertion_point(field_get:Wrapper.cryptogramWrapper)
  return _internal_cryptogramwrapper();
}
inline void Wrapper::unsafe_arena_set_allocated_cryptogramwrapper(
    ::CryptogramWrapper* cryptogramwrapper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogramwrapper_);
  }
  cryptogramwrapper_ = cryptogramwrapper;
  if (cryptogramwrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.cryptogramWrapper)
}
inline ::CryptogramWrapper* Wrapper::release_cryptogramwrapper() {
  auto temp = unsafe_arena_release_cryptogramwrapper();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CryptogramWrapper* Wrapper::unsafe_arena_release_cryptogramwrapper() {
  // @@protoc_insertion_point(field_release:Wrapper.cryptogramWrapper)
  
  ::CryptogramWrapper* temp = cryptogramwrapper_;
  cryptogramwrapper_ = nullptr;
  return temp;
}
inline ::CryptogramWrapper* Wrapper::_internal_mutable_cryptogramwrapper() {
  
  if (cryptogramwrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::CryptogramWrapper>(GetArena());
    cryptogramwrapper_ = p;
  }
  return cryptogramwrapper_;
}
inline ::CryptogramWrapper* Wrapper::mutable_cryptogramwrapper() {
  // @@protoc_insertion_point(field_mutable:Wrapper.cryptogramWrapper)
  return _internal_mutable_cryptogramwrapper();
}
inline void Wrapper::set_allocated_cryptogramwrapper(::CryptogramWrapper* cryptogramwrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cryptogramwrapper_;
  }
  if (cryptogramwrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cryptogramwrapper);
    if (message_arena != submessage_arena) {
      cryptogramwrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogramwrapper, submessage_arena);
    }
    
  } else {
    
  }
  cryptogramwrapper_ = cryptogramwrapper;
  // @@protoc_insertion_point(field_set_allocated:Wrapper.cryptogramWrapper)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageModels_2eproto
