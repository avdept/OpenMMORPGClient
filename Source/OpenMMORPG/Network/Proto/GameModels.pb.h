// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameModels.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameModels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameModels_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "DisableWarnings.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameModels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameModels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameModels_2eproto;
class GameData;
class GameDataDefaultTypeInternal;
extern GameDataDefaultTypeInternal _GameData_default_instance_;
class GameInitialState;
class GameInitialStateDefaultTypeInternal;
extern GameInitialStateDefaultTypeInternal _GameInitialState_default_instance_;
class Ping;
class PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerPosition;
class PlayerPositionDefaultTypeInternal;
extern PlayerPositionDefaultTypeInternal _PlayerPosition_default_instance_;
class PlayerPosition_Location;
class PlayerPosition_LocationDefaultTypeInternal;
extern PlayerPosition_LocationDefaultTypeInternal _PlayerPosition_Location_default_instance_;
class PlayerPosition_Rotation;
class PlayerPosition_RotationDefaultTypeInternal;
extern PlayerPosition_RotationDefaultTypeInternal _PlayerPosition_Rotation_default_instance_;
class Shot;
class ShotDefaultTypeInternal;
extern ShotDefaultTypeInternal _Shot_default_instance_;
class Shot_End;
class Shot_EndDefaultTypeInternal;
extern Shot_EndDefaultTypeInternal _Shot_End_default_instance_;
class Shot_Start;
class Shot_StartDefaultTypeInternal;
extern Shot_StartDefaultTypeInternal _Shot_Start_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GameData* Arena::CreateMaybeMessage<::GameData>(Arena*);
template<> ::GameInitialState* Arena::CreateMaybeMessage<::GameInitialState>(Arena*);
template<> ::Ping* Arena::CreateMaybeMessage<::Ping>(Arena*);
template<> ::Player* Arena::CreateMaybeMessage<::Player>(Arena*);
template<> ::PlayerPosition* Arena::CreateMaybeMessage<::PlayerPosition>(Arena*);
template<> ::PlayerPosition_Location* Arena::CreateMaybeMessage<::PlayerPosition_Location>(Arena*);
template<> ::PlayerPosition_Rotation* Arena::CreateMaybeMessage<::PlayerPosition_Rotation>(Arena*);
template<> ::Shot* Arena::CreateMaybeMessage<::Shot>(Arena*);
template<> ::Shot_End* Arena::CreateMaybeMessage<::Shot_End>(Arena*);
template<> ::Shot_Start* Arena::CreateMaybeMessage<::Shot_Start>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class GameInitialState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameInitialState) */ {
 public:
  inline GameInitialState() : GameInitialState(nullptr) {};
  virtual ~GameInitialState();

  GameInitialState(const GameInitialState& from);
  GameInitialState(GameInitialState&& from) noexcept
    : GameInitialState() {
    *this = ::std::move(from);
  }

  inline GameInitialState& operator=(const GameInitialState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameInitialState& operator=(GameInitialState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameInitialState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInitialState* internal_default_instance() {
    return reinterpret_cast<const GameInitialState*>(
               &_GameInitialState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameInitialState& a, GameInitialState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameInitialState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameInitialState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameInitialState* New() const final {
    return CreateMaybeMessage<GameInitialState>(nullptr);
  }

  GameInitialState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameInitialState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameInitialState& from);
  void MergeFrom(const GameInitialState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInitialState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameInitialState";
  }
  protected:
  explicit GameInitialState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameModels_2eproto);
    return ::descriptor_table_GameModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kStartGameFieldNumber = 1,
  };
  // repeated .Player player = 2;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::Player* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >*
      mutable_player();
  private:
  const ::Player& _internal_player(int index) const;
  ::Player* _internal_add_player();
  public:
  const ::Player& player(int index) const;
  ::Player* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >&
      player() const;

  // bool startGame = 1;
  void clear_startgame();
  bool startgame() const;
  void set_startgame(bool value);
  private:
  bool _internal_startgame() const;
  void _internal_set_startgame(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GameInitialState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player > player_;
  bool startgame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameModels_2eproto;
};
// -------------------------------------------------------------------

class Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player) */ {
 public:
  inline Player() : Player(nullptr) {};
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameModels_2eproto);
    return ::descriptor_table_GameModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
    kTeamFieldNumber = 2,
    kPlayerPositionFieldNumber = 4,
    kHealthFieldNumber = 3,
  };
  // string player_name = 1;
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_player_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_player_name(
      std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // string team = 2;
  void clear_team();
  const std::string& team() const;
  void set_team(const std::string& value);
  void set_team(std::string&& value);
  void set_team(const char* value);
  void set_team(const char* value, size_t size);
  std::string* mutable_team();
  std::string* release_team();
  void set_allocated_team(std::string* team);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_team();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_team(
      std::string* team);
  private:
  const std::string& _internal_team() const;
  void _internal_set_team(const std::string& value);
  std::string* _internal_mutable_team();
  public:

  // .PlayerPosition playerPosition = 4;
  bool has_playerposition() const;
  private:
  bool _internal_has_playerposition() const;
  public:
  void clear_playerposition();
  const ::PlayerPosition& playerposition() const;
  ::PlayerPosition* release_playerposition();
  ::PlayerPosition* mutable_playerposition();
  void set_allocated_playerposition(::PlayerPosition* playerposition);
  private:
  const ::PlayerPosition& _internal_playerposition() const;
  ::PlayerPosition* _internal_mutable_playerposition();
  public:
  void unsafe_arena_set_allocated_playerposition(
      ::PlayerPosition* playerposition);
  ::PlayerPosition* unsafe_arena_release_playerposition();

  // int32 health = 3;
  void clear_health();
  ::PROTOBUF_NAMESPACE_ID::int32 health() const;
  void set_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_health() const;
  void _internal_set_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_;
  ::PlayerPosition* playerposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameModels_2eproto;
};
// -------------------------------------------------------------------

class PlayerPosition_Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerPosition.Location) */ {
 public:
  inline PlayerPosition_Location() : PlayerPosition_Location(nullptr) {};
  virtual ~PlayerPosition_Location();

  PlayerPosition_Location(const PlayerPosition_Location& from);
  PlayerPosition_Location(PlayerPosition_Location&& from) noexcept
    : PlayerPosition_Location() {
    *this = ::std::move(from);
  }

  inline PlayerPosition_Location& operator=(const PlayerPosition_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerPosition_Location& operator=(PlayerPosition_Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerPosition_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerPosition_Location* internal_default_instance() {
    return reinterpret_cast<const PlayerPosition_Location*>(
               &_PlayerPosition_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerPosition_Location& a, PlayerPosition_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerPosition_Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerPosition_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerPosition_Location* New() const final {
    return CreateMaybeMessage<PlayerPosition_Location>(nullptr);
  }

  PlayerPosition_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerPosition_Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerPosition_Location& from);
  void MergeFrom(const PlayerPosition_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPosition_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerPosition.Location";
  }
  protected:
  explicit PlayerPosition_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameModels_2eproto);
    return ::descriptor_table_GameModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 X = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Z = 3;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerPosition.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameModels_2eproto;
};
// -------------------------------------------------------------------

class PlayerPosition_Rotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerPosition.Rotation) */ {
 public:
  inline PlayerPosition_Rotation() : PlayerPosition_Rotation(nullptr) {};
  virtual ~PlayerPosition_Rotation();

  PlayerPosition_Rotation(const PlayerPosition_Rotation& from);
  PlayerPosition_Rotation(PlayerPosition_Rotation&& from) noexcept
    : PlayerPosition_Rotation() {
    *this = ::std::move(from);
  }

  inline PlayerPosition_Rotation& operator=(const PlayerPosition_Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerPosition_Rotation& operator=(PlayerPosition_Rotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerPosition_Rotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerPosition_Rotation* internal_default_instance() {
    return reinterpret_cast<const PlayerPosition_Rotation*>(
               &_PlayerPosition_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerPosition_Rotation& a, PlayerPosition_Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerPosition_Rotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerPosition_Rotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerPosition_Rotation* New() const final {
    return CreateMaybeMessage<PlayerPosition_Rotation>(nullptr);
  }

  PlayerPosition_Rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerPosition_Rotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerPosition_Rotation& from);
  void MergeFrom(const PlayerPosition_Rotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPosition_Rotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerPosition.Rotation";
  }
  protected:
  explicit PlayerPosition_Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameModels_2eproto);
    return ::descriptor_table_GameModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPitchFieldNumber = 1,
    kRollFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // int32 Pitch = 1;
  void clear_pitch();
  ::PROTOBUF_NAMESPACE_ID::int32 pitch() const;
  void set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pitch() const;
  void _internal_set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Roll = 2;
  void clear_roll();
  ::PROTOBUF_NAMESPACE_ID::int32 roll() const;
  void set_roll(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roll() const;
  void _internal_set_roll(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Yaw = 3;
  void clear_yaw();
  ::PROTOBUF_NAMESPACE_ID::int32 yaw() const;
  void set_yaw(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yaw() const;
  void _internal_set_yaw(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerPosition.Rotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_;
  ::PROTOBUF_NAMESPACE_ID::int32 roll_;
  ::PROTOBUF_NAMESPACE_ID::int32 yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameModels_2eproto;
};
// -------------------------------------------------------------------

class PlayerPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerPosition) */ {
 public:
  inline PlayerPosition() : PlayerPosition(nullptr) {};
  virtual ~PlayerPosition();

  PlayerPosition(const PlayerPosition& from);
  PlayerPosition(PlayerPosition&& from) noexcept
    : PlayerPosition() {
    *this = ::std::move(from);
  }

  inline PlayerPosition& operator=(const PlayerPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerPosition& operator=(PlayerPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerPosition* internal_default_instance() {
    return reinterpret_cast<const PlayerPosition*>(
               &_PlayerPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerPosition& a, PlayerPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerPosition* New() const final {
    return CreateMaybeMessage<PlayerPosition>(nullptr);
  }

  PlayerPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerPosition& from);
  void MergeFrom(const PlayerPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerPosition";
  }
  protected:
  explicit PlayerPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameModels_2eproto);
    return ::descriptor_table_GameModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PlayerPosition_Location Location;
  typedef PlayerPosition_Rotation Rotation;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 3,
    kLocFieldNumber = 1,
    kRotFieldNumber = 2,
    kTimeStampFieldNumber = 4,
  };
  // string playerName = 3;
  void clear_playername();
  const std::string& playername() const;
  void set_playername(const std::string& value);
  void set_playername(std::string&& value);
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  std::string* mutable_playername();
  std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_playername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_playername(
      std::string* playername);
  private:
  const std::string& _internal_playername() const;
  void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // .PlayerPosition.Location loc = 1;
  bool has_loc() const;
  private:
  bool _internal_has_loc() const;
  public:
  void clear_loc();
  const ::PlayerPosition_Location& loc() const;
  ::PlayerPosition_Location* release_loc();
  ::PlayerPosition_Location* mutable_loc();
  void set_allocated_loc(::PlayerPosition_Location* loc);
  private:
  const ::PlayerPosition_Location& _internal_loc() const;
  ::PlayerPosition_Location* _internal_mutable_loc();
  public:
  void unsafe_arena_set_allocated_loc(
      ::PlayerPosition_Location* loc);
  ::PlayerPosition_Location* unsafe_arena_release_loc();

  // .PlayerPosition.Rotation rot = 2;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  const ::PlayerPosition_Rotation& rot() const;
  ::PlayerPosition_Rotation* release_rot();
  ::PlayerPosition_Rotation* mutable_rot();
  void set_allocated_rot(::PlayerPosition_Rotation* rot);
  private:
  const ::PlayerPosition_Rotation& _internal_rot() const;
  ::PlayerPosition_Rotation* _internal_mutable_rot();
  public:
  void unsafe_arena_set_allocated_rot(
      ::PlayerPosition_Rotation* rot);
  ::PlayerPosition_Rotation* unsafe_arena_release_rot();

  // int64 timeStamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::PlayerPosition_Location* loc_;
  ::PlayerPosition_Rotation* rot_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameModels_2eproto;
};
// -------------------------------------------------------------------

class Ping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {};
  virtual ~Ping();

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return CreateMaybeMessage<Ping>(nullptr);
  }

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameModels_2eproto);
    return ::descriptor_table_GameModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameModels_2eproto;
};
// -------------------------------------------------------------------

class Shot_Start PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shot.Start) */ {
 public:
  inline Shot_Start() : Shot_Start(nullptr) {};
  virtual ~Shot_Start();

  Shot_Start(const Shot_Start& from);
  Shot_Start(Shot_Start&& from) noexcept
    : Shot_Start() {
    *this = ::std::move(from);
  }

  inline Shot_Start& operator=(const Shot_Start& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shot_Start& operator=(Shot_Start&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shot_Start& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shot_Start* internal_default_instance() {
    return reinterpret_cast<const Shot_Start*>(
               &_Shot_Start_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Shot_Start& a, Shot_Start& b) {
    a.Swap(&b);
  }
  inline void Swap(Shot_Start* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shot_Start* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shot_Start* New() const final {
    return CreateMaybeMessage<Shot_Start>(nullptr);
  }

  Shot_Start* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shot_Start>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shot_Start& from);
  void MergeFrom(const Shot_Start& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shot_Start* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shot.Start";
  }
  protected:
  explicit Shot_Start(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameModels_2eproto);
    return ::descriptor_table_GameModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 X = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Z = 3;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Shot.Start)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameModels_2eproto;
};
// -------------------------------------------------------------------

class Shot_End PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shot.End) */ {
 public:
  inline Shot_End() : Shot_End(nullptr) {};
  virtual ~Shot_End();

  Shot_End(const Shot_End& from);
  Shot_End(Shot_End&& from) noexcept
    : Shot_End() {
    *this = ::std::move(from);
  }

  inline Shot_End& operator=(const Shot_End& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shot_End& operator=(Shot_End&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shot_End& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shot_End* internal_default_instance() {
    return reinterpret_cast<const Shot_End*>(
               &_Shot_End_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Shot_End& a, Shot_End& b) {
    a.Swap(&b);
  }
  inline void Swap(Shot_End* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shot_End* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shot_End* New() const final {
    return CreateMaybeMessage<Shot_End>(nullptr);
  }

  Shot_End* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shot_End>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shot_End& from);
  void MergeFrom(const Shot_End& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shot_End* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shot.End";
  }
  protected:
  explicit Shot_End(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameModels_2eproto);
    return ::descriptor_table_GameModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 X = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Z = 3;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Shot.End)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameModels_2eproto;
};
// -------------------------------------------------------------------

class Shot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shot) */ {
 public:
  inline Shot() : Shot(nullptr) {};
  virtual ~Shot();

  Shot(const Shot& from);
  Shot(Shot&& from) noexcept
    : Shot() {
    *this = ::std::move(from);
  }

  inline Shot& operator=(const Shot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shot& operator=(Shot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shot& default_instance();

  enum V1Case {
    kResultHitState = 8,
    V1_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shot* internal_default_instance() {
    return reinterpret_cast<const Shot*>(
               &_Shot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Shot& a, Shot& b) {
    a.Swap(&b);
  }
  inline void Swap(Shot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shot* New() const final {
    return CreateMaybeMessage<Shot>(nullptr);
  }

  Shot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shot& from);
  void MergeFrom(const Shot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shot";
  }
  protected:
  explicit Shot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameModels_2eproto);
    return ::descriptor_table_GameModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Shot_Start Start;
  typedef Shot_End End;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFromFieldNumber = 5,
    kRequestToFieldNumber = 6,
    kRoomOwnerFieldNumber = 7,
    kResultBonenameFieldNumber = 9,
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kPlayerPositionFieldNumber = 3,
    kTimeStampFieldNumber = 4,
    kResultHitStateFieldNumber = 8,
  };
  // string requestFrom = 5;
  void clear_requestfrom();
  const std::string& requestfrom() const;
  void set_requestfrom(const std::string& value);
  void set_requestfrom(std::string&& value);
  void set_requestfrom(const char* value);
  void set_requestfrom(const char* value, size_t size);
  std::string* mutable_requestfrom();
  std::string* release_requestfrom();
  void set_allocated_requestfrom(std::string* requestfrom);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_requestfrom();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_requestfrom(
      std::string* requestfrom);
  private:
  const std::string& _internal_requestfrom() const;
  void _internal_set_requestfrom(const std::string& value);
  std::string* _internal_mutable_requestfrom();
  public:

  // string requestTo = 6;
  void clear_requestto();
  const std::string& requestto() const;
  void set_requestto(const std::string& value);
  void set_requestto(std::string&& value);
  void set_requestto(const char* value);
  void set_requestto(const char* value, size_t size);
  std::string* mutable_requestto();
  std::string* release_requestto();
  void set_allocated_requestto(std::string* requestto);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_requestto();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_requestto(
      std::string* requestto);
  private:
  const std::string& _internal_requestto() const;
  void _internal_set_requestto(const std::string& value);
  std::string* _internal_mutable_requestto();
  public:

  // string roomOwner = 7;
  void clear_roomowner();
  const std::string& roomowner() const;
  void set_roomowner(const std::string& value);
  void set_roomowner(std::string&& value);
  void set_roomowner(const char* value);
  void set_roomowner(const char* value, size_t size);
  std::string* mutable_roomowner();
  std::string* release_roomowner();
  void set_allocated_roomowner(std::string* roomowner);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomowner();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomowner(
      std::string* roomowner);
  private:
  const std::string& _internal_roomowner() const;
  void _internal_set_roomowner(const std::string& value);
  std::string* _internal_mutable_roomowner();
  public:

  // string result_bonename = 9;
  void clear_result_bonename();
  const std::string& result_bonename() const;
  void set_result_bonename(const std::string& value);
  void set_result_bonename(std::string&& value);
  void set_result_bonename(const char* value);
  void set_result_bonename(const char* value, size_t size);
  std::string* mutable_result_bonename();
  std::string* release_result_bonename();
  void set_allocated_result_bonename(std::string* result_bonename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result_bonename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result_bonename(
      std::string* result_bonename);
  private:
  const std::string& _internal_result_bonename() const;
  void _internal_set_result_bonename(const std::string& value);
  std::string* _internal_mutable_result_bonename();
  public:

  // .Shot.Start start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::Shot_Start& start() const;
  ::Shot_Start* release_start();
  ::Shot_Start* mutable_start();
  void set_allocated_start(::Shot_Start* start);
  private:
  const ::Shot_Start& _internal_start() const;
  ::Shot_Start* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::Shot_Start* start);
  ::Shot_Start* unsafe_arena_release_start();

  // .Shot.End end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::Shot_End& end() const;
  ::Shot_End* release_end();
  ::Shot_End* mutable_end();
  void set_allocated_end(::Shot_End* end);
  private:
  const ::Shot_End& _internal_end() const;
  ::Shot_End* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::Shot_End* end);
  ::Shot_End* unsafe_arena_release_end();

  // .PlayerPosition playerPosition = 3;
  bool has_playerposition() const;
  private:
  bool _internal_has_playerposition() const;
  public:
  void clear_playerposition();
  const ::PlayerPosition& playerposition() const;
  ::PlayerPosition* release_playerposition();
  ::PlayerPosition* mutable_playerposition();
  void set_allocated_playerposition(::PlayerPosition* playerposition);
  private:
  const ::PlayerPosition& _internal_playerposition() const;
  ::PlayerPosition* _internal_mutable_playerposition();
  public:
  void unsafe_arena_set_allocated_playerposition(
      ::PlayerPosition* playerposition);
  ::PlayerPosition* unsafe_arena_release_playerposition();

  // int64 timeStamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool result_hitState = 8;
  private:
  bool _internal_has_result_hitstate() const;
  public:
  void clear_result_hitstate();
  bool result_hitstate() const;
  void set_result_hitstate(bool value);
  private:
  bool _internal_result_hitstate() const;
  void _internal_set_result_hitstate(bool value);
  public:

  void clear_v1();
  V1Case v1_case() const;
  // @@protoc_insertion_point(class_scope:Shot)
 private:
  class _Internal;
  void set_has_result_hitstate();

  inline bool has_v1() const;
  inline void clear_has_v1();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestfrom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestto_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomowner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_bonename_;
  ::Shot_Start* start_;
  ::Shot_End* end_;
  ::PlayerPosition* playerposition_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  union V1Union {
    V1Union() {}
    bool result_hitstate_;
  } v1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_GameModels_2eproto;
};
// -------------------------------------------------------------------

class GameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameData) */ {
 public:
  inline GameData() : GameData(nullptr) {};
  virtual ~GameData();

  GameData(const GameData& from);
  GameData(GameData&& from) noexcept
    : GameData() {
    *this = ::std::move(from);
  }

  inline GameData& operator=(const GameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameData& operator=(GameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameData* internal_default_instance() {
    return reinterpret_cast<const GameData*>(
               &_GameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GameData& a, GameData& b) {
    a.Swap(&b);
  }
  inline void Swap(GameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameData* New() const final {
    return CreateMaybeMessage<GameData>(nullptr);
  }

  GameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameData& from);
  void MergeFrom(const GameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameData";
  }
  protected:
  explicit GameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameModels_2eproto);
    return ::descriptor_table_GameModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameInitialStateFieldNumber = 1,
    kPlayerPositionFieldNumber = 2,
    kPingFieldNumber = 3,
    kShotFieldNumber = 4,
  };
  // .GameInitialState gameInitialState = 1;
  bool has_gameinitialstate() const;
  private:
  bool _internal_has_gameinitialstate() const;
  public:
  void clear_gameinitialstate();
  const ::GameInitialState& gameinitialstate() const;
  ::GameInitialState* release_gameinitialstate();
  ::GameInitialState* mutable_gameinitialstate();
  void set_allocated_gameinitialstate(::GameInitialState* gameinitialstate);
  private:
  const ::GameInitialState& _internal_gameinitialstate() const;
  ::GameInitialState* _internal_mutable_gameinitialstate();
  public:
  void unsafe_arena_set_allocated_gameinitialstate(
      ::GameInitialState* gameinitialstate);
  ::GameInitialState* unsafe_arena_release_gameinitialstate();

  // .PlayerPosition playerPosition = 2;
  bool has_playerposition() const;
  private:
  bool _internal_has_playerposition() const;
  public:
  void clear_playerposition();
  const ::PlayerPosition& playerposition() const;
  ::PlayerPosition* release_playerposition();
  ::PlayerPosition* mutable_playerposition();
  void set_allocated_playerposition(::PlayerPosition* playerposition);
  private:
  const ::PlayerPosition& _internal_playerposition() const;
  ::PlayerPosition* _internal_mutable_playerposition();
  public:
  void unsafe_arena_set_allocated_playerposition(
      ::PlayerPosition* playerposition);
  ::PlayerPosition* unsafe_arena_release_playerposition();

  // .Ping ping = 3;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::Ping& ping() const;
  ::Ping* release_ping();
  ::Ping* mutable_ping();
  void set_allocated_ping(::Ping* ping);
  private:
  const ::Ping& _internal_ping() const;
  ::Ping* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::Ping* ping);
  ::Ping* unsafe_arena_release_ping();

  // .Shot shot = 4;
  bool has_shot() const;
  private:
  bool _internal_has_shot() const;
  public:
  void clear_shot();
  const ::Shot& shot() const;
  ::Shot* release_shot();
  ::Shot* mutable_shot();
  void set_allocated_shot(::Shot* shot);
  private:
  const ::Shot& _internal_shot() const;
  ::Shot* _internal_mutable_shot();
  public:
  void unsafe_arena_set_allocated_shot(
      ::Shot* shot);
  ::Shot* unsafe_arena_release_shot();

  // @@protoc_insertion_point(class_scope:GameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GameInitialState* gameinitialstate_;
  ::PlayerPosition* playerposition_;
  ::Ping* ping_;
  ::Shot* shot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameModels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameInitialState

// bool startGame = 1;
inline void GameInitialState::clear_startgame() {
  startgame_ = false;
}
inline bool GameInitialState::_internal_startgame() const {
  return startgame_;
}
inline bool GameInitialState::startgame() const {
  // @@protoc_insertion_point(field_get:GameInitialState.startGame)
  return _internal_startgame();
}
inline void GameInitialState::_internal_set_startgame(bool value) {
  
  startgame_ = value;
}
inline void GameInitialState::set_startgame(bool value) {
  _internal_set_startgame(value);
  // @@protoc_insertion_point(field_set:GameInitialState.startGame)
}

// repeated .Player player = 2;
inline int GameInitialState::_internal_player_size() const {
  return player_.size();
}
inline int GameInitialState::player_size() const {
  return _internal_player_size();
}
inline void GameInitialState::clear_player() {
  player_.Clear();
}
inline ::Player* GameInitialState::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:GameInitialState.player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >*
GameInitialState::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:GameInitialState.player)
  return &player_;
}
inline const ::Player& GameInitialState::_internal_player(int index) const {
  return player_.Get(index);
}
inline const ::Player& GameInitialState::player(int index) const {
  // @@protoc_insertion_point(field_get:GameInitialState.player)
  return _internal_player(index);
}
inline ::Player* GameInitialState::_internal_add_player() {
  return player_.Add();
}
inline ::Player* GameInitialState::add_player() {
  // @@protoc_insertion_point(field_add:GameInitialState.player)
  return _internal_add_player();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >&
GameInitialState::player() const {
  // @@protoc_insertion_point(field_list:GameInitialState.player)
  return player_;
}

// -------------------------------------------------------------------

// Player

// string player_name = 1;
inline void Player::clear_player_name() {
  player_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Player::player_name() const {
  // @@protoc_insertion_point(field_get:Player.player_name)
  return _internal_player_name();
}
inline void Player::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:Player.player_name)
}
inline std::string* Player::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:Player.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& Player::_internal_player_name() const {
  return player_name_.Get();
}
inline void Player::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Player::set_player_name(std::string&& value) {
  
  player_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Player.player_name)
}
inline void Player::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Player.player_name)
}
inline void Player::set_player_name(const char* value,
    size_t size) {
  
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Player.player_name)
}
inline std::string* Player::_internal_mutable_player_name() {
  
  return player_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Player::release_player_name() {
  // @@protoc_insertion_point(field_release:Player.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Player::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Player.player_name)
}
inline std::string* Player::unsafe_arena_release_player_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Player.player_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return player_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Player::unsafe_arena_set_allocated_player_name(
    std::string* player_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      player_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.player_name)
}

// string team = 2;
inline void Player::clear_team() {
  team_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Player::team() const {
  // @@protoc_insertion_point(field_get:Player.team)
  return _internal_team();
}
inline void Player::set_team(const std::string& value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:Player.team)
}
inline std::string* Player::mutable_team() {
  // @@protoc_insertion_point(field_mutable:Player.team)
  return _internal_mutable_team();
}
inline const std::string& Player::_internal_team() const {
  return team_.Get();
}
inline void Player::_internal_set_team(const std::string& value) {
  
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Player::set_team(std::string&& value) {
  
  team_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Player.team)
}
inline void Player::set_team(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Player.team)
}
inline void Player::set_team(const char* value,
    size_t size) {
  
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Player.team)
}
inline std::string* Player::_internal_mutable_team() {
  
  return team_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Player::release_team() {
  // @@protoc_insertion_point(field_release:Player.team)
  return team_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Player::set_allocated_team(std::string* team) {
  if (team != nullptr) {
    
  } else {
    
  }
  team_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Player.team)
}
inline std::string* Player::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Player.team)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return team_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Player::unsafe_arena_set_allocated_team(
    std::string* team) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (team != nullptr) {
    
  } else {
    
  }
  team_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      team, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.team)
}

// int32 health = 3;
inline void Player::clear_health() {
  health_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_health() const {
  return health_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::health() const {
  // @@protoc_insertion_point(field_get:Player.health)
  return _internal_health();
}
inline void Player::_internal_set_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  health_ = value;
}
inline void Player::set_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:Player.health)
}

// .PlayerPosition playerPosition = 4;
inline bool Player::_internal_has_playerposition() const {
  return this != internal_default_instance() && playerposition_ != nullptr;
}
inline bool Player::has_playerposition() const {
  return _internal_has_playerposition();
}
inline void Player::clear_playerposition() {
  if (GetArena() == nullptr && playerposition_ != nullptr) {
    delete playerposition_;
  }
  playerposition_ = nullptr;
}
inline const ::PlayerPosition& Player::_internal_playerposition() const {
  const ::PlayerPosition* p = playerposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PlayerPosition*>(
      &::_PlayerPosition_default_instance_);
}
inline const ::PlayerPosition& Player::playerposition() const {
  // @@protoc_insertion_point(field_get:Player.playerPosition)
  return _internal_playerposition();
}
inline void Player::unsafe_arena_set_allocated_playerposition(
    ::PlayerPosition* playerposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerposition_);
  }
  playerposition_ = playerposition;
  if (playerposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.playerPosition)
}
inline ::PlayerPosition* Player::release_playerposition() {
  auto temp = unsafe_arena_release_playerposition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlayerPosition* Player::unsafe_arena_release_playerposition() {
  // @@protoc_insertion_point(field_release:Player.playerPosition)
  
  ::PlayerPosition* temp = playerposition_;
  playerposition_ = nullptr;
  return temp;
}
inline ::PlayerPosition* Player::_internal_mutable_playerposition() {
  
  if (playerposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerPosition>(GetArena());
    playerposition_ = p;
  }
  return playerposition_;
}
inline ::PlayerPosition* Player::mutable_playerposition() {
  // @@protoc_insertion_point(field_mutable:Player.playerPosition)
  return _internal_mutable_playerposition();
}
inline void Player::set_allocated_playerposition(::PlayerPosition* playerposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete playerposition_;
  }
  if (playerposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(playerposition);
    if (message_arena != submessage_arena) {
      playerposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerposition, submessage_arena);
    }
    
  } else {
    
  }
  playerposition_ = playerposition;
  // @@protoc_insertion_point(field_set_allocated:Player.playerPosition)
}

// -------------------------------------------------------------------

// PlayerPosition_Location

// int32 X = 1;
inline void PlayerPosition_Location::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Location::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Location::x() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Location.X)
  return _internal_x();
}
inline void PlayerPosition_Location::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void PlayerPosition_Location::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.Location.X)
}

// int32 Y = 2;
inline void PlayerPosition_Location::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Location::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Location::y() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Location.Y)
  return _internal_y();
}
inline void PlayerPosition_Location::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void PlayerPosition_Location::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.Location.Y)
}

// int32 Z = 3;
inline void PlayerPosition_Location::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Location::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Location::z() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Location.Z)
  return _internal_z();
}
inline void PlayerPosition_Location::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
}
inline void PlayerPosition_Location::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.Location.Z)
}

// -------------------------------------------------------------------

// PlayerPosition_Rotation

// int32 Pitch = 1;
inline void PlayerPosition_Rotation::clear_pitch() {
  pitch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Rotation::_internal_pitch() const {
  return pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Rotation::pitch() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Rotation.Pitch)
  return _internal_pitch();
}
inline void PlayerPosition_Rotation::_internal_set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pitch_ = value;
}
inline void PlayerPosition_Rotation::set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.Rotation.Pitch)
}

// int32 Roll = 2;
inline void PlayerPosition_Rotation::clear_roll() {
  roll_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Rotation::_internal_roll() const {
  return roll_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Rotation::roll() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Rotation.Roll)
  return _internal_roll();
}
inline void PlayerPosition_Rotation::_internal_set_roll(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roll_ = value;
}
inline void PlayerPosition_Rotation::set_roll(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.Rotation.Roll)
}

// int32 Yaw = 3;
inline void PlayerPosition_Rotation::clear_yaw() {
  yaw_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Rotation::_internal_yaw() const {
  return yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition_Rotation::yaw() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Rotation.Yaw)
  return _internal_yaw();
}
inline void PlayerPosition_Rotation::_internal_set_yaw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  yaw_ = value;
}
inline void PlayerPosition_Rotation::set_yaw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.Rotation.Yaw)
}

// -------------------------------------------------------------------

// PlayerPosition

// .PlayerPosition.Location loc = 1;
inline bool PlayerPosition::_internal_has_loc() const {
  return this != internal_default_instance() && loc_ != nullptr;
}
inline bool PlayerPosition::has_loc() const {
  return _internal_has_loc();
}
inline void PlayerPosition::clear_loc() {
  if (GetArena() == nullptr && loc_ != nullptr) {
    delete loc_;
  }
  loc_ = nullptr;
}
inline const ::PlayerPosition_Location& PlayerPosition::_internal_loc() const {
  const ::PlayerPosition_Location* p = loc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PlayerPosition_Location*>(
      &::_PlayerPosition_Location_default_instance_);
}
inline const ::PlayerPosition_Location& PlayerPosition::loc() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.loc)
  return _internal_loc();
}
inline void PlayerPosition::unsafe_arena_set_allocated_loc(
    ::PlayerPosition_Location* loc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loc_);
  }
  loc_ = loc;
  if (loc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerPosition.loc)
}
inline ::PlayerPosition_Location* PlayerPosition::release_loc() {
  auto temp = unsafe_arena_release_loc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlayerPosition_Location* PlayerPosition::unsafe_arena_release_loc() {
  // @@protoc_insertion_point(field_release:PlayerPosition.loc)
  
  ::PlayerPosition_Location* temp = loc_;
  loc_ = nullptr;
  return temp;
}
inline ::PlayerPosition_Location* PlayerPosition::_internal_mutable_loc() {
  
  if (loc_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerPosition_Location>(GetArena());
    loc_ = p;
  }
  return loc_;
}
inline ::PlayerPosition_Location* PlayerPosition::mutable_loc() {
  // @@protoc_insertion_point(field_mutable:PlayerPosition.loc)
  return _internal_mutable_loc();
}
inline void PlayerPosition::set_allocated_loc(::PlayerPosition_Location* loc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loc_;
  }
  if (loc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loc);
    if (message_arena != submessage_arena) {
      loc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loc, submessage_arena);
    }
    
  } else {
    
  }
  loc_ = loc;
  // @@protoc_insertion_point(field_set_allocated:PlayerPosition.loc)
}

// .PlayerPosition.Rotation rot = 2;
inline bool PlayerPosition::_internal_has_rot() const {
  return this != internal_default_instance() && rot_ != nullptr;
}
inline bool PlayerPosition::has_rot() const {
  return _internal_has_rot();
}
inline void PlayerPosition::clear_rot() {
  if (GetArena() == nullptr && rot_ != nullptr) {
    delete rot_;
  }
  rot_ = nullptr;
}
inline const ::PlayerPosition_Rotation& PlayerPosition::_internal_rot() const {
  const ::PlayerPosition_Rotation* p = rot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PlayerPosition_Rotation*>(
      &::_PlayerPosition_Rotation_default_instance_);
}
inline const ::PlayerPosition_Rotation& PlayerPosition::rot() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.rot)
  return _internal_rot();
}
inline void PlayerPosition::unsafe_arena_set_allocated_rot(
    ::PlayerPosition_Rotation* rot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rot_);
  }
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerPosition.rot)
}
inline ::PlayerPosition_Rotation* PlayerPosition::release_rot() {
  auto temp = unsafe_arena_release_rot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlayerPosition_Rotation* PlayerPosition::unsafe_arena_release_rot() {
  // @@protoc_insertion_point(field_release:PlayerPosition.rot)
  
  ::PlayerPosition_Rotation* temp = rot_;
  rot_ = nullptr;
  return temp;
}
inline ::PlayerPosition_Rotation* PlayerPosition::_internal_mutable_rot() {
  
  if (rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerPosition_Rotation>(GetArena());
    rot_ = p;
  }
  return rot_;
}
inline ::PlayerPosition_Rotation* PlayerPosition::mutable_rot() {
  // @@protoc_insertion_point(field_mutable:PlayerPosition.rot)
  return _internal_mutable_rot();
}
inline void PlayerPosition::set_allocated_rot(::PlayerPosition_Rotation* rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rot_;
  }
  if (rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rot);
    if (message_arena != submessage_arena) {
      rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot, submessage_arena);
    }
    
  } else {
    
  }
  rot_ = rot;
  // @@protoc_insertion_point(field_set_allocated:PlayerPosition.rot)
}

// string playerName = 3;
inline void PlayerPosition::clear_playername() {
  playername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerPosition::playername() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.playerName)
  return _internal_playername();
}
inline void PlayerPosition::set_playername(const std::string& value) {
  _internal_set_playername(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.playerName)
}
inline std::string* PlayerPosition::mutable_playername() {
  // @@protoc_insertion_point(field_mutable:PlayerPosition.playerName)
  return _internal_mutable_playername();
}
inline const std::string& PlayerPosition::_internal_playername() const {
  return playername_.Get();
}
inline void PlayerPosition::_internal_set_playername(const std::string& value) {
  
  playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerPosition::set_playername(std::string&& value) {
  
  playername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerPosition.playerName)
}
inline void PlayerPosition::set_playername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerPosition.playerName)
}
inline void PlayerPosition::set_playername(const char* value,
    size_t size) {
  
  playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerPosition.playerName)
}
inline std::string* PlayerPosition::_internal_mutable_playername() {
  
  return playername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerPosition::release_playername() {
  // @@protoc_insertion_point(field_release:PlayerPosition.playerName)
  return playername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerPosition::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerPosition.playerName)
}
inline std::string* PlayerPosition::unsafe_arena_release_playername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlayerPosition.playerName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return playername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerPosition::unsafe_arena_set_allocated_playername(
    std::string* playername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      playername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerPosition.playerName)
}

// int64 timeStamp = 4;
inline void PlayerPosition::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerPosition::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerPosition::timestamp() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.timeStamp)
  return _internal_timestamp();
}
inline void PlayerPosition::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void PlayerPosition::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.timeStamp)
}

// -------------------------------------------------------------------

// Ping

// int64 time = 1;
inline void Ping::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ping::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ping::time() const {
  // @@protoc_insertion_point(field_get:Ping.time)
  return _internal_time();
}
inline void Ping::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void Ping::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Ping.time)
}

// -------------------------------------------------------------------

// Shot_Start

// int32 X = 1;
inline void Shot_Start::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_Start::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_Start::x() const {
  // @@protoc_insertion_point(field_get:Shot.Start.X)
  return _internal_x();
}
inline void Shot_Start::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Shot_Start::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Shot.Start.X)
}

// int32 Y = 2;
inline void Shot_Start::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_Start::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_Start::y() const {
  // @@protoc_insertion_point(field_get:Shot.Start.Y)
  return _internal_y();
}
inline void Shot_Start::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Shot_Start::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Shot.Start.Y)
}

// int32 Z = 3;
inline void Shot_Start::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_Start::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_Start::z() const {
  // @@protoc_insertion_point(field_get:Shot.Start.Z)
  return _internal_z();
}
inline void Shot_Start::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
}
inline void Shot_Start::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Shot.Start.Z)
}

// -------------------------------------------------------------------

// Shot_End

// int32 X = 1;
inline void Shot_End::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_End::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_End::x() const {
  // @@protoc_insertion_point(field_get:Shot.End.X)
  return _internal_x();
}
inline void Shot_End::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Shot_End::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Shot.End.X)
}

// int32 Y = 2;
inline void Shot_End::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_End::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_End::y() const {
  // @@protoc_insertion_point(field_get:Shot.End.Y)
  return _internal_y();
}
inline void Shot_End::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Shot_End::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Shot.End.Y)
}

// int32 Z = 3;
inline void Shot_End::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_End::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shot_End::z() const {
  // @@protoc_insertion_point(field_get:Shot.End.Z)
  return _internal_z();
}
inline void Shot_End::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
}
inline void Shot_End::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Shot.End.Z)
}

// -------------------------------------------------------------------

// Shot

// .Shot.Start start = 1;
inline bool Shot::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool Shot::has_start() const {
  return _internal_has_start();
}
inline void Shot::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
inline const ::Shot_Start& Shot::_internal_start() const {
  const ::Shot_Start* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Shot_Start*>(
      &::_Shot_Start_default_instance_);
}
inline const ::Shot_Start& Shot::start() const {
  // @@protoc_insertion_point(field_get:Shot.start)
  return _internal_start();
}
inline void Shot::unsafe_arena_set_allocated_start(
    ::Shot_Start* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shot.start)
}
inline ::Shot_Start* Shot::release_start() {
  auto temp = unsafe_arena_release_start();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Shot_Start* Shot::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:Shot.start)
  
  ::Shot_Start* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::Shot_Start* Shot::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shot_Start>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::Shot_Start* Shot::mutable_start() {
  // @@protoc_insertion_point(field_mutable:Shot.start)
  return _internal_mutable_start();
}
inline void Shot::set_allocated_start(::Shot_Start* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:Shot.start)
}

// .Shot.End end = 2;
inline bool Shot::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool Shot::has_end() const {
  return _internal_has_end();
}
inline void Shot::clear_end() {
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
inline const ::Shot_End& Shot::_internal_end() const {
  const ::Shot_End* p = end_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Shot_End*>(
      &::_Shot_End_default_instance_);
}
inline const ::Shot_End& Shot::end() const {
  // @@protoc_insertion_point(field_get:Shot.end)
  return _internal_end();
}
inline void Shot::unsafe_arena_set_allocated_end(
    ::Shot_End* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shot.end)
}
inline ::Shot_End* Shot::release_end() {
  auto temp = unsafe_arena_release_end();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Shot_End* Shot::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:Shot.end)
  
  ::Shot_End* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::Shot_End* Shot::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shot_End>(GetArena());
    end_ = p;
  }
  return end_;
}
inline ::Shot_End* Shot::mutable_end() {
  // @@protoc_insertion_point(field_mutable:Shot.end)
  return _internal_mutable_end();
}
inline void Shot::set_allocated_end(::Shot_End* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:Shot.end)
}

// .PlayerPosition playerPosition = 3;
inline bool Shot::_internal_has_playerposition() const {
  return this != internal_default_instance() && playerposition_ != nullptr;
}
inline bool Shot::has_playerposition() const {
  return _internal_has_playerposition();
}
inline void Shot::clear_playerposition() {
  if (GetArena() == nullptr && playerposition_ != nullptr) {
    delete playerposition_;
  }
  playerposition_ = nullptr;
}
inline const ::PlayerPosition& Shot::_internal_playerposition() const {
  const ::PlayerPosition* p = playerposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PlayerPosition*>(
      &::_PlayerPosition_default_instance_);
}
inline const ::PlayerPosition& Shot::playerposition() const {
  // @@protoc_insertion_point(field_get:Shot.playerPosition)
  return _internal_playerposition();
}
inline void Shot::unsafe_arena_set_allocated_playerposition(
    ::PlayerPosition* playerposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerposition_);
  }
  playerposition_ = playerposition;
  if (playerposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shot.playerPosition)
}
inline ::PlayerPosition* Shot::release_playerposition() {
  auto temp = unsafe_arena_release_playerposition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlayerPosition* Shot::unsafe_arena_release_playerposition() {
  // @@protoc_insertion_point(field_release:Shot.playerPosition)
  
  ::PlayerPosition* temp = playerposition_;
  playerposition_ = nullptr;
  return temp;
}
inline ::PlayerPosition* Shot::_internal_mutable_playerposition() {
  
  if (playerposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerPosition>(GetArena());
    playerposition_ = p;
  }
  return playerposition_;
}
inline ::PlayerPosition* Shot::mutable_playerposition() {
  // @@protoc_insertion_point(field_mutable:Shot.playerPosition)
  return _internal_mutable_playerposition();
}
inline void Shot::set_allocated_playerposition(::PlayerPosition* playerposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete playerposition_;
  }
  if (playerposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(playerposition);
    if (message_arena != submessage_arena) {
      playerposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerposition, submessage_arena);
    }
    
  } else {
    
  }
  playerposition_ = playerposition;
  // @@protoc_insertion_point(field_set_allocated:Shot.playerPosition)
}

// int64 timeStamp = 4;
inline void Shot::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Shot::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Shot::timestamp() const {
  // @@protoc_insertion_point(field_get:Shot.timeStamp)
  return _internal_timestamp();
}
inline void Shot::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Shot::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Shot.timeStamp)
}

// string requestFrom = 5;
inline void Shot::clear_requestfrom() {
  requestfrom_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Shot::requestfrom() const {
  // @@protoc_insertion_point(field_get:Shot.requestFrom)
  return _internal_requestfrom();
}
inline void Shot::set_requestfrom(const std::string& value) {
  _internal_set_requestfrom(value);
  // @@protoc_insertion_point(field_set:Shot.requestFrom)
}
inline std::string* Shot::mutable_requestfrom() {
  // @@protoc_insertion_point(field_mutable:Shot.requestFrom)
  return _internal_mutable_requestfrom();
}
inline const std::string& Shot::_internal_requestfrom() const {
  return requestfrom_.Get();
}
inline void Shot::_internal_set_requestfrom(const std::string& value) {
  
  requestfrom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Shot::set_requestfrom(std::string&& value) {
  
  requestfrom_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Shot.requestFrom)
}
inline void Shot::set_requestfrom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestfrom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Shot.requestFrom)
}
inline void Shot::set_requestfrom(const char* value,
    size_t size) {
  
  requestfrom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Shot.requestFrom)
}
inline std::string* Shot::_internal_mutable_requestfrom() {
  
  return requestfrom_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Shot::release_requestfrom() {
  // @@protoc_insertion_point(field_release:Shot.requestFrom)
  return requestfrom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Shot::set_allocated_requestfrom(std::string* requestfrom) {
  if (requestfrom != nullptr) {
    
  } else {
    
  }
  requestfrom_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestfrom,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Shot.requestFrom)
}
inline std::string* Shot::unsafe_arena_release_requestfrom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Shot.requestFrom)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return requestfrom_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Shot::unsafe_arena_set_allocated_requestfrom(
    std::string* requestfrom) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (requestfrom != nullptr) {
    
  } else {
    
  }
  requestfrom_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      requestfrom, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shot.requestFrom)
}

// string requestTo = 6;
inline void Shot::clear_requestto() {
  requestto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Shot::requestto() const {
  // @@protoc_insertion_point(field_get:Shot.requestTo)
  return _internal_requestto();
}
inline void Shot::set_requestto(const std::string& value) {
  _internal_set_requestto(value);
  // @@protoc_insertion_point(field_set:Shot.requestTo)
}
inline std::string* Shot::mutable_requestto() {
  // @@protoc_insertion_point(field_mutable:Shot.requestTo)
  return _internal_mutable_requestto();
}
inline const std::string& Shot::_internal_requestto() const {
  return requestto_.Get();
}
inline void Shot::_internal_set_requestto(const std::string& value) {
  
  requestto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Shot::set_requestto(std::string&& value) {
  
  requestto_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Shot.requestTo)
}
inline void Shot::set_requestto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Shot.requestTo)
}
inline void Shot::set_requestto(const char* value,
    size_t size) {
  
  requestto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Shot.requestTo)
}
inline std::string* Shot::_internal_mutable_requestto() {
  
  return requestto_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Shot::release_requestto() {
  // @@protoc_insertion_point(field_release:Shot.requestTo)
  return requestto_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Shot::set_allocated_requestto(std::string* requestto) {
  if (requestto != nullptr) {
    
  } else {
    
  }
  requestto_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestto,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Shot.requestTo)
}
inline std::string* Shot::unsafe_arena_release_requestto() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Shot.requestTo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return requestto_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Shot::unsafe_arena_set_allocated_requestto(
    std::string* requestto) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (requestto != nullptr) {
    
  } else {
    
  }
  requestto_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      requestto, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shot.requestTo)
}

// string roomOwner = 7;
inline void Shot::clear_roomowner() {
  roomowner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Shot::roomowner() const {
  // @@protoc_insertion_point(field_get:Shot.roomOwner)
  return _internal_roomowner();
}
inline void Shot::set_roomowner(const std::string& value) {
  _internal_set_roomowner(value);
  // @@protoc_insertion_point(field_set:Shot.roomOwner)
}
inline std::string* Shot::mutable_roomowner() {
  // @@protoc_insertion_point(field_mutable:Shot.roomOwner)
  return _internal_mutable_roomowner();
}
inline const std::string& Shot::_internal_roomowner() const {
  return roomowner_.Get();
}
inline void Shot::_internal_set_roomowner(const std::string& value) {
  
  roomowner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Shot::set_roomowner(std::string&& value) {
  
  roomowner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Shot.roomOwner)
}
inline void Shot::set_roomowner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomowner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Shot.roomOwner)
}
inline void Shot::set_roomowner(const char* value,
    size_t size) {
  
  roomowner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Shot.roomOwner)
}
inline std::string* Shot::_internal_mutable_roomowner() {
  
  return roomowner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Shot::release_roomowner() {
  // @@protoc_insertion_point(field_release:Shot.roomOwner)
  return roomowner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Shot::set_allocated_roomowner(std::string* roomowner) {
  if (roomowner != nullptr) {
    
  } else {
    
  }
  roomowner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomowner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Shot.roomOwner)
}
inline std::string* Shot::unsafe_arena_release_roomowner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Shot.roomOwner)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomowner_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Shot::unsafe_arena_set_allocated_roomowner(
    std::string* roomowner) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomowner != nullptr) {
    
  } else {
    
  }
  roomowner_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomowner, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shot.roomOwner)
}

// bool result_hitState = 8;
inline bool Shot::_internal_has_result_hitstate() const {
  return v1_case() == kResultHitState;
}
inline void Shot::set_has_result_hitstate() {
  _oneof_case_[0] = kResultHitState;
}
inline void Shot::clear_result_hitstate() {
  if (_internal_has_result_hitstate()) {
    v1_.result_hitstate_ = false;
    clear_has_v1();
  }
}
inline bool Shot::_internal_result_hitstate() const {
  if (_internal_has_result_hitstate()) {
    return v1_.result_hitstate_;
  }
  return false;
}
inline void Shot::_internal_set_result_hitstate(bool value) {
  if (!_internal_has_result_hitstate()) {
    clear_v1();
    set_has_result_hitstate();
  }
  v1_.result_hitstate_ = value;
}
inline bool Shot::result_hitstate() const {
  // @@protoc_insertion_point(field_get:Shot.result_hitState)
  return _internal_result_hitstate();
}
inline void Shot::set_result_hitstate(bool value) {
  _internal_set_result_hitstate(value);
  // @@protoc_insertion_point(field_set:Shot.result_hitState)
}

// string result_bonename = 9;
inline void Shot::clear_result_bonename() {
  result_bonename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Shot::result_bonename() const {
  // @@protoc_insertion_point(field_get:Shot.result_bonename)
  return _internal_result_bonename();
}
inline void Shot::set_result_bonename(const std::string& value) {
  _internal_set_result_bonename(value);
  // @@protoc_insertion_point(field_set:Shot.result_bonename)
}
inline std::string* Shot::mutable_result_bonename() {
  // @@protoc_insertion_point(field_mutable:Shot.result_bonename)
  return _internal_mutable_result_bonename();
}
inline const std::string& Shot::_internal_result_bonename() const {
  return result_bonename_.Get();
}
inline void Shot::_internal_set_result_bonename(const std::string& value) {
  
  result_bonename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Shot::set_result_bonename(std::string&& value) {
  
  result_bonename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Shot.result_bonename)
}
inline void Shot::set_result_bonename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_bonename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Shot.result_bonename)
}
inline void Shot::set_result_bonename(const char* value,
    size_t size) {
  
  result_bonename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Shot.result_bonename)
}
inline std::string* Shot::_internal_mutable_result_bonename() {
  
  return result_bonename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Shot::release_result_bonename() {
  // @@protoc_insertion_point(field_release:Shot.result_bonename)
  return result_bonename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Shot::set_allocated_result_bonename(std::string* result_bonename) {
  if (result_bonename != nullptr) {
    
  } else {
    
  }
  result_bonename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_bonename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Shot.result_bonename)
}
inline std::string* Shot::unsafe_arena_release_result_bonename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Shot.result_bonename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_bonename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Shot::unsafe_arena_set_allocated_result_bonename(
    std::string* result_bonename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result_bonename != nullptr) {
    
  } else {
    
  }
  result_bonename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result_bonename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shot.result_bonename)
}

inline bool Shot::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
inline void Shot::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
inline Shot::V1Case Shot::v1_case() const {
  return Shot::V1Case(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GameData

// .GameInitialState gameInitialState = 1;
inline bool GameData::_internal_has_gameinitialstate() const {
  return this != internal_default_instance() && gameinitialstate_ != nullptr;
}
inline bool GameData::has_gameinitialstate() const {
  return _internal_has_gameinitialstate();
}
inline void GameData::clear_gameinitialstate() {
  if (GetArena() == nullptr && gameinitialstate_ != nullptr) {
    delete gameinitialstate_;
  }
  gameinitialstate_ = nullptr;
}
inline const ::GameInitialState& GameData::_internal_gameinitialstate() const {
  const ::GameInitialState* p = gameinitialstate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GameInitialState*>(
      &::_GameInitialState_default_instance_);
}
inline const ::GameInitialState& GameData::gameinitialstate() const {
  // @@protoc_insertion_point(field_get:GameData.gameInitialState)
  return _internal_gameinitialstate();
}
inline void GameData::unsafe_arena_set_allocated_gameinitialstate(
    ::GameInitialState* gameinitialstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameinitialstate_);
  }
  gameinitialstate_ = gameinitialstate;
  if (gameinitialstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameData.gameInitialState)
}
inline ::GameInitialState* GameData::release_gameinitialstate() {
  auto temp = unsafe_arena_release_gameinitialstate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GameInitialState* GameData::unsafe_arena_release_gameinitialstate() {
  // @@protoc_insertion_point(field_release:GameData.gameInitialState)
  
  ::GameInitialState* temp = gameinitialstate_;
  gameinitialstate_ = nullptr;
  return temp;
}
inline ::GameInitialState* GameData::_internal_mutable_gameinitialstate() {
  
  if (gameinitialstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameInitialState>(GetArena());
    gameinitialstate_ = p;
  }
  return gameinitialstate_;
}
inline ::GameInitialState* GameData::mutable_gameinitialstate() {
  // @@protoc_insertion_point(field_mutable:GameData.gameInitialState)
  return _internal_mutable_gameinitialstate();
}
inline void GameData::set_allocated_gameinitialstate(::GameInitialState* gameinitialstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gameinitialstate_;
  }
  if (gameinitialstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gameinitialstate);
    if (message_arena != submessage_arena) {
      gameinitialstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameinitialstate, submessage_arena);
    }
    
  } else {
    
  }
  gameinitialstate_ = gameinitialstate;
  // @@protoc_insertion_point(field_set_allocated:GameData.gameInitialState)
}

// .PlayerPosition playerPosition = 2;
inline bool GameData::_internal_has_playerposition() const {
  return this != internal_default_instance() && playerposition_ != nullptr;
}
inline bool GameData::has_playerposition() const {
  return _internal_has_playerposition();
}
inline void GameData::clear_playerposition() {
  if (GetArena() == nullptr && playerposition_ != nullptr) {
    delete playerposition_;
  }
  playerposition_ = nullptr;
}
inline const ::PlayerPosition& GameData::_internal_playerposition() const {
  const ::PlayerPosition* p = playerposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PlayerPosition*>(
      &::_PlayerPosition_default_instance_);
}
inline const ::PlayerPosition& GameData::playerposition() const {
  // @@protoc_insertion_point(field_get:GameData.playerPosition)
  return _internal_playerposition();
}
inline void GameData::unsafe_arena_set_allocated_playerposition(
    ::PlayerPosition* playerposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerposition_);
  }
  playerposition_ = playerposition;
  if (playerposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameData.playerPosition)
}
inline ::PlayerPosition* GameData::release_playerposition() {
  auto temp = unsafe_arena_release_playerposition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlayerPosition* GameData::unsafe_arena_release_playerposition() {
  // @@protoc_insertion_point(field_release:GameData.playerPosition)
  
  ::PlayerPosition* temp = playerposition_;
  playerposition_ = nullptr;
  return temp;
}
inline ::PlayerPosition* GameData::_internal_mutable_playerposition() {
  
  if (playerposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerPosition>(GetArena());
    playerposition_ = p;
  }
  return playerposition_;
}
inline ::PlayerPosition* GameData::mutable_playerposition() {
  // @@protoc_insertion_point(field_mutable:GameData.playerPosition)
  return _internal_mutable_playerposition();
}
inline void GameData::set_allocated_playerposition(::PlayerPosition* playerposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete playerposition_;
  }
  if (playerposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(playerposition);
    if (message_arena != submessage_arena) {
      playerposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerposition, submessage_arena);
    }
    
  } else {
    
  }
  playerposition_ = playerposition;
  // @@protoc_insertion_point(field_set_allocated:GameData.playerPosition)
}

// .Ping ping = 3;
inline bool GameData::_internal_has_ping() const {
  return this != internal_default_instance() && ping_ != nullptr;
}
inline bool GameData::has_ping() const {
  return _internal_has_ping();
}
inline void GameData::clear_ping() {
  if (GetArena() == nullptr && ping_ != nullptr) {
    delete ping_;
  }
  ping_ = nullptr;
}
inline const ::Ping& GameData::_internal_ping() const {
  const ::Ping* p = ping_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Ping*>(
      &::_Ping_default_instance_);
}
inline const ::Ping& GameData::ping() const {
  // @@protoc_insertion_point(field_get:GameData.ping)
  return _internal_ping();
}
inline void GameData::unsafe_arena_set_allocated_ping(
    ::Ping* ping) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_);
  }
  ping_ = ping;
  if (ping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameData.ping)
}
inline ::Ping* GameData::release_ping() {
  auto temp = unsafe_arena_release_ping();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Ping* GameData::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_release:GameData.ping)
  
  ::Ping* temp = ping_;
  ping_ = nullptr;
  return temp;
}
inline ::Ping* GameData::_internal_mutable_ping() {
  
  if (ping_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ping>(GetArena());
    ping_ = p;
  }
  return ping_;
}
inline ::Ping* GameData::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:GameData.ping)
  return _internal_mutable_ping();
}
inline void GameData::set_allocated_ping(::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ping_;
  }
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    
  } else {
    
  }
  ping_ = ping;
  // @@protoc_insertion_point(field_set_allocated:GameData.ping)
}

// .Shot shot = 4;
inline bool GameData::_internal_has_shot() const {
  return this != internal_default_instance() && shot_ != nullptr;
}
inline bool GameData::has_shot() const {
  return _internal_has_shot();
}
inline void GameData::clear_shot() {
  if (GetArena() == nullptr && shot_ != nullptr) {
    delete shot_;
  }
  shot_ = nullptr;
}
inline const ::Shot& GameData::_internal_shot() const {
  const ::Shot* p = shot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Shot*>(
      &::_Shot_default_instance_);
}
inline const ::Shot& GameData::shot() const {
  // @@protoc_insertion_point(field_get:GameData.shot)
  return _internal_shot();
}
inline void GameData::unsafe_arena_set_allocated_shot(
    ::Shot* shot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shot_);
  }
  shot_ = shot;
  if (shot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameData.shot)
}
inline ::Shot* GameData::release_shot() {
  auto temp = unsafe_arena_release_shot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Shot* GameData::unsafe_arena_release_shot() {
  // @@protoc_insertion_point(field_release:GameData.shot)
  
  ::Shot* temp = shot_;
  shot_ = nullptr;
  return temp;
}
inline ::Shot* GameData::_internal_mutable_shot() {
  
  if (shot_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shot>(GetArena());
    shot_ = p;
  }
  return shot_;
}
inline ::Shot* GameData::mutable_shot() {
  // @@protoc_insertion_point(field_mutable:GameData.shot)
  return _internal_mutable_shot();
}
inline void GameData::set_allocated_shot(::Shot* shot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shot_;
  }
  if (shot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shot);
    if (message_arena != submessage_arena) {
      shot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shot, submessage_arena);
    }
    
  } else {
    
  }
  shot_ = shot;
  // @@protoc_insertion_point(field_set_allocated:GameData.shot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameModels_2eproto
