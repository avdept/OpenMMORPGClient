// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegLogModels.proto

#include "RegLogModels.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GameRoomModels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRoom_GameRoomModels_2eproto;
class InputCheckingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputChecking> _instance;
  bool logincheckstatus_;
  bool mailcheckstatus_;
  bool captchacheckstatus_;
} _InputChecking_default_instance_;
class LoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 statecode_;
} _Login_default_instance_;
class RegistrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Registration> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 statecode_;
} _Registration_default_instance_;
class InitialStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitialState> _instance;
} _InitialState_default_instance_;
static void InitDefaultsscc_info_InitialState_RegLogModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InitialState_default_instance_;
    new (ptr) ::InitialState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InitialState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialState_RegLogModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InitialState_RegLogModels_2eproto}, {
      &scc_info_CreateRoom_GameRoomModels_2eproto.base,}};

static void InitDefaultsscc_info_InputChecking_RegLogModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InputChecking_default_instance_;
    new (ptr) ::InputChecking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InputChecking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputChecking_RegLogModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputChecking_RegLogModels_2eproto}, {}};

static void InitDefaultsscc_info_Login_RegLogModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Login_default_instance_;
    new (ptr) ::Login();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_RegLogModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Login_RegLogModels_2eproto}, {}};

static void InitDefaultsscc_info_Registration_RegLogModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Registration_default_instance_;
    new (ptr) ::Registration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Registration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Registration_RegLogModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Registration_RegLogModels_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RegLogModels_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_RegLogModels_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RegLogModels_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RegLogModels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InputChecking, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::InputChecking, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InputChecking, login_),
  PROTOBUF_FIELD_OFFSET(::InputChecking, mail_),
  PROTOBUF_FIELD_OFFSET(::InputChecking, captcha_),
  PROTOBUF_FIELD_OFFSET(::InputChecking, getcaptcha_),
  PROTOBUF_FIELD_OFFSET(::InputChecking, captchadata_),
  offsetof(::InputCheckingDefaultTypeInternal, logincheckstatus_),
  offsetof(::InputCheckingDefaultTypeInternal, mailcheckstatus_),
  offsetof(::InputCheckingDefaultTypeInternal, captchacheckstatus_),
  PROTOBUF_FIELD_OFFSET(::InputChecking, v1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Login, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Login, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Login, mail_),
  PROTOBUF_FIELD_OFFSET(::Login, hash_),
  PROTOBUF_FIELD_OFFSET(::Login, publickey_),
  offsetof(::LoginDefaultTypeInternal, statecode_),
  PROTOBUF_FIELD_OFFSET(::Login, v1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Registration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Registration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Registration, login_),
  PROTOBUF_FIELD_OFFSET(::Registration, hash_),
  PROTOBUF_FIELD_OFFSET(::Registration, mail_),
  PROTOBUF_FIELD_OFFSET(::Registration, captcha_),
  PROTOBUF_FIELD_OFFSET(::Registration, publickey_),
  offsetof(::RegistrationDefaultTypeInternal, statecode_),
  PROTOBUF_FIELD_OFFSET(::Registration, v1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InitialState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InitialState, sessionid_),
  PROTOBUF_FIELD_OFFSET(::InitialState, login_),
  PROTOBUF_FIELD_OFFSET(::InitialState, createroom_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::InputChecking)},
  { 14, -1, sizeof(::Login)},
  { 24, -1, sizeof(::Registration)},
  { 36, -1, sizeof(::InitialState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InputChecking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Registration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InitialState_default_instance_),
};

const char descriptor_table_protodef_RegLogModels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022RegLogModels.proto\032\025DisableWarnings.pr"
  "oto\032\024GameRoomModels.proto\"\301\001\n\rInputCheck"
  "ing\022\r\n\005login\030\001 \001(\t\022\014\n\004mail\030\002 \001(\t\022\017\n\007capt"
  "cha\030\003 \001(\t\022\022\n\ngetCaptcha\030\004 \001(\010\022\023\n\013captcha"
  "Data\030\005 \001(\014\022\032\n\020loginCheckStatus\030\006 \001(\010H\000\022\031"
  "\n\017mailCheckStatus\030\007 \001(\010H\000\022\034\n\022captchaChec"
  "kStatus\030\010 \001(\010H\000B\004\n\002v1\"Q\n\005Login\022\014\n\004mail\030\001"
  " \001(\t\022\014\n\004hash\030\002 \001(\t\022\021\n\tpublicKey\030\003 \001(\t\022\023\n"
  "\tstateCode\030\004 \001(\005H\000B\004\n\002v1\"x\n\014Registration"
  "\022\r\n\005login\030\001 \001(\t\022\014\n\004hash\030\002 \001(\t\022\014\n\004mail\030\003 "
  "\001(\t\022\017\n\007captcha\030\004 \001(\t\022\021\n\tpublicKey\030\005 \001(\t\022"
  "\023\n\tstateCode\030\006 \001(\005H\000B\004\n\002v1\"Q\n\014InitialSta"
  "te\022\021\n\tsessionId\030\001 \001(\t\022\r\n\005login\030\002 \001(\t\022\037\n\n"
  "createRoom\030\003 \003(\0132\013.CreateRoomB\006Z\004mainb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RegLogModels_2eproto_deps[2] = {
  &::descriptor_table_DisableWarnings_2eproto,
  &::descriptor_table_GameRoomModels_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RegLogModels_2eproto_sccs[4] = {
  &scc_info_InitialState_RegLogModels_2eproto.base,
  &scc_info_InputChecking_RegLogModels_2eproto.base,
  &scc_info_Login_RegLogModels_2eproto.base,
  &scc_info_Registration_RegLogModels_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RegLogModels_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RegLogModels_2eproto = {
  false, false, descriptor_table_protodef_RegLogModels_2eproto, "RegLogModels.proto", 565,
  &descriptor_table_RegLogModels_2eproto_once, descriptor_table_RegLogModels_2eproto_sccs, descriptor_table_RegLogModels_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_RegLogModels_2eproto::offsets,
  file_level_metadata_RegLogModels_2eproto, 4, file_level_enum_descriptors_RegLogModels_2eproto, file_level_service_descriptors_RegLogModels_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RegLogModels_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RegLogModels_2eproto)), true);

// ===================================================================

void InputChecking::InitAsDefaultInstance() {
  ::_InputChecking_default_instance_.logincheckstatus_ = false;
  ::_InputChecking_default_instance_.mailcheckstatus_ = false;
  ::_InputChecking_default_instance_.captchacheckstatus_ = false;
}
class InputChecking::_Internal {
 public:
};

InputChecking::InputChecking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InputChecking)
}
InputChecking::InputChecking(const InputChecking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_login(),
      GetArena());
  }
  mail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mail().empty()) {
    mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mail(),
      GetArena());
  }
  captcha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_captcha().empty()) {
    captcha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_captcha(),
      GetArena());
  }
  captchadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_captchadata().empty()) {
    captchadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_captchadata(),
      GetArena());
  }
  getcaptcha_ = from.getcaptcha_;
  clear_has_v1();
  switch (from.v1_case()) {
    case kLoginCheckStatus: {
      _internal_set_logincheckstatus(from._internal_logincheckstatus());
      break;
    }
    case kMailCheckStatus: {
      _internal_set_mailcheckstatus(from._internal_mailcheckstatus());
      break;
    }
    case kCaptchaCheckStatus: {
      _internal_set_captchacheckstatus(from._internal_captchacheckstatus());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:InputChecking)
}

void InputChecking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputChecking_RegLogModels_2eproto.base);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captcha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captchadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  getcaptcha_ = false;
  clear_has_v1();
}

InputChecking::~InputChecking() {
  // @@protoc_insertion_point(destructor:InputChecking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputChecking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captcha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captchadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_v1()) {
    clear_v1();
  }
}

void InputChecking::ArenaDtor(void* object) {
  InputChecking* _this = reinterpret_cast< InputChecking* >(object);
  (void)_this;
}
void InputChecking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputChecking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputChecking& InputChecking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputChecking_RegLogModels_2eproto.base);
  return *internal_default_instance();
}


void InputChecking::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:InputChecking)
  switch (v1_case()) {
    case kLoginCheckStatus: {
      // No need to clear
      break;
    }
    case kMailCheckStatus: {
      // No need to clear
      break;
    }
    case kCaptchaCheckStatus: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V1_NOT_SET;
}


void InputChecking::Clear() {
// @@protoc_insertion_point(message_clear_start:InputChecking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  captcha_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  captchadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  getcaptcha_ = false;
  clear_v1();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputChecking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InputChecking.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InputChecking.mail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string captcha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_captcha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InputChecking.captcha"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool getCaptcha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          getcaptcha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes captchaData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_captchadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool loginCheckStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_logincheckstatus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mailCheckStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_mailcheckstatus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool captchaCheckStatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_captchacheckstatus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputChecking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InputChecking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InputChecking.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  // string mail = 2;
  if (this->mail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail().data(), static_cast<int>(this->_internal_mail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InputChecking.mail");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mail(), target);
  }

  // string captcha = 3;
  if (this->captcha().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_captcha().data(), static_cast<int>(this->_internal_captcha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InputChecking.captcha");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_captcha(), target);
  }

  // bool getCaptcha = 4;
  if (this->getcaptcha() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_getcaptcha(), target);
  }

  // bytes captchaData = 5;
  if (this->captchadata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_captchadata(), target);
  }

  // bool loginCheckStatus = 6;
  if (_internal_has_logincheckstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_logincheckstatus(), target);
  }

  // bool mailCheckStatus = 7;
  if (_internal_has_mailcheckstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_mailcheckstatus(), target);
  }

  // bool captchaCheckStatus = 8;
  if (_internal_has_captchacheckstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_captchacheckstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InputChecking)
  return target;
}

size_t InputChecking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InputChecking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  // string mail = 2;
  if (this->mail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mail());
  }

  // string captcha = 3;
  if (this->captcha().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_captcha());
  }

  // bytes captchaData = 5;
  if (this->captchadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_captchadata());
  }

  // bool getCaptcha = 4;
  if (this->getcaptcha() != 0) {
    total_size += 1 + 1;
  }

  switch (v1_case()) {
    // bool loginCheckStatus = 6;
    case kLoginCheckStatus: {
      total_size += 1 + 1;
      break;
    }
    // bool mailCheckStatus = 7;
    case kMailCheckStatus: {
      total_size += 1 + 1;
      break;
    }
    // bool captchaCheckStatus = 8;
    case kCaptchaCheckStatus: {
      total_size += 1 + 1;
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputChecking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InputChecking)
  GOOGLE_DCHECK_NE(&from, this);
  const InputChecking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputChecking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InputChecking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InputChecking)
    MergeFrom(*source);
  }
}

void InputChecking::MergeFrom(const InputChecking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InputChecking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login().size() > 0) {
    _internal_set_login(from._internal_login());
  }
  if (from.mail().size() > 0) {
    _internal_set_mail(from._internal_mail());
  }
  if (from.captcha().size() > 0) {
    _internal_set_captcha(from._internal_captcha());
  }
  if (from.captchadata().size() > 0) {
    _internal_set_captchadata(from._internal_captchadata());
  }
  if (from.getcaptcha() != 0) {
    _internal_set_getcaptcha(from._internal_getcaptcha());
  }
  switch (from.v1_case()) {
    case kLoginCheckStatus: {
      _internal_set_logincheckstatus(from._internal_logincheckstatus());
      break;
    }
    case kMailCheckStatus: {
      _internal_set_mailcheckstatus(from._internal_mailcheckstatus());
      break;
    }
    case kCaptchaCheckStatus: {
      _internal_set_captchacheckstatus(from._internal_captchacheckstatus());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
}

void InputChecking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InputChecking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputChecking::CopyFrom(const InputChecking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InputChecking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputChecking::IsInitialized() const {
  return true;
}

void InputChecking::InternalSwap(InputChecking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mail_.Swap(&other->mail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  captcha_.Swap(&other->captcha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  captchadata_.Swap(&other->captchadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(getcaptcha_, other->getcaptcha_);
  swap(v1_, other->v1_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputChecking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Login::InitAsDefaultInstance() {
  ::_Login_default_instance_.statecode_ = 0;
}
class Login::_Internal {
 public:
};

Login::Login(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Login)
}
Login::Login(const Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mail().empty()) {
    mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mail(),
      GetArena());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publickey().empty()) {
    publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_publickey(),
      GetArena());
  }
  clear_has_v1();
  switch (from.v1_case()) {
    case kStateCode: {
      _internal_set_statecode(from._internal_statecode());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Login)
}

void Login::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Login_RegLogModels_2eproto.base);
  mail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_v1();
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:Login)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Login::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_v1()) {
    clear_v1();
  }
}

void Login::ArenaDtor(void* object) {
  Login* _this = reinterpret_cast< Login* >(object);
  (void)_this;
}
void Login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login& Login::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_RegLogModels_2eproto.base);
  return *internal_default_instance();
}


void Login::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:Login)
  switch (v1_case()) {
    case kStateCode: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V1_NOT_SET;
}


void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  publickey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_v1();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Login.mail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Login.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string publicKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Login.publicKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stateCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_statecode(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mail = 1;
  if (this->mail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail().data(), static_cast<int>(this->_internal_mail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Login.mail");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mail(), target);
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Login.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // string publicKey = 3;
  if (this->publickey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publickey().data(), static_cast<int>(this->_internal_publickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Login.publicKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_publickey(), target);
  }

  // int32 stateCode = 4;
  if (_internal_has_statecode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_statecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mail = 1;
  if (this->mail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mail());
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string publicKey = 3;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publickey());
  }

  switch (v1_case()) {
    // int32 stateCode = 4;
    case kStateCode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_statecode());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login)
  GOOGLE_DCHECK_NE(&from, this);
  const Login* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login)
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mail().size() > 0) {
    _internal_set_mail(from._internal_mail());
  }
  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.publickey().size() > 0) {
    _internal_set_publickey(from._internal_publickey());
  }
  switch (from.v1_case()) {
    case kStateCode: {
      _internal_set_statecode(from._internal_statecode());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
}

void Login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::InternalSwap(Login* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mail_.Swap(&other->mail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  publickey_.Swap(&other->publickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(v1_, other->v1_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Registration::InitAsDefaultInstance() {
  ::_Registration_default_instance_.statecode_ = 0;
}
class Registration::_Internal {
 public:
};

Registration::Registration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Registration)
}
Registration::Registration(const Registration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_login(),
      GetArena());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  mail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mail().empty()) {
    mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mail(),
      GetArena());
  }
  captcha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_captcha().empty()) {
    captcha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_captcha(),
      GetArena());
  }
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publickey().empty()) {
    publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_publickey(),
      GetArena());
  }
  clear_has_v1();
  switch (from.v1_case()) {
    case kStateCode: {
      _internal_set_statecode(from._internal_statecode());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Registration)
}

void Registration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Registration_RegLogModels_2eproto.base);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captcha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_v1();
}

Registration::~Registration() {
  // @@protoc_insertion_point(destructor:Registration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Registration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captcha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_v1()) {
    clear_v1();
  }
}

void Registration::ArenaDtor(void* object) {
  Registration* _this = reinterpret_cast< Registration* >(object);
  (void)_this;
}
void Registration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Registration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Registration& Registration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Registration_RegLogModels_2eproto.base);
  return *internal_default_instance();
}


void Registration::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:Registration)
  switch (v1_case()) {
    case kStateCode: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V1_NOT_SET;
}


void Registration::Clear() {
// @@protoc_insertion_point(message_clear_start:Registration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  captcha_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  publickey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_v1();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Registration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Registration.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Registration.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Registration.mail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string captcha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_captcha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Registration.captcha"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string publicKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Registration.publicKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stateCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_statecode(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Registration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Registration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Registration.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Registration.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // string mail = 3;
  if (this->mail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail().data(), static_cast<int>(this->_internal_mail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Registration.mail");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mail(), target);
  }

  // string captcha = 4;
  if (this->captcha().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_captcha().data(), static_cast<int>(this->_internal_captcha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Registration.captcha");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_captcha(), target);
  }

  // string publicKey = 5;
  if (this->publickey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publickey().data(), static_cast<int>(this->_internal_publickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Registration.publicKey");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_publickey(), target);
  }

  // int32 stateCode = 6;
  if (_internal_has_statecode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_statecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Registration)
  return target;
}

size_t Registration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Registration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string mail = 3;
  if (this->mail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mail());
  }

  // string captcha = 4;
  if (this->captcha().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_captcha());
  }

  // string publicKey = 5;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publickey());
  }

  switch (v1_case()) {
    // int32 stateCode = 6;
    case kStateCode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_statecode());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Registration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Registration)
  GOOGLE_DCHECK_NE(&from, this);
  const Registration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Registration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Registration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Registration)
    MergeFrom(*source);
  }
}

void Registration::MergeFrom(const Registration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Registration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login().size() > 0) {
    _internal_set_login(from._internal_login());
  }
  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.mail().size() > 0) {
    _internal_set_mail(from._internal_mail());
  }
  if (from.captcha().size() > 0) {
    _internal_set_captcha(from._internal_captcha());
  }
  if (from.publickey().size() > 0) {
    _internal_set_publickey(from._internal_publickey());
  }
  switch (from.v1_case()) {
    case kStateCode: {
      _internal_set_statecode(from._internal_statecode());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
}

void Registration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Registration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Registration::CopyFrom(const Registration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Registration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Registration::IsInitialized() const {
  return true;
}

void Registration::InternalSwap(Registration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mail_.Swap(&other->mail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  captcha_.Swap(&other->captcha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  publickey_.Swap(&other->publickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(v1_, other->v1_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Registration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitialState::InitAsDefaultInstance() {
}
class InitialState::_Internal {
 public:
};

void InitialState::clear_createroom() {
  createroom_.Clear();
}
InitialState::InitialState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  createroom_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InitialState)
}
InitialState::InitialState(const InitialState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      createroom_(from.createroom_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sessionid(),
      GetArena());
  }
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_login(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:InitialState)
}

void InitialState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitialState_RegLogModels_2eproto.base);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InitialState::~InitialState() {
  // @@protoc_insertion_point(destructor:InitialState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InitialState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitialState::ArenaDtor(void* object) {
  InitialState* _this = reinterpret_cast< InitialState* >(object);
  (void)_this;
}
void InitialState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitialState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialState& InitialState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitialState_RegLogModels_2eproto.base);
  return *internal_default_instance();
}


void InitialState::Clear() {
// @@protoc_insertion_point(message_clear_start:InitialState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  createroom_.Clear();
  sessionid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitialState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InitialState.sessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InitialState.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CreateRoom createRoom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_createroom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitialState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InitialState.sessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // string login = 2;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InitialState.login");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_login(), target);
  }

  // repeated .CreateRoom createRoom = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_createroom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_createroom(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitialState)
  return target;
}

size_t InitialState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitialState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CreateRoom createRoom = 3;
  total_size += 1UL * this->_internal_createroom_size();
  for (const auto& msg : this->createroom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string login = 2;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitialState)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitialState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitialState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitialState)
    MergeFrom(*source);
  }
}

void InitialState::MergeFrom(const InitialState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitialState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  createroom_.MergeFrom(from.createroom_);
  if (from.sessionid().size() > 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from.login().size() > 0) {
    _internal_set_login(from._internal_login());
  }
}

void InitialState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialState::CopyFrom(const InitialState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialState::IsInitialized() const {
  return true;
}

void InitialState::InternalSwap(InitialState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  createroom_.InternalSwap(&other->createroom_);
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::InputChecking* Arena::CreateMaybeMessage< ::InputChecking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InputChecking >(arena);
}
template<> PROTOBUF_NOINLINE ::Login* Arena::CreateMaybeMessage< ::Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Login >(arena);
}
template<> PROTOBUF_NOINLINE ::Registration* Arena::CreateMaybeMessage< ::Registration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Registration >(arena);
}
template<> PROTOBUF_NOINLINE ::InitialState* Arena::CreateMaybeMessage< ::InitialState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InitialState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
