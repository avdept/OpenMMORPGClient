// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegLogModels.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RegLogModels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RegLogModels_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "DisableWarnings.pb.h"
#include "GameRoomModels.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RegLogModels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RegLogModels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RegLogModels_2eproto;
class InitialState;
class InitialStateDefaultTypeInternal;
extern InitialStateDefaultTypeInternal _InitialState_default_instance_;
class InputChecking;
class InputCheckingDefaultTypeInternal;
extern InputCheckingDefaultTypeInternal _InputChecking_default_instance_;
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class Registration;
class RegistrationDefaultTypeInternal;
extern RegistrationDefaultTypeInternal _Registration_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::InitialState* Arena::CreateMaybeMessage<::InitialState>(Arena*);
template<> ::InputChecking* Arena::CreateMaybeMessage<::InputChecking>(Arena*);
template<> ::Login* Arena::CreateMaybeMessage<::Login>(Arena*);
template<> ::Registration* Arena::CreateMaybeMessage<::Registration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class InputChecking PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InputChecking) */ {
 public:
  inline InputChecking() : InputChecking(nullptr) {};
  virtual ~InputChecking();

  InputChecking(const InputChecking& from);
  InputChecking(InputChecking&& from) noexcept
    : InputChecking() {
    *this = ::std::move(from);
  }

  inline InputChecking& operator=(const InputChecking& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputChecking& operator=(InputChecking&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputChecking& default_instance();

  enum V1Case {
    kLoginCheckStatus = 6,
    kMailCheckStatus = 7,
    kCaptchaCheckStatus = 8,
    V1_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputChecking* internal_default_instance() {
    return reinterpret_cast<const InputChecking*>(
               &_InputChecking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputChecking& a, InputChecking& b) {
    a.Swap(&b);
  }
  inline void Swap(InputChecking* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputChecking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputChecking* New() const final {
    return CreateMaybeMessage<InputChecking>(nullptr);
  }

  InputChecking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputChecking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputChecking& from);
  void MergeFrom(const InputChecking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputChecking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InputChecking";
  }
  protected:
  explicit InputChecking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RegLogModels_2eproto);
    return ::descriptor_table_RegLogModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kMailFieldNumber = 2,
    kCaptchaFieldNumber = 3,
    kCaptchaDataFieldNumber = 5,
    kGetCaptchaFieldNumber = 4,
    kLoginCheckStatusFieldNumber = 6,
    kMailCheckStatusFieldNumber = 7,
    kCaptchaCheckStatusFieldNumber = 8,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login(
      std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string mail = 2;
  void clear_mail();
  const std::string& mail() const;
  void set_mail(const std::string& value);
  void set_mail(std::string&& value);
  void set_mail(const char* value);
  void set_mail(const char* value, size_t size);
  std::string* mutable_mail();
  std::string* release_mail();
  void set_allocated_mail(std::string* mail);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mail();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mail(
      std::string* mail);
  private:
  const std::string& _internal_mail() const;
  void _internal_set_mail(const std::string& value);
  std::string* _internal_mutable_mail();
  public:

  // string captcha = 3;
  void clear_captcha();
  const std::string& captcha() const;
  void set_captcha(const std::string& value);
  void set_captcha(std::string&& value);
  void set_captcha(const char* value);
  void set_captcha(const char* value, size_t size);
  std::string* mutable_captcha();
  std::string* release_captcha();
  void set_allocated_captcha(std::string* captcha);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_captcha();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captcha(
      std::string* captcha);
  private:
  const std::string& _internal_captcha() const;
  void _internal_set_captcha(const std::string& value);
  std::string* _internal_mutable_captcha();
  public:

  // bytes captchaData = 5;
  void clear_captchadata();
  const std::string& captchadata() const;
  void set_captchadata(const std::string& value);
  void set_captchadata(std::string&& value);
  void set_captchadata(const char* value);
  void set_captchadata(const void* value, size_t size);
  std::string* mutable_captchadata();
  std::string* release_captchadata();
  void set_allocated_captchadata(std::string* captchadata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_captchadata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captchadata(
      std::string* captchadata);
  private:
  const std::string& _internal_captchadata() const;
  void _internal_set_captchadata(const std::string& value);
  std::string* _internal_mutable_captchadata();
  public:

  // bool getCaptcha = 4;
  void clear_getcaptcha();
  bool getcaptcha() const;
  void set_getcaptcha(bool value);
  private:
  bool _internal_getcaptcha() const;
  void _internal_set_getcaptcha(bool value);
  public:

  // bool loginCheckStatus = 6;
  private:
  bool _internal_has_logincheckstatus() const;
  public:
  void clear_logincheckstatus();
  bool logincheckstatus() const;
  void set_logincheckstatus(bool value);
  private:
  bool _internal_logincheckstatus() const;
  void _internal_set_logincheckstatus(bool value);
  public:

  // bool mailCheckStatus = 7;
  private:
  bool _internal_has_mailcheckstatus() const;
  public:
  void clear_mailcheckstatus();
  bool mailcheckstatus() const;
  void set_mailcheckstatus(bool value);
  private:
  bool _internal_mailcheckstatus() const;
  void _internal_set_mailcheckstatus(bool value);
  public:

  // bool captchaCheckStatus = 8;
  private:
  bool _internal_has_captchacheckstatus() const;
  public:
  void clear_captchacheckstatus();
  bool captchacheckstatus() const;
  void set_captchacheckstatus(bool value);
  private:
  bool _internal_captchacheckstatus() const;
  void _internal_set_captchacheckstatus(bool value);
  public:

  void clear_v1();
  V1Case v1_case() const;
  // @@protoc_insertion_point(class_scope:InputChecking)
 private:
  class _Internal;
  void set_has_logincheckstatus();
  void set_has_mailcheckstatus();
  void set_has_captchacheckstatus();

  inline bool has_v1() const;
  inline void clear_has_v1();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captchadata_;
  bool getcaptcha_;
  union V1Union {
    V1Union() {}
    bool logincheckstatus_;
    bool mailcheckstatus_;
    bool captchacheckstatus_;
  } v1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_RegLogModels_2eproto;
};
// -------------------------------------------------------------------

class Login PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login) */ {
 public:
  inline Login() : Login(nullptr) {};
  virtual ~Login();

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login& default_instance();

  enum V1Case {
    kStateCode = 4,
    V1_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const final {
    return CreateMaybeMessage<Login>(nullptr);
  }

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login";
  }
  protected:
  explicit Login(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RegLogModels_2eproto);
    return ::descriptor_table_RegLogModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailFieldNumber = 1,
    kHashFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
    kStateCodeFieldNumber = 4,
  };
  // string mail = 1;
  void clear_mail();
  const std::string& mail() const;
  void set_mail(const std::string& value);
  void set_mail(std::string&& value);
  void set_mail(const char* value);
  void set_mail(const char* value, size_t size);
  std::string* mutable_mail();
  std::string* release_mail();
  void set_allocated_mail(std::string* mail);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mail();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mail(
      std::string* mail);
  private:
  const std::string& _internal_mail() const;
  void _internal_set_mail(const std::string& value);
  std::string* _internal_mutable_mail();
  public:

  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hash(
      std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string publicKey = 3;
  void clear_publickey();
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const char* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_publickey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_publickey(
      std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // int32 stateCode = 4;
  private:
  bool _internal_has_statecode() const;
  public:
  void clear_statecode();
  ::PROTOBUF_NAMESPACE_ID::int32 statecode() const;
  void set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_statecode() const;
  void _internal_set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_v1();
  V1Case v1_case() const;
  // @@protoc_insertion_point(class_scope:Login)
 private:
  class _Internal;
  void set_has_statecode();

  inline bool has_v1() const;
  inline void clear_has_v1();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  union V1Union {
    V1Union() {}
    ::PROTOBUF_NAMESPACE_ID::int32 statecode_;
  } v1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_RegLogModels_2eproto;
};
// -------------------------------------------------------------------

class Registration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Registration) */ {
 public:
  inline Registration() : Registration(nullptr) {};
  virtual ~Registration();

  Registration(const Registration& from);
  Registration(Registration&& from) noexcept
    : Registration() {
    *this = ::std::move(from);
  }

  inline Registration& operator=(const Registration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Registration& operator=(Registration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Registration& default_instance();

  enum V1Case {
    kStateCode = 6,
    V1_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Registration* internal_default_instance() {
    return reinterpret_cast<const Registration*>(
               &_Registration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Registration& a, Registration& b) {
    a.Swap(&b);
  }
  inline void Swap(Registration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Registration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Registration* New() const final {
    return CreateMaybeMessage<Registration>(nullptr);
  }

  Registration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Registration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Registration& from);
  void MergeFrom(const Registration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Registration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Registration";
  }
  protected:
  explicit Registration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RegLogModels_2eproto);
    return ::descriptor_table_RegLogModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kHashFieldNumber = 2,
    kMailFieldNumber = 3,
    kCaptchaFieldNumber = 4,
    kPublicKeyFieldNumber = 5,
    kStateCodeFieldNumber = 6,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login(
      std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hash(
      std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string mail = 3;
  void clear_mail();
  const std::string& mail() const;
  void set_mail(const std::string& value);
  void set_mail(std::string&& value);
  void set_mail(const char* value);
  void set_mail(const char* value, size_t size);
  std::string* mutable_mail();
  std::string* release_mail();
  void set_allocated_mail(std::string* mail);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mail();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mail(
      std::string* mail);
  private:
  const std::string& _internal_mail() const;
  void _internal_set_mail(const std::string& value);
  std::string* _internal_mutable_mail();
  public:

  // string captcha = 4;
  void clear_captcha();
  const std::string& captcha() const;
  void set_captcha(const std::string& value);
  void set_captcha(std::string&& value);
  void set_captcha(const char* value);
  void set_captcha(const char* value, size_t size);
  std::string* mutable_captcha();
  std::string* release_captcha();
  void set_allocated_captcha(std::string* captcha);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_captcha();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captcha(
      std::string* captcha);
  private:
  const std::string& _internal_captcha() const;
  void _internal_set_captcha(const std::string& value);
  std::string* _internal_mutable_captcha();
  public:

  // string publicKey = 5;
  void clear_publickey();
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const char* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_publickey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_publickey(
      std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // int32 stateCode = 6;
  private:
  bool _internal_has_statecode() const;
  public:
  void clear_statecode();
  ::PROTOBUF_NAMESPACE_ID::int32 statecode() const;
  void set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_statecode() const;
  void _internal_set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_v1();
  V1Case v1_case() const;
  // @@protoc_insertion_point(class_scope:Registration)
 private:
  class _Internal;
  void set_has_statecode();

  inline bool has_v1() const;
  inline void clear_has_v1();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  union V1Union {
    V1Union() {}
    ::PROTOBUF_NAMESPACE_ID::int32 statecode_;
  } v1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_RegLogModels_2eproto;
};
// -------------------------------------------------------------------

class InitialState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InitialState) */ {
 public:
  inline InitialState() : InitialState(nullptr) {};
  virtual ~InitialState();

  InitialState(const InitialState& from);
  InitialState(InitialState&& from) noexcept
    : InitialState() {
    *this = ::std::move(from);
  }

  inline InitialState& operator=(const InitialState& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialState& operator=(InitialState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitialState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitialState* internal_default_instance() {
    return reinterpret_cast<const InitialState*>(
               &_InitialState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitialState& a, InitialState& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitialState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitialState* New() const final {
    return CreateMaybeMessage<InitialState>(nullptr);
  }

  InitialState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitialState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitialState& from);
  void MergeFrom(const InitialState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitialState";
  }
  protected:
  explicit InitialState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RegLogModels_2eproto);
    return ::descriptor_table_RegLogModels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateRoomFieldNumber = 3,
    kSessionIdFieldNumber = 1,
    kLoginFieldNumber = 2,
  };
  // repeated .CreateRoom createRoom = 3;
  int createroom_size() const;
  private:
  int _internal_createroom_size() const;
  public:
  void clear_createroom();
  ::CreateRoom* mutable_createroom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CreateRoom >*
      mutable_createroom();
  private:
  const ::CreateRoom& _internal_createroom(int index) const;
  ::CreateRoom* _internal_add_createroom();
  public:
  const ::CreateRoom& createroom(int index) const;
  ::CreateRoom* add_createroom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CreateRoom >&
      createroom() const;

  // string sessionId = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  void set_sessionid(const std::string& value);
  void set_sessionid(std::string&& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  std::string* mutable_sessionid();
  std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sessionid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sessionid(
      std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // string login = 2;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login(
      std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // @@protoc_insertion_point(class_scope:InitialState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CreateRoom > createroom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RegLogModels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputChecking

// string login = 1;
inline void InputChecking::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputChecking::login() const {
  // @@protoc_insertion_point(field_get:InputChecking.login)
  return _internal_login();
}
inline void InputChecking::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:InputChecking.login)
}
inline std::string* InputChecking::mutable_login() {
  // @@protoc_insertion_point(field_mutable:InputChecking.login)
  return _internal_mutable_login();
}
inline const std::string& InputChecking::_internal_login() const {
  return login_.Get();
}
inline void InputChecking::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputChecking::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InputChecking.login)
}
inline void InputChecking::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InputChecking.login)
}
inline void InputChecking::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InputChecking.login)
}
inline std::string* InputChecking::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputChecking::release_login() {
  // @@protoc_insertion_point(field_release:InputChecking.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputChecking::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InputChecking.login)
}
inline std::string* InputChecking::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InputChecking.login)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InputChecking::unsafe_arena_set_allocated_login(
    std::string* login) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login != nullptr) {
    
  } else {
    
  }
  login_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InputChecking.login)
}

// string mail = 2;
inline void InputChecking::clear_mail() {
  mail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputChecking::mail() const {
  // @@protoc_insertion_point(field_get:InputChecking.mail)
  return _internal_mail();
}
inline void InputChecking::set_mail(const std::string& value) {
  _internal_set_mail(value);
  // @@protoc_insertion_point(field_set:InputChecking.mail)
}
inline std::string* InputChecking::mutable_mail() {
  // @@protoc_insertion_point(field_mutable:InputChecking.mail)
  return _internal_mutable_mail();
}
inline const std::string& InputChecking::_internal_mail() const {
  return mail_.Get();
}
inline void InputChecking::_internal_set_mail(const std::string& value) {
  
  mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputChecking::set_mail(std::string&& value) {
  
  mail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InputChecking.mail)
}
inline void InputChecking::set_mail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InputChecking.mail)
}
inline void InputChecking::set_mail(const char* value,
    size_t size) {
  
  mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InputChecking.mail)
}
inline std::string* InputChecking::_internal_mutable_mail() {
  
  return mail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputChecking::release_mail() {
  // @@protoc_insertion_point(field_release:InputChecking.mail)
  return mail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputChecking::set_allocated_mail(std::string* mail) {
  if (mail != nullptr) {
    
  } else {
    
  }
  mail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InputChecking.mail)
}
inline std::string* InputChecking::unsafe_arena_release_mail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InputChecking.mail)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mail_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InputChecking::unsafe_arena_set_allocated_mail(
    std::string* mail) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mail != nullptr) {
    
  } else {
    
  }
  mail_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mail, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InputChecking.mail)
}

// string captcha = 3;
inline void InputChecking::clear_captcha() {
  captcha_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputChecking::captcha() const {
  // @@protoc_insertion_point(field_get:InputChecking.captcha)
  return _internal_captcha();
}
inline void InputChecking::set_captcha(const std::string& value) {
  _internal_set_captcha(value);
  // @@protoc_insertion_point(field_set:InputChecking.captcha)
}
inline std::string* InputChecking::mutable_captcha() {
  // @@protoc_insertion_point(field_mutable:InputChecking.captcha)
  return _internal_mutable_captcha();
}
inline const std::string& InputChecking::_internal_captcha() const {
  return captcha_.Get();
}
inline void InputChecking::_internal_set_captcha(const std::string& value) {
  
  captcha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputChecking::set_captcha(std::string&& value) {
  
  captcha_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InputChecking.captcha)
}
inline void InputChecking::set_captcha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InputChecking.captcha)
}
inline void InputChecking::set_captcha(const char* value,
    size_t size) {
  
  captcha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InputChecking.captcha)
}
inline std::string* InputChecking::_internal_mutable_captcha() {
  
  return captcha_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputChecking::release_captcha() {
  // @@protoc_insertion_point(field_release:InputChecking.captcha)
  return captcha_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputChecking::set_allocated_captcha(std::string* captcha) {
  if (captcha != nullptr) {
    
  } else {
    
  }
  captcha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InputChecking.captcha)
}
inline std::string* InputChecking::unsafe_arena_release_captcha() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InputChecking.captcha)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return captcha_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InputChecking::unsafe_arena_set_allocated_captcha(
    std::string* captcha) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (captcha != nullptr) {
    
  } else {
    
  }
  captcha_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      captcha, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InputChecking.captcha)
}

// bool getCaptcha = 4;
inline void InputChecking::clear_getcaptcha() {
  getcaptcha_ = false;
}
inline bool InputChecking::_internal_getcaptcha() const {
  return getcaptcha_;
}
inline bool InputChecking::getcaptcha() const {
  // @@protoc_insertion_point(field_get:InputChecking.getCaptcha)
  return _internal_getcaptcha();
}
inline void InputChecking::_internal_set_getcaptcha(bool value) {
  
  getcaptcha_ = value;
}
inline void InputChecking::set_getcaptcha(bool value) {
  _internal_set_getcaptcha(value);
  // @@protoc_insertion_point(field_set:InputChecking.getCaptcha)
}

// bytes captchaData = 5;
inline void InputChecking::clear_captchadata() {
  captchadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputChecking::captchadata() const {
  // @@protoc_insertion_point(field_get:InputChecking.captchaData)
  return _internal_captchadata();
}
inline void InputChecking::set_captchadata(const std::string& value) {
  _internal_set_captchadata(value);
  // @@protoc_insertion_point(field_set:InputChecking.captchaData)
}
inline std::string* InputChecking::mutable_captchadata() {
  // @@protoc_insertion_point(field_mutable:InputChecking.captchaData)
  return _internal_mutable_captchadata();
}
inline const std::string& InputChecking::_internal_captchadata() const {
  return captchadata_.Get();
}
inline void InputChecking::_internal_set_captchadata(const std::string& value) {
  
  captchadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputChecking::set_captchadata(std::string&& value) {
  
  captchadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InputChecking.captchaData)
}
inline void InputChecking::set_captchadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captchadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InputChecking.captchaData)
}
inline void InputChecking::set_captchadata(const void* value,
    size_t size) {
  
  captchadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InputChecking.captchaData)
}
inline std::string* InputChecking::_internal_mutable_captchadata() {
  
  return captchadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputChecking::release_captchadata() {
  // @@protoc_insertion_point(field_release:InputChecking.captchaData)
  return captchadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputChecking::set_allocated_captchadata(std::string* captchadata) {
  if (captchadata != nullptr) {
    
  } else {
    
  }
  captchadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captchadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InputChecking.captchaData)
}
inline std::string* InputChecking::unsafe_arena_release_captchadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InputChecking.captchaData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return captchadata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InputChecking::unsafe_arena_set_allocated_captchadata(
    std::string* captchadata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (captchadata != nullptr) {
    
  } else {
    
  }
  captchadata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      captchadata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InputChecking.captchaData)
}

// bool loginCheckStatus = 6;
inline bool InputChecking::_internal_has_logincheckstatus() const {
  return v1_case() == kLoginCheckStatus;
}
inline void InputChecking::set_has_logincheckstatus() {
  _oneof_case_[0] = kLoginCheckStatus;
}
inline void InputChecking::clear_logincheckstatus() {
  if (_internal_has_logincheckstatus()) {
    v1_.logincheckstatus_ = false;
    clear_has_v1();
  }
}
inline bool InputChecking::_internal_logincheckstatus() const {
  if (_internal_has_logincheckstatus()) {
    return v1_.logincheckstatus_;
  }
  return false;
}
inline void InputChecking::_internal_set_logincheckstatus(bool value) {
  if (!_internal_has_logincheckstatus()) {
    clear_v1();
    set_has_logincheckstatus();
  }
  v1_.logincheckstatus_ = value;
}
inline bool InputChecking::logincheckstatus() const {
  // @@protoc_insertion_point(field_get:InputChecking.loginCheckStatus)
  return _internal_logincheckstatus();
}
inline void InputChecking::set_logincheckstatus(bool value) {
  _internal_set_logincheckstatus(value);
  // @@protoc_insertion_point(field_set:InputChecking.loginCheckStatus)
}

// bool mailCheckStatus = 7;
inline bool InputChecking::_internal_has_mailcheckstatus() const {
  return v1_case() == kMailCheckStatus;
}
inline void InputChecking::set_has_mailcheckstatus() {
  _oneof_case_[0] = kMailCheckStatus;
}
inline void InputChecking::clear_mailcheckstatus() {
  if (_internal_has_mailcheckstatus()) {
    v1_.mailcheckstatus_ = false;
    clear_has_v1();
  }
}
inline bool InputChecking::_internal_mailcheckstatus() const {
  if (_internal_has_mailcheckstatus()) {
    return v1_.mailcheckstatus_;
  }
  return false;
}
inline void InputChecking::_internal_set_mailcheckstatus(bool value) {
  if (!_internal_has_mailcheckstatus()) {
    clear_v1();
    set_has_mailcheckstatus();
  }
  v1_.mailcheckstatus_ = value;
}
inline bool InputChecking::mailcheckstatus() const {
  // @@protoc_insertion_point(field_get:InputChecking.mailCheckStatus)
  return _internal_mailcheckstatus();
}
inline void InputChecking::set_mailcheckstatus(bool value) {
  _internal_set_mailcheckstatus(value);
  // @@protoc_insertion_point(field_set:InputChecking.mailCheckStatus)
}

// bool captchaCheckStatus = 8;
inline bool InputChecking::_internal_has_captchacheckstatus() const {
  return v1_case() == kCaptchaCheckStatus;
}
inline void InputChecking::set_has_captchacheckstatus() {
  _oneof_case_[0] = kCaptchaCheckStatus;
}
inline void InputChecking::clear_captchacheckstatus() {
  if (_internal_has_captchacheckstatus()) {
    v1_.captchacheckstatus_ = false;
    clear_has_v1();
  }
}
inline bool InputChecking::_internal_captchacheckstatus() const {
  if (_internal_has_captchacheckstatus()) {
    return v1_.captchacheckstatus_;
  }
  return false;
}
inline void InputChecking::_internal_set_captchacheckstatus(bool value) {
  if (!_internal_has_captchacheckstatus()) {
    clear_v1();
    set_has_captchacheckstatus();
  }
  v1_.captchacheckstatus_ = value;
}
inline bool InputChecking::captchacheckstatus() const {
  // @@protoc_insertion_point(field_get:InputChecking.captchaCheckStatus)
  return _internal_captchacheckstatus();
}
inline void InputChecking::set_captchacheckstatus(bool value) {
  _internal_set_captchacheckstatus(value);
  // @@protoc_insertion_point(field_set:InputChecking.captchaCheckStatus)
}

inline bool InputChecking::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
inline void InputChecking::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
inline InputChecking::V1Case InputChecking::v1_case() const {
  return InputChecking::V1Case(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Login

// string mail = 1;
inline void Login::clear_mail() {
  mail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Login::mail() const {
  // @@protoc_insertion_point(field_get:Login.mail)
  return _internal_mail();
}
inline void Login::set_mail(const std::string& value) {
  _internal_set_mail(value);
  // @@protoc_insertion_point(field_set:Login.mail)
}
inline std::string* Login::mutable_mail() {
  // @@protoc_insertion_point(field_mutable:Login.mail)
  return _internal_mutable_mail();
}
inline const std::string& Login::_internal_mail() const {
  return mail_.Get();
}
inline void Login::_internal_set_mail(const std::string& value) {
  
  mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Login::set_mail(std::string&& value) {
  
  mail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Login.mail)
}
inline void Login::set_mail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Login.mail)
}
inline void Login::set_mail(const char* value,
    size_t size) {
  
  mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Login.mail)
}
inline std::string* Login::_internal_mutable_mail() {
  
  return mail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Login::release_mail() {
  // @@protoc_insertion_point(field_release:Login.mail)
  return mail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Login::set_allocated_mail(std::string* mail) {
  if (mail != nullptr) {
    
  } else {
    
  }
  mail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Login.mail)
}
inline std::string* Login::unsafe_arena_release_mail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Login.mail)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mail_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Login::unsafe_arena_set_allocated_mail(
    std::string* mail) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mail != nullptr) {
    
  } else {
    
  }
  mail_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mail, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Login.mail)
}

// string hash = 2;
inline void Login::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Login::hash() const {
  // @@protoc_insertion_point(field_get:Login.hash)
  return _internal_hash();
}
inline void Login::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Login.hash)
}
inline std::string* Login::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:Login.hash)
  return _internal_mutable_hash();
}
inline const std::string& Login::_internal_hash() const {
  return hash_.Get();
}
inline void Login::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Login::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Login.hash)
}
inline void Login::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Login.hash)
}
inline void Login::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Login.hash)
}
inline std::string* Login::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Login::release_hash() {
  // @@protoc_insertion_point(field_release:Login.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Login::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Login.hash)
}
inline std::string* Login::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Login.hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Login::unsafe_arena_set_allocated_hash(
    std::string* hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Login.hash)
}

// string publicKey = 3;
inline void Login::clear_publickey() {
  publickey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Login::publickey() const {
  // @@protoc_insertion_point(field_get:Login.publicKey)
  return _internal_publickey();
}
inline void Login::set_publickey(const std::string& value) {
  _internal_set_publickey(value);
  // @@protoc_insertion_point(field_set:Login.publicKey)
}
inline std::string* Login::mutable_publickey() {
  // @@protoc_insertion_point(field_mutable:Login.publicKey)
  return _internal_mutable_publickey();
}
inline const std::string& Login::_internal_publickey() const {
  return publickey_.Get();
}
inline void Login::_internal_set_publickey(const std::string& value) {
  
  publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Login::set_publickey(std::string&& value) {
  
  publickey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Login.publicKey)
}
inline void Login::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Login.publicKey)
}
inline void Login::set_publickey(const char* value,
    size_t size) {
  
  publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Login.publicKey)
}
inline std::string* Login::_internal_mutable_publickey() {
  
  return publickey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Login::release_publickey() {
  // @@protoc_insertion_point(field_release:Login.publicKey)
  return publickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Login::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Login.publicKey)
}
inline std::string* Login::unsafe_arena_release_publickey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Login.publicKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return publickey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Login::unsafe_arena_set_allocated_publickey(
    std::string* publickey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      publickey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Login.publicKey)
}

// int32 stateCode = 4;
inline bool Login::_internal_has_statecode() const {
  return v1_case() == kStateCode;
}
inline void Login::set_has_statecode() {
  _oneof_case_[0] = kStateCode;
}
inline void Login::clear_statecode() {
  if (_internal_has_statecode()) {
    v1_.statecode_ = 0;
    clear_has_v1();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login::_internal_statecode() const {
  if (_internal_has_statecode()) {
    return v1_.statecode_;
  }
  return 0;
}
inline void Login::_internal_set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_statecode()) {
    clear_v1();
    set_has_statecode();
  }
  v1_.statecode_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login::statecode() const {
  // @@protoc_insertion_point(field_get:Login.stateCode)
  return _internal_statecode();
}
inline void Login::set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_statecode(value);
  // @@protoc_insertion_point(field_set:Login.stateCode)
}

inline bool Login::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
inline void Login::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
inline Login::V1Case Login::v1_case() const {
  return Login::V1Case(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Registration

// string login = 1;
inline void Registration::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Registration::login() const {
  // @@protoc_insertion_point(field_get:Registration.login)
  return _internal_login();
}
inline void Registration::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:Registration.login)
}
inline std::string* Registration::mutable_login() {
  // @@protoc_insertion_point(field_mutable:Registration.login)
  return _internal_mutable_login();
}
inline const std::string& Registration::_internal_login() const {
  return login_.Get();
}
inline void Registration::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Registration::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Registration.login)
}
inline void Registration::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Registration.login)
}
inline void Registration::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Registration.login)
}
inline std::string* Registration::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Registration::release_login() {
  // @@protoc_insertion_point(field_release:Registration.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Registration::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Registration.login)
}
inline std::string* Registration::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Registration.login)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Registration::unsafe_arena_set_allocated_login(
    std::string* login) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login != nullptr) {
    
  } else {
    
  }
  login_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Registration.login)
}

// string hash = 2;
inline void Registration::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Registration::hash() const {
  // @@protoc_insertion_point(field_get:Registration.hash)
  return _internal_hash();
}
inline void Registration::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Registration.hash)
}
inline std::string* Registration::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:Registration.hash)
  return _internal_mutable_hash();
}
inline const std::string& Registration::_internal_hash() const {
  return hash_.Get();
}
inline void Registration::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Registration::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Registration.hash)
}
inline void Registration::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Registration.hash)
}
inline void Registration::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Registration.hash)
}
inline std::string* Registration::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Registration::release_hash() {
  // @@protoc_insertion_point(field_release:Registration.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Registration::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Registration.hash)
}
inline std::string* Registration::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Registration.hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Registration::unsafe_arena_set_allocated_hash(
    std::string* hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Registration.hash)
}

// string mail = 3;
inline void Registration::clear_mail() {
  mail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Registration::mail() const {
  // @@protoc_insertion_point(field_get:Registration.mail)
  return _internal_mail();
}
inline void Registration::set_mail(const std::string& value) {
  _internal_set_mail(value);
  // @@protoc_insertion_point(field_set:Registration.mail)
}
inline std::string* Registration::mutable_mail() {
  // @@protoc_insertion_point(field_mutable:Registration.mail)
  return _internal_mutable_mail();
}
inline const std::string& Registration::_internal_mail() const {
  return mail_.Get();
}
inline void Registration::_internal_set_mail(const std::string& value) {
  
  mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Registration::set_mail(std::string&& value) {
  
  mail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Registration.mail)
}
inline void Registration::set_mail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Registration.mail)
}
inline void Registration::set_mail(const char* value,
    size_t size) {
  
  mail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Registration.mail)
}
inline std::string* Registration::_internal_mutable_mail() {
  
  return mail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Registration::release_mail() {
  // @@protoc_insertion_point(field_release:Registration.mail)
  return mail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Registration::set_allocated_mail(std::string* mail) {
  if (mail != nullptr) {
    
  } else {
    
  }
  mail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Registration.mail)
}
inline std::string* Registration::unsafe_arena_release_mail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Registration.mail)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mail_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Registration::unsafe_arena_set_allocated_mail(
    std::string* mail) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mail != nullptr) {
    
  } else {
    
  }
  mail_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mail, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Registration.mail)
}

// string captcha = 4;
inline void Registration::clear_captcha() {
  captcha_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Registration::captcha() const {
  // @@protoc_insertion_point(field_get:Registration.captcha)
  return _internal_captcha();
}
inline void Registration::set_captcha(const std::string& value) {
  _internal_set_captcha(value);
  // @@protoc_insertion_point(field_set:Registration.captcha)
}
inline std::string* Registration::mutable_captcha() {
  // @@protoc_insertion_point(field_mutable:Registration.captcha)
  return _internal_mutable_captcha();
}
inline const std::string& Registration::_internal_captcha() const {
  return captcha_.Get();
}
inline void Registration::_internal_set_captcha(const std::string& value) {
  
  captcha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Registration::set_captcha(std::string&& value) {
  
  captcha_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Registration.captcha)
}
inline void Registration::set_captcha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Registration.captcha)
}
inline void Registration::set_captcha(const char* value,
    size_t size) {
  
  captcha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Registration.captcha)
}
inline std::string* Registration::_internal_mutable_captcha() {
  
  return captcha_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Registration::release_captcha() {
  // @@protoc_insertion_point(field_release:Registration.captcha)
  return captcha_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Registration::set_allocated_captcha(std::string* captcha) {
  if (captcha != nullptr) {
    
  } else {
    
  }
  captcha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Registration.captcha)
}
inline std::string* Registration::unsafe_arena_release_captcha() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Registration.captcha)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return captcha_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Registration::unsafe_arena_set_allocated_captcha(
    std::string* captcha) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (captcha != nullptr) {
    
  } else {
    
  }
  captcha_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      captcha, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Registration.captcha)
}

// string publicKey = 5;
inline void Registration::clear_publickey() {
  publickey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Registration::publickey() const {
  // @@protoc_insertion_point(field_get:Registration.publicKey)
  return _internal_publickey();
}
inline void Registration::set_publickey(const std::string& value) {
  _internal_set_publickey(value);
  // @@protoc_insertion_point(field_set:Registration.publicKey)
}
inline std::string* Registration::mutable_publickey() {
  // @@protoc_insertion_point(field_mutable:Registration.publicKey)
  return _internal_mutable_publickey();
}
inline const std::string& Registration::_internal_publickey() const {
  return publickey_.Get();
}
inline void Registration::_internal_set_publickey(const std::string& value) {
  
  publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Registration::set_publickey(std::string&& value) {
  
  publickey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Registration.publicKey)
}
inline void Registration::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Registration.publicKey)
}
inline void Registration::set_publickey(const char* value,
    size_t size) {
  
  publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Registration.publicKey)
}
inline std::string* Registration::_internal_mutable_publickey() {
  
  return publickey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Registration::release_publickey() {
  // @@protoc_insertion_point(field_release:Registration.publicKey)
  return publickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Registration::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Registration.publicKey)
}
inline std::string* Registration::unsafe_arena_release_publickey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Registration.publicKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return publickey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Registration::unsafe_arena_set_allocated_publickey(
    std::string* publickey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      publickey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Registration.publicKey)
}

// int32 stateCode = 6;
inline bool Registration::_internal_has_statecode() const {
  return v1_case() == kStateCode;
}
inline void Registration::set_has_statecode() {
  _oneof_case_[0] = kStateCode;
}
inline void Registration::clear_statecode() {
  if (_internal_has_statecode()) {
    v1_.statecode_ = 0;
    clear_has_v1();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Registration::_internal_statecode() const {
  if (_internal_has_statecode()) {
    return v1_.statecode_;
  }
  return 0;
}
inline void Registration::_internal_set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_statecode()) {
    clear_v1();
    set_has_statecode();
  }
  v1_.statecode_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Registration::statecode() const {
  // @@protoc_insertion_point(field_get:Registration.stateCode)
  return _internal_statecode();
}
inline void Registration::set_statecode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_statecode(value);
  // @@protoc_insertion_point(field_set:Registration.stateCode)
}

inline bool Registration::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
inline void Registration::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
inline Registration::V1Case Registration::v1_case() const {
  return Registration::V1Case(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InitialState

// string sessionId = 1;
inline void InitialState::clear_sessionid() {
  sessionid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitialState::sessionid() const {
  // @@protoc_insertion_point(field_get:InitialState.sessionId)
  return _internal_sessionid();
}
inline void InitialState::set_sessionid(const std::string& value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:InitialState.sessionId)
}
inline std::string* InitialState::mutable_sessionid() {
  // @@protoc_insertion_point(field_mutable:InitialState.sessionId)
  return _internal_mutable_sessionid();
}
inline const std::string& InitialState::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void InitialState::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitialState::set_sessionid(std::string&& value) {
  
  sessionid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InitialState.sessionId)
}
inline void InitialState::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InitialState.sessionId)
}
inline void InitialState::set_sessionid(const char* value,
    size_t size) {
  
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InitialState.sessionId)
}
inline std::string* InitialState::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitialState::release_sessionid() {
  // @@protoc_insertion_point(field_release:InitialState.sessionId)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitialState::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InitialState.sessionId)
}
inline std::string* InitialState::unsafe_arena_release_sessionid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InitialState.sessionId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sessionid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InitialState::unsafe_arena_set_allocated_sessionid(
    std::string* sessionid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sessionid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InitialState.sessionId)
}

// string login = 2;
inline void InitialState::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitialState::login() const {
  // @@protoc_insertion_point(field_get:InitialState.login)
  return _internal_login();
}
inline void InitialState::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:InitialState.login)
}
inline std::string* InitialState::mutable_login() {
  // @@protoc_insertion_point(field_mutable:InitialState.login)
  return _internal_mutable_login();
}
inline const std::string& InitialState::_internal_login() const {
  return login_.Get();
}
inline void InitialState::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitialState::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InitialState.login)
}
inline void InitialState::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InitialState.login)
}
inline void InitialState::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InitialState.login)
}
inline std::string* InitialState::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitialState::release_login() {
  // @@protoc_insertion_point(field_release:InitialState.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitialState::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InitialState.login)
}
inline std::string* InitialState::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InitialState.login)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InitialState::unsafe_arena_set_allocated_login(
    std::string* login) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login != nullptr) {
    
  } else {
    
  }
  login_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InitialState.login)
}

// repeated .CreateRoom createRoom = 3;
inline int InitialState::_internal_createroom_size() const {
  return createroom_.size();
}
inline int InitialState::createroom_size() const {
  return _internal_createroom_size();
}
inline ::CreateRoom* InitialState::mutable_createroom(int index) {
  // @@protoc_insertion_point(field_mutable:InitialState.createRoom)
  return createroom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CreateRoom >*
InitialState::mutable_createroom() {
  // @@protoc_insertion_point(field_mutable_list:InitialState.createRoom)
  return &createroom_;
}
inline const ::CreateRoom& InitialState::_internal_createroom(int index) const {
  return createroom_.Get(index);
}
inline const ::CreateRoom& InitialState::createroom(int index) const {
  // @@protoc_insertion_point(field_get:InitialState.createRoom)
  return _internal_createroom(index);
}
inline ::CreateRoom* InitialState::_internal_add_createroom() {
  return createroom_.Add();
}
inline ::CreateRoom* InitialState::add_createroom() {
  // @@protoc_insertion_point(field_add:InitialState.createRoom)
  return _internal_add_createroom();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CreateRoom >&
InitialState::createroom() const {
  // @@protoc_insertion_point(field_list:InitialState.createRoom)
  return createroom_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RegLogModels_2eproto
