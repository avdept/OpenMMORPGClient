// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameRoomModels.proto

#include "GameRoomModels.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MainMenuModels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Chat_MainMenuModels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameRoomModels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRoom_GameRoomModels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameRoomModels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoomDescribe_GameRoomModels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameRoomModels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomUpdate_GameRoomModels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameRoomModels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomsListUpdate_GameRoomModels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameRoomModels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeRoom_GameRoomModels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameRoomModels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamPlayer_GameRoomModels_2eproto;
class RoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Room> _instance;
} _Room_default_instance_;
class CreateRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRoom> _instance;
} _CreateRoom_default_instance_;
class RoomsListUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomsListUpdate> _instance;
} _RoomsListUpdate_default_instance_;
class SubscribeRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRoom> _instance;
  bool subscribe_;
} _SubscribeRoom_default_instance_;
class RoomDescribeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomDescribe> _instance;
} _RoomDescribe_default_instance_;
class TeamPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamPlayer> _instance;
} _TeamPlayer_default_instance_;
class RoomUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomUpdate> _instance;
} _RoomUpdate_default_instance_;
static void InitDefaultsscc_info_CreateRoom_GameRoomModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CreateRoom_default_instance_;
    new (ptr) ::CreateRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CreateRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRoom_GameRoomModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateRoom_GameRoomModels_2eproto}, {}};

static void InitDefaultsscc_info_Room_GameRoomModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Room_default_instance_;
    new (ptr) ::Room();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Room::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Room_GameRoomModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Room_GameRoomModels_2eproto}, {
      &scc_info_CreateRoom_GameRoomModels_2eproto.base,
      &scc_info_RoomsListUpdate_GameRoomModels_2eproto.base,
      &scc_info_SubscribeRoom_GameRoomModels_2eproto.base,
      &scc_info_RoomUpdate_GameRoomModels_2eproto.base,}};

static void InitDefaultsscc_info_RoomDescribe_GameRoomModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoomDescribe_default_instance_;
    new (ptr) ::RoomDescribe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoomDescribe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoomDescribe_GameRoomModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoomDescribe_GameRoomModels_2eproto}, {
      &scc_info_TeamPlayer_GameRoomModels_2eproto.base,
      &scc_info_Chat_MainMenuModels_2eproto.base,}};

static void InitDefaultsscc_info_RoomUpdate_GameRoomModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoomUpdate_default_instance_;
    new (ptr) ::RoomUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoomUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomUpdate_GameRoomModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoomUpdate_GameRoomModels_2eproto}, {
      &scc_info_RoomDescribe_GameRoomModels_2eproto.base,}};

static void InitDefaultsscc_info_RoomsListUpdate_GameRoomModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoomsListUpdate_default_instance_;
    new (ptr) ::RoomsListUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoomsListUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomsListUpdate_GameRoomModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomsListUpdate_GameRoomModels_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeRoom_GameRoomModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubscribeRoom_default_instance_;
    new (ptr) ::SubscribeRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubscribeRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeRoom_GameRoomModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeRoom_GameRoomModels_2eproto}, {
      &scc_info_RoomDescribe_GameRoomModels_2eproto.base,}};

static void InitDefaultsscc_info_TeamPlayer_GameRoomModels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TeamPlayer_default_instance_;
    new (ptr) ::TeamPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeamPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamPlayer_GameRoomModels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamPlayer_GameRoomModels_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameRoomModels_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_GameRoomModels_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameRoomModels_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameRoomModels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Room, createroom_),
  PROTOBUF_FIELD_OFFSET(::Room, roomslistupdate_),
  PROTOBUF_FIELD_OFFSET(::Room, subscriberoom_),
  PROTOBUF_FIELD_OFFSET(::Room, roomupdate_),
  PROTOBUF_FIELD_OFFSET(::Room, startgame_),
  PROTOBUF_FIELD_OFFSET(::Room, roomname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CreateRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CreateRoom, roomname_),
  PROTOBUF_FIELD_OFFSET(::CreateRoom, mapname_),
  PROTOBUF_FIELD_OFFSET(::CreateRoom, gametime_),
  PROTOBUF_FIELD_OFFSET(::CreateRoom, maxplayers_),
  PROTOBUF_FIELD_OFFSET(::CreateRoom, creator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoomsListUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoomsListUpdate, deleteroom_),
  PROTOBUF_FIELD_OFFSET(::RoomsListUpdate, addroom_),
  PROTOBUF_FIELD_OFFSET(::RoomsListUpdate, roomname_),
  PROTOBUF_FIELD_OFFSET(::RoomsListUpdate, roomowner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SubscribeRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SubscribeRoom, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SubscribeRoomDefaultTypeInternal, subscribe_),
  PROTOBUF_FIELD_OFFSET(::SubscribeRoom, roomname_),
  PROTOBUF_FIELD_OFFSET(::SubscribeRoom, statecode_),
  PROTOBUF_FIELD_OFFSET(::SubscribeRoom, roomdescribe_),
  PROTOBUF_FIELD_OFFSET(::SubscribeRoom, player_),
  PROTOBUF_FIELD_OFFSET(::SubscribeRoom, team_),
  PROTOBUF_FIELD_OFFSET(::SubscribeRoom, v1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoomDescribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoomDescribe, team1_),
  PROTOBUF_FIELD_OFFSET(::RoomDescribe, team2_),
  PROTOBUF_FIELD_OFFSET(::RoomDescribe, undistributed_),
  PROTOBUF_FIELD_OFFSET(::RoomDescribe, roomname_),
  PROTOBUF_FIELD_OFFSET(::RoomDescribe, mapname_),
  PROTOBUF_FIELD_OFFSET(::RoomDescribe, gametime_),
  PROTOBUF_FIELD_OFFSET(::RoomDescribe, maxplayers_),
  PROTOBUF_FIELD_OFFSET(::RoomDescribe, creator_),
  PROTOBUF_FIELD_OFFSET(::RoomDescribe, chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeamPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeamPlayer, player_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoomUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoomUpdate, roomdescribe_),
  PROTOBUF_FIELD_OFFSET(::RoomUpdate, targetteam_),
  PROTOBUF_FIELD_OFFSET(::RoomUpdate, roomname_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Room)},
  { 11, -1, sizeof(::CreateRoom)},
  { 21, -1, sizeof(::RoomsListUpdate)},
  { 30, -1, sizeof(::SubscribeRoom)},
  { 42, -1, sizeof(::RoomDescribe)},
  { 56, -1, sizeof(::TeamPlayer)},
  { 62, -1, sizeof(::RoomUpdate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Room_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CreateRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoomsListUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SubscribeRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoomDescribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TeamPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoomUpdate_default_instance_),
};

const char descriptor_table_protodef_GameRoomModels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024GameRoomModels.proto\032\025DisableWarnings."
  "proto\032\024MainMenuModels.proto\"\277\001\n\004Room\022\037\n\n"
  "createRoom\030\001 \001(\0132\013.CreateRoom\022)\n\017roomsLi"
  "stUpdate\030\002 \001(\0132\020.RoomsListUpdate\022%\n\rsubs"
  "cribeRoom\030\003 \001(\0132\016.SubscribeRoom\022\037\n\nroomU"
  "pdate\030\004 \001(\0132\013.RoomUpdate\022\021\n\tstartGame\030\005 "
  "\001(\010\022\020\n\010roomName\030\006 \001(\t\"f\n\nCreateRoom\022\020\n\010r"
  "oomName\030\001 \001(\t\022\017\n\007mapName\030\002 \001(\t\022\020\n\010gameTi"
  "me\030\003 \001(\t\022\022\n\nmaxPlayers\030\004 \001(\t\022\017\n\007creator\030"
  "\005 \001(\t\"[\n\017RoomsListUpdate\022\022\n\ndeleteRoom\030\001"
  " \001(\010\022\017\n\007addRoom\030\002 \001(\010\022\020\n\010roomName\030\003 \001(\t\022"
  "\021\n\troomOwner\030\004 \001(\t\"\222\001\n\rSubscribeRoom\022\023\n\t"
  "subscribe\030\001 \001(\010H\000\022\020\n\010roomName\030\002 \001(\t\022\021\n\ts"
  "tateCode\030\003 \001(\005\022#\n\014roomDescribe\030\004 \001(\0132\r.R"
  "oomDescribe\022\016\n\006player\030\005 \001(\t\022\014\n\004team\030\006 \001("
  "\tB\004\n\002v1\"\331\001\n\014RoomDescribe\022\032\n\005team1\030\001 \003(\0132"
  "\013.TeamPlayer\022\032\n\005team2\030\002 \003(\0132\013.TeamPlayer"
  "\022\"\n\rundistributed\030\003 \003(\0132\013.TeamPlayer\022\020\n\010"
  "roomName\030\004 \001(\t\022\017\n\007mapName\030\005 \001(\t\022\020\n\010gameT"
  "ime\030\006 \001(\t\022\022\n\nmaxPlayers\030\007 \001(\t\022\017\n\007creator"
  "\030\010 \001(\t\022\023\n\004chat\030\t \001(\0132\005.Chat\"!\n\nTeamPlaye"
  "r\022\023\n\013player_name\030\001 \001(\t\"W\n\nRoomUpdate\022#\n\014"
  "roomDescribe\030\001 \001(\0132\r.RoomDescribe\022\022\n\ntar"
  "getTeam\030\002 \001(\t\022\020\n\010roomName\030\003 \001(\tB\006Z\004mainb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GameRoomModels_2eproto_deps[2] = {
  &::descriptor_table_DisableWarnings_2eproto,
  &::descriptor_table_MainMenuModels_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GameRoomModels_2eproto_sccs[7] = {
  &scc_info_CreateRoom_GameRoomModels_2eproto.base,
  &scc_info_Room_GameRoomModels_2eproto.base,
  &scc_info_RoomDescribe_GameRoomModels_2eproto.base,
  &scc_info_RoomUpdate_GameRoomModels_2eproto.base,
  &scc_info_RoomsListUpdate_GameRoomModels_2eproto.base,
  &scc_info_SubscribeRoom_GameRoomModels_2eproto.base,
  &scc_info_TeamPlayer_GameRoomModels_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameRoomModels_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameRoomModels_2eproto = {
  false, false, descriptor_table_protodef_GameRoomModels_2eproto, "GameRoomModels.proto", 967,
  &descriptor_table_GameRoomModels_2eproto_once, descriptor_table_GameRoomModels_2eproto_sccs, descriptor_table_GameRoomModels_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_GameRoomModels_2eproto::offsets,
  file_level_metadata_GameRoomModels_2eproto, 7, file_level_enum_descriptors_GameRoomModels_2eproto, file_level_service_descriptors_GameRoomModels_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameRoomModels_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GameRoomModels_2eproto)), true);

// ===================================================================

void Room::InitAsDefaultInstance() {
  ::_Room_default_instance_._instance.get_mutable()->createroom_ = const_cast< ::CreateRoom*>(
      ::CreateRoom::internal_default_instance());
  ::_Room_default_instance_._instance.get_mutable()->roomslistupdate_ = const_cast< ::RoomsListUpdate*>(
      ::RoomsListUpdate::internal_default_instance());
  ::_Room_default_instance_._instance.get_mutable()->subscriberoom_ = const_cast< ::SubscribeRoom*>(
      ::SubscribeRoom::internal_default_instance());
  ::_Room_default_instance_._instance.get_mutable()->roomupdate_ = const_cast< ::RoomUpdate*>(
      ::RoomUpdate::internal_default_instance());
}
class Room::_Internal {
 public:
  static const ::CreateRoom& createroom(const Room* msg);
  static const ::RoomsListUpdate& roomslistupdate(const Room* msg);
  static const ::SubscribeRoom& subscriberoom(const Room* msg);
  static const ::RoomUpdate& roomupdate(const Room* msg);
};

const ::CreateRoom&
Room::_Internal::createroom(const Room* msg) {
  return *msg->createroom_;
}
const ::RoomsListUpdate&
Room::_Internal::roomslistupdate(const Room* msg) {
  return *msg->roomslistupdate_;
}
const ::SubscribeRoom&
Room::_Internal::subscriberoom(const Room* msg) {
  return *msg->subscriberoom_;
}
const ::RoomUpdate&
Room::_Internal::roomupdate(const Room* msg) {
  return *msg->roomupdate_;
}
Room::Room(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Room)
}
Room::Room(const Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomname(),
      GetArena());
  }
  if (from._internal_has_createroom()) {
    createroom_ = new ::CreateRoom(*from.createroom_);
  } else {
    createroom_ = nullptr;
  }
  if (from._internal_has_roomslistupdate()) {
    roomslistupdate_ = new ::RoomsListUpdate(*from.roomslistupdate_);
  } else {
    roomslistupdate_ = nullptr;
  }
  if (from._internal_has_subscriberoom()) {
    subscriberoom_ = new ::SubscribeRoom(*from.subscriberoom_);
  } else {
    subscriberoom_ = nullptr;
  }
  if (from._internal_has_roomupdate()) {
    roomupdate_ = new ::RoomUpdate(*from.roomupdate_);
  } else {
    roomupdate_ = nullptr;
  }
  startgame_ = from.startgame_;
  // @@protoc_insertion_point(copy_constructor:Room)
}

void Room::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Room_GameRoomModels_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&createroom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startgame_) -
      reinterpret_cast<char*>(&createroom_)) + sizeof(startgame_));
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:Room)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Room::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete createroom_;
  if (this != internal_default_instance()) delete roomslistupdate_;
  if (this != internal_default_instance()) delete subscriberoom_;
  if (this != internal_default_instance()) delete roomupdate_;
}

void Room::ArenaDtor(void* object) {
  Room* _this = reinterpret_cast< Room* >(object);
  (void)_this;
}
void Room::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Room::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Room& Room::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Room_GameRoomModels_2eproto.base);
  return *internal_default_instance();
}


void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:Room)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && createroom_ != nullptr) {
    delete createroom_;
  }
  createroom_ = nullptr;
  if (GetArena() == nullptr && roomslistupdate_ != nullptr) {
    delete roomslistupdate_;
  }
  roomslistupdate_ = nullptr;
  if (GetArena() == nullptr && subscriberoom_ != nullptr) {
    delete subscriberoom_;
  }
  subscriberoom_ = nullptr;
  if (GetArena() == nullptr && roomupdate_ != nullptr) {
    delete roomupdate_;
  }
  roomupdate_ = nullptr;
  startgame_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Room::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CreateRoom createRoom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_createroom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoomsListUpdate roomsListUpdate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roomslistupdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SubscribeRoom subscribeRoom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriberoom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoomUpdate roomUpdate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_roomupdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool startGame = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          startgame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roomName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Room.roomName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Room::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Room)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateRoom createRoom = 1;
  if (this->has_createroom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::createroom(this), target, stream);
  }

  // .RoomsListUpdate roomsListUpdate = 2;
  if (this->has_roomslistupdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roomslistupdate(this), target, stream);
  }

  // .SubscribeRoom subscribeRoom = 3;
  if (this->has_subscriberoom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::subscriberoom(this), target, stream);
  }

  // .RoomUpdate roomUpdate = 4;
  if (this->has_roomupdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::roomupdate(this), target, stream);
  }

  // bool startGame = 5;
  if (this->startgame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_startgame(), target);
  }

  // string roomName = 6;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Room.roomName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_roomname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Room)
  return target;
}

size_t Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Room)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 6;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // .CreateRoom createRoom = 1;
  if (this->has_createroom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *createroom_);
  }

  // .RoomsListUpdate roomsListUpdate = 2;
  if (this->has_roomslistupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roomslistupdate_);
  }

  // .SubscribeRoom subscribeRoom = 3;
  if (this->has_subscriberoom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscriberoom_);
  }

  // .RoomUpdate roomUpdate = 4;
  if (this->has_roomupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roomupdate_);
  }

  // bool startGame = 5;
  if (this->startgame() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Room::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Room)
  GOOGLE_DCHECK_NE(&from, this);
  const Room* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Room>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Room)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Room)
    MergeFrom(*source);
  }
}

void Room::MergeFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.has_createroom()) {
    _internal_mutable_createroom()->::CreateRoom::MergeFrom(from._internal_createroom());
  }
  if (from.has_roomslistupdate()) {
    _internal_mutable_roomslistupdate()->::RoomsListUpdate::MergeFrom(from._internal_roomslistupdate());
  }
  if (from.has_subscriberoom()) {
    _internal_mutable_subscriberoom()->::SubscribeRoom::MergeFrom(from._internal_subscriberoom());
  }
  if (from.has_roomupdate()) {
    _internal_mutable_roomupdate()->::RoomUpdate::MergeFrom(from._internal_roomupdate());
  }
  if (from.startgame() != 0) {
    _internal_set_startgame(from._internal_startgame());
  }
}

void Room::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {
  return true;
}

void Room::InternalSwap(Room* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Room, startgame_)
      + sizeof(Room::startgame_)
      - PROTOBUF_FIELD_OFFSET(Room, createroom_)>(
          reinterpret_cast<char*>(&createroom_),
          reinterpret_cast<char*>(&other->createroom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Room::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateRoom::InitAsDefaultInstance() {
}
class CreateRoom::_Internal {
 public:
};

CreateRoom::CreateRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CreateRoom)
}
CreateRoom::CreateRoom(const CreateRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomname(),
      GetArena());
  }
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mapname().empty()) {
    mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mapname(),
      GetArena());
  }
  gametime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gametime().empty()) {
    gametime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gametime(),
      GetArena());
  }
  maxplayers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maxplayers().empty()) {
    maxplayers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_maxplayers(),
      GetArena());
  }
  creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator().empty()) {
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_creator(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CreateRoom)
}

void CreateRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateRoom_GameRoomModels_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gametime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxplayers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateRoom::~CreateRoom() {
  // @@protoc_insertion_point(destructor:CreateRoom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mapname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gametime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxplayers_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRoom::ArenaDtor(void* object) {
  CreateRoom* _this = reinterpret_cast< CreateRoom* >(object);
  (void)_this;
}
void CreateRoom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRoom& CreateRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRoom_GameRoomModels_2eproto.base);
  return *internal_default_instance();
}


void CreateRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mapname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gametime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maxplayers_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string roomName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CreateRoom.roomName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mapName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mapname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CreateRoom.mapName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gameTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gametime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CreateRoom.gameTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maxPlayers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_maxplayers();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CreateRoom.maxPlayers"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string creator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_creator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CreateRoom.creator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRoom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.roomName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomname(), target);
  }

  // string mapName = 2;
  if (this->mapname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapname().data(), static_cast<int>(this->_internal_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.mapName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mapname(), target);
  }

  // string gameTime = 3;
  if (this->gametime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gametime().data(), static_cast<int>(this->_internal_gametime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.gameTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gametime(), target);
  }

  // string maxPlayers = 4;
  if (this->maxplayers().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maxplayers().data(), static_cast<int>(this->_internal_maxplayers().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.maxPlayers");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_maxplayers(), target);
  }

  // string creator = 5;
  if (this->creator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.creator");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_creator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateRoom)
  return target;
}

size_t CreateRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateRoom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 1;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // string mapName = 2;
  if (this->mapname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapname());
  }

  // string gameTime = 3;
  if (this->gametime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gametime());
  }

  // string maxPlayers = 4;
  if (this->maxplayers().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maxplayers());
  }

  // string creator = 5;
  if (this->creator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateRoom)
    MergeFrom(*source);
  }
}

void CreateRoom::MergeFrom(const CreateRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.mapname().size() > 0) {
    _internal_set_mapname(from._internal_mapname());
  }
  if (from.gametime().size() > 0) {
    _internal_set_gametime(from._internal_gametime());
  }
  if (from.maxplayers().size() > 0) {
    _internal_set_maxplayers(from._internal_maxplayers());
  }
  if (from.creator().size() > 0) {
    _internal_set_creator(from._internal_creator());
  }
}

void CreateRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoom::CopyFrom(const CreateRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoom::IsInitialized() const {
  return true;
}

void CreateRoom::InternalSwap(CreateRoom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mapname_.Swap(&other->mapname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gametime_.Swap(&other->gametime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maxplayers_.Swap(&other->maxplayers_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creator_.Swap(&other->creator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomsListUpdate::InitAsDefaultInstance() {
}
class RoomsListUpdate::_Internal {
 public:
};

RoomsListUpdate::RoomsListUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoomsListUpdate)
}
RoomsListUpdate::RoomsListUpdate(const RoomsListUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomname(),
      GetArena());
  }
  roomowner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomowner().empty()) {
    roomowner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomowner(),
      GetArena());
  }
  ::memcpy(&deleteroom_, &from.deleteroom_,
    static_cast<size_t>(reinterpret_cast<char*>(&addroom_) -
    reinterpret_cast<char*>(&deleteroom_)) + sizeof(addroom_));
  // @@protoc_insertion_point(copy_constructor:RoomsListUpdate)
}

void RoomsListUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomsListUpdate_GameRoomModels_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomowner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&deleteroom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addroom_) -
      reinterpret_cast<char*>(&deleteroom_)) + sizeof(addroom_));
}

RoomsListUpdate::~RoomsListUpdate() {
  // @@protoc_insertion_point(destructor:RoomsListUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomsListUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomowner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomsListUpdate::ArenaDtor(void* object) {
  RoomsListUpdate* _this = reinterpret_cast< RoomsListUpdate* >(object);
  (void)_this;
}
void RoomsListUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomsListUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomsListUpdate& RoomsListUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomsListUpdate_GameRoomModels_2eproto.base);
  return *internal_default_instance();
}


void RoomsListUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomsListUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  roomowner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&deleteroom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addroom_) -
      reinterpret_cast<char*>(&deleteroom_)) + sizeof(addroom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomsListUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool deleteRoom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          deleteroom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool addRoom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          addroom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roomName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoomsListUpdate.roomName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roomOwner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_roomowner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoomsListUpdate.roomOwner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomsListUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomsListUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool deleteRoom = 1;
  if (this->deleteroom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_deleteroom(), target);
  }

  // bool addRoom = 2;
  if (this->addroom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_addroom(), target);
  }

  // string roomName = 3;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoomsListUpdate.roomName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_roomname(), target);
  }

  // string roomOwner = 4;
  if (this->roomowner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomowner().data(), static_cast<int>(this->_internal_roomowner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoomsListUpdate.roomOwner");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_roomowner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomsListUpdate)
  return target;
}

size_t RoomsListUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomsListUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 3;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // string roomOwner = 4;
  if (this->roomowner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomowner());
  }

  // bool deleteRoom = 1;
  if (this->deleteroom() != 0) {
    total_size += 1 + 1;
  }

  // bool addRoom = 2;
  if (this->addroom() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomsListUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomsListUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomsListUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomsListUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomsListUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomsListUpdate)
    MergeFrom(*source);
  }
}

void RoomsListUpdate::MergeFrom(const RoomsListUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomsListUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.roomowner().size() > 0) {
    _internal_set_roomowner(from._internal_roomowner());
  }
  if (from.deleteroom() != 0) {
    _internal_set_deleteroom(from._internal_deleteroom());
  }
  if (from.addroom() != 0) {
    _internal_set_addroom(from._internal_addroom());
  }
}

void RoomsListUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomsListUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsListUpdate::CopyFrom(const RoomsListUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomsListUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsListUpdate::IsInitialized() const {
  return true;
}

void RoomsListUpdate::InternalSwap(RoomsListUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  roomowner_.Swap(&other->roomowner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomsListUpdate, addroom_)
      + sizeof(RoomsListUpdate::addroom_)
      - PROTOBUF_FIELD_OFFSET(RoomsListUpdate, deleteroom_)>(
          reinterpret_cast<char*>(&deleteroom_),
          reinterpret_cast<char*>(&other->deleteroom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomsListUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeRoom::InitAsDefaultInstance() {
  ::_SubscribeRoom_default_instance_.subscribe_ = false;
  ::_SubscribeRoom_default_instance_._instance.get_mutable()->roomdescribe_ = const_cast< ::RoomDescribe*>(
      ::RoomDescribe::internal_default_instance());
}
class SubscribeRoom::_Internal {
 public:
  static const ::RoomDescribe& roomdescribe(const SubscribeRoom* msg);
};

const ::RoomDescribe&
SubscribeRoom::_Internal::roomdescribe(const SubscribeRoom* msg) {
  return *msg->roomdescribe_;
}
SubscribeRoom::SubscribeRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubscribeRoom)
}
SubscribeRoom::SubscribeRoom(const SubscribeRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomname(),
      GetArena());
  }
  player_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player().empty()) {
    player_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player(),
      GetArena());
  }
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_team().empty()) {
    team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_team(),
      GetArena());
  }
  if (from._internal_has_roomdescribe()) {
    roomdescribe_ = new ::RoomDescribe(*from.roomdescribe_);
  } else {
    roomdescribe_ = nullptr;
  }
  statecode_ = from.statecode_;
  clear_has_v1();
  switch (from.v1_case()) {
    case kSubscribe: {
      _internal_set_subscribe(from._internal_subscribe());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubscribeRoom)
}

void SubscribeRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeRoom_GameRoomModels_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomdescribe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statecode_) -
      reinterpret_cast<char*>(&roomdescribe_)) + sizeof(statecode_));
  clear_has_v1();
}

SubscribeRoom::~SubscribeRoom() {
  // @@protoc_insertion_point(destructor:SubscribeRoom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete roomdescribe_;
  if (has_v1()) {
    clear_v1();
  }
}

void SubscribeRoom::ArenaDtor(void* object) {
  SubscribeRoom* _this = reinterpret_cast< SubscribeRoom* >(object);
  (void)_this;
}
void SubscribeRoom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRoom& SubscribeRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRoom_GameRoomModels_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRoom::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:SubscribeRoom)
  switch (v1_case()) {
    case kSubscribe: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V1_NOT_SET;
}


void SubscribeRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:SubscribeRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && roomdescribe_ != nullptr) {
    delete roomdescribe_;
  }
  roomdescribe_ = nullptr;
  statecode_ = 0;
  clear_v1();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_subscribe(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roomName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubscribeRoom.roomName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stateCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          statecode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoomDescribe roomDescribe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_roomdescribe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string player = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_player();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubscribeRoom.player"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string team = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_team();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubscribeRoom.team"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRoom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubscribeRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool subscribe = 1;
  if (_internal_has_subscribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_subscribe(), target);
  }

  // string roomName = 2;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SubscribeRoom.roomName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomname(), target);
  }

  // int32 stateCode = 3;
  if (this->statecode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_statecode(), target);
  }

  // .RoomDescribe roomDescribe = 4;
  if (this->has_roomdescribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::roomdescribe(this), target, stream);
  }

  // string player = 5;
  if (this->player().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player().data(), static_cast<int>(this->_internal_player().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SubscribeRoom.player");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_player(), target);
  }

  // string team = 6;
  if (this->team().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_team().data(), static_cast<int>(this->_internal_team().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SubscribeRoom.team");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubscribeRoom)
  return target;
}

size_t SubscribeRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubscribeRoom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 2;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // string player = 5;
  if (this->player().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player());
  }

  // string team = 6;
  if (this->team().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team());
  }

  // .RoomDescribe roomDescribe = 4;
  if (this->has_roomdescribe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roomdescribe_);
  }

  // int32 stateCode = 3;
  if (this->statecode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_statecode());
  }

  switch (v1_case()) {
    // bool subscribe = 1;
    case kSubscribe: {
      total_size += 1 + 1;
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubscribeRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubscribeRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubscribeRoom)
    MergeFrom(*source);
  }
}

void SubscribeRoom::MergeFrom(const SubscribeRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubscribeRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.player().size() > 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.team().size() > 0) {
    _internal_set_team(from._internal_team());
  }
  if (from.has_roomdescribe()) {
    _internal_mutable_roomdescribe()->::RoomDescribe::MergeFrom(from._internal_roomdescribe());
  }
  if (from.statecode() != 0) {
    _internal_set_statecode(from._internal_statecode());
  }
  switch (from.v1_case()) {
    case kSubscribe: {
      _internal_set_subscribe(from._internal_subscribe());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
}

void SubscribeRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubscribeRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRoom::CopyFrom(const SubscribeRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubscribeRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRoom::IsInitialized() const {
  return true;
}

void SubscribeRoom::InternalSwap(SubscribeRoom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_.Swap(&other->player_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_.Swap(&other->team_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeRoom, statecode_)
      + sizeof(SubscribeRoom::statecode_)
      - PROTOBUF_FIELD_OFFSET(SubscribeRoom, roomdescribe_)>(
          reinterpret_cast<char*>(&roomdescribe_),
          reinterpret_cast<char*>(&other->roomdescribe_));
  swap(v1_, other->v1_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomDescribe::InitAsDefaultInstance() {
  ::_RoomDescribe_default_instance_._instance.get_mutable()->chat_ = const_cast< ::Chat*>(
      ::Chat::internal_default_instance());
}
class RoomDescribe::_Internal {
 public:
  static const ::Chat& chat(const RoomDescribe* msg);
};

const ::Chat&
RoomDescribe::_Internal::chat(const RoomDescribe* msg) {
  return *msg->chat_;
}
void RoomDescribe::clear_chat() {
  if (GetArena() == nullptr && chat_ != nullptr) {
    delete chat_;
  }
  chat_ = nullptr;
}
RoomDescribe::RoomDescribe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  team1_(arena),
  team2_(arena),
  undistributed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoomDescribe)
}
RoomDescribe::RoomDescribe(const RoomDescribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      team1_(from.team1_),
      team2_(from.team2_),
      undistributed_(from.undistributed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomname(),
      GetArena());
  }
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mapname().empty()) {
    mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mapname(),
      GetArena());
  }
  gametime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gametime().empty()) {
    gametime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gametime(),
      GetArena());
  }
  maxplayers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maxplayers().empty()) {
    maxplayers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_maxplayers(),
      GetArena());
  }
  creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator().empty()) {
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_creator(),
      GetArena());
  }
  if (from._internal_has_chat()) {
    chat_ = new ::Chat(*from.chat_);
  } else {
    chat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RoomDescribe)
}

void RoomDescribe::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomDescribe_GameRoomModels_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gametime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxplayers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_ = nullptr;
}

RoomDescribe::~RoomDescribe() {
  // @@protoc_insertion_point(destructor:RoomDescribe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomDescribe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mapname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gametime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxplayers_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chat_;
}

void RoomDescribe::ArenaDtor(void* object) {
  RoomDescribe* _this = reinterpret_cast< RoomDescribe* >(object);
  (void)_this;
}
void RoomDescribe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomDescribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomDescribe& RoomDescribe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomDescribe_GameRoomModels_2eproto.base);
  return *internal_default_instance();
}


void RoomDescribe::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomDescribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team1_.Clear();
  team2_.Clear();
  undistributed_.Clear();
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mapname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gametime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maxplayers_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && chat_ != nullptr) {
    delete chat_;
  }
  chat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomDescribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TeamPlayer team1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TeamPlayer team2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TeamPlayer undistributed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undistributed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string roomName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoomDescribe.roomName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mapName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mapname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoomDescribe.mapName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gameTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gametime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoomDescribe.gameTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maxPlayers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_maxplayers();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoomDescribe.maxPlayers"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string creator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_creator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoomDescribe.creator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Chat chat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomDescribe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomDescribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TeamPlayer team1 = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_team1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_team1(i), target, stream);
  }

  // repeated .TeamPlayer team2 = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_team2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_team2(i), target, stream);
  }

  // repeated .TeamPlayer undistributed = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undistributed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_undistributed(i), target, stream);
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.roomName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_roomname(), target);
  }

  // string mapName = 5;
  if (this->mapname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapname().data(), static_cast<int>(this->_internal_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.mapName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mapname(), target);
  }

  // string gameTime = 6;
  if (this->gametime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gametime().data(), static_cast<int>(this->_internal_gametime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.gameTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gametime(), target);
  }

  // string maxPlayers = 7;
  if (this->maxplayers().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maxplayers().data(), static_cast<int>(this->_internal_maxplayers().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.maxPlayers");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_maxplayers(), target);
  }

  // string creator = 8;
  if (this->creator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.creator");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_creator(), target);
  }

  // .Chat chat = 9;
  if (this->has_chat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::chat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomDescribe)
  return target;
}

size_t RoomDescribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomDescribe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TeamPlayer team1 = 1;
  total_size += 1UL * this->_internal_team1_size();
  for (const auto& msg : this->team1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TeamPlayer team2 = 2;
  total_size += 1UL * this->_internal_team2_size();
  for (const auto& msg : this->team2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TeamPlayer undistributed = 3;
  total_size += 1UL * this->_internal_undistributed_size();
  for (const auto& msg : this->undistributed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // string mapName = 5;
  if (this->mapname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapname());
  }

  // string gameTime = 6;
  if (this->gametime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gametime());
  }

  // string maxPlayers = 7;
  if (this->maxplayers().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maxplayers());
  }

  // string creator = 8;
  if (this->creator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  // .Chat chat = 9;
  if (this->has_chat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomDescribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomDescribe)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomDescribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomDescribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomDescribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomDescribe)
    MergeFrom(*source);
  }
}

void RoomDescribe::MergeFrom(const RoomDescribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomDescribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team1_.MergeFrom(from.team1_);
  team2_.MergeFrom(from.team2_);
  undistributed_.MergeFrom(from.undistributed_);
  if (from.roomname().size() > 0) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.mapname().size() > 0) {
    _internal_set_mapname(from._internal_mapname());
  }
  if (from.gametime().size() > 0) {
    _internal_set_gametime(from._internal_gametime());
  }
  if (from.maxplayers().size() > 0) {
    _internal_set_maxplayers(from._internal_maxplayers());
  }
  if (from.creator().size() > 0) {
    _internal_set_creator(from._internal_creator());
  }
  if (from.has_chat()) {
    _internal_mutable_chat()->::Chat::MergeFrom(from._internal_chat());
  }
}

void RoomDescribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomDescribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomDescribe::CopyFrom(const RoomDescribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomDescribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDescribe::IsInitialized() const {
  return true;
}

void RoomDescribe::InternalSwap(RoomDescribe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  team1_.InternalSwap(&other->team1_);
  team2_.InternalSwap(&other->team2_);
  undistributed_.InternalSwap(&other->undistributed_);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mapname_.Swap(&other->mapname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gametime_.Swap(&other->gametime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maxplayers_.Swap(&other->maxplayers_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creator_.Swap(&other->creator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(chat_, other->chat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomDescribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamPlayer::InitAsDefaultInstance() {
}
class TeamPlayer::_Internal {
 public:
};

TeamPlayer::TeamPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeamPlayer)
}
TeamPlayer::TeamPlayer(const TeamPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_name().empty()) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TeamPlayer)
}

void TeamPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamPlayer_GameRoomModels_2eproto.base);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TeamPlayer::~TeamPlayer() {
  // @@protoc_insertion_point(destructor:TeamPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeamPlayer::ArenaDtor(void* object) {
  TeamPlayer* _this = reinterpret_cast< TeamPlayer* >(object);
  (void)_this;
}
void TeamPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamPlayer& TeamPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamPlayer_GameRoomModels_2eproto.base);
  return *internal_default_instance();
}


void TeamPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string player_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TeamPlayer.player_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_name = 1;
  if (this->player_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TeamPlayer.player_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamPlayer)
  return target;
}

size_t TeamPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 1;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamPlayer)
    MergeFrom(*source);
  }
}

void TeamPlayer::MergeFrom(const TeamPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_name().size() > 0) {
    _internal_set_player_name(from._internal_player_name());
  }
}

void TeamPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPlayer::CopyFrom(const TeamPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPlayer::IsInitialized() const {
  return true;
}

void TeamPlayer::InternalSwap(TeamPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomUpdate::InitAsDefaultInstance() {
  ::_RoomUpdate_default_instance_._instance.get_mutable()->roomdescribe_ = const_cast< ::RoomDescribe*>(
      ::RoomDescribe::internal_default_instance());
}
class RoomUpdate::_Internal {
 public:
  static const ::RoomDescribe& roomdescribe(const RoomUpdate* msg);
};

const ::RoomDescribe&
RoomUpdate::_Internal::roomdescribe(const RoomUpdate* msg) {
  return *msg->roomdescribe_;
}
RoomUpdate::RoomUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoomUpdate)
}
RoomUpdate::RoomUpdate(const RoomUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  targetteam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetteam().empty()) {
    targetteam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_targetteam(),
      GetArena());
  }
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomname(),
      GetArena());
  }
  if (from._internal_has_roomdescribe()) {
    roomdescribe_ = new ::RoomDescribe(*from.roomdescribe_);
  } else {
    roomdescribe_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RoomUpdate)
}

void RoomUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomUpdate_GameRoomModels_2eproto.base);
  targetteam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomdescribe_ = nullptr;
}

RoomUpdate::~RoomUpdate() {
  // @@protoc_insertion_point(destructor:RoomUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  targetteam_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete roomdescribe_;
}

void RoomUpdate::ArenaDtor(void* object) {
  RoomUpdate* _this = reinterpret_cast< RoomUpdate* >(object);
  (void)_this;
}
void RoomUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomUpdate& RoomUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomUpdate_GameRoomModels_2eproto.base);
  return *internal_default_instance();
}


void RoomUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetteam_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && roomdescribe_ != nullptr) {
    delete roomdescribe_;
  }
  roomdescribe_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RoomDescribe roomDescribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roomdescribe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string targetTeam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_targetteam();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoomUpdate.targetTeam"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roomName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoomUpdate.roomName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoomDescribe roomDescribe = 1;
  if (this->has_roomdescribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roomdescribe(this), target, stream);
  }

  // string targetTeam = 2;
  if (this->targetteam().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetteam().data(), static_cast<int>(this->_internal_targetteam().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoomUpdate.targetTeam");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_targetteam(), target);
  }

  // string roomName = 3;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoomUpdate.roomName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_roomname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomUpdate)
  return target;
}

size_t RoomUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string targetTeam = 2;
  if (this->targetteam().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetteam());
  }

  // string roomName = 3;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // .RoomDescribe roomDescribe = 1;
  if (this->has_roomdescribe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roomdescribe_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomUpdate)
    MergeFrom(*source);
  }
}

void RoomUpdate::MergeFrom(const RoomUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.targetteam().size() > 0) {
    _internal_set_targetteam(from._internal_targetteam());
  }
  if (from.roomname().size() > 0) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.has_roomdescribe()) {
    _internal_mutable_roomdescribe()->::RoomDescribe::MergeFrom(from._internal_roomdescribe());
  }
}

void RoomUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomUpdate::CopyFrom(const RoomUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomUpdate::IsInitialized() const {
  return true;
}

void RoomUpdate::InternalSwap(RoomUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  targetteam_.Swap(&other->targetteam_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(roomdescribe_, other->roomdescribe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Room* Arena::CreateMaybeMessage< ::Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Room >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateRoom* Arena::CreateMaybeMessage< ::CreateRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::RoomsListUpdate* Arena::CreateMaybeMessage< ::RoomsListUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoomsListUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::SubscribeRoom* Arena::CreateMaybeMessage< ::SubscribeRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubscribeRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::RoomDescribe* Arena::CreateMaybeMessage< ::RoomDescribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoomDescribe >(arena);
}
template<> PROTOBUF_NOINLINE ::TeamPlayer* Arena::CreateMaybeMessage< ::TeamPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeamPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::RoomUpdate* Arena::CreateMaybeMessage< ::RoomUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoomUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
